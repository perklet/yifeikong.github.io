<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Yifei Kong</title><link>/</link><description></description><lastBuildDate>Sun, 17 Feb 2019 14:15:00 +0800</lastBuildDate><item><title>Rust 的生命周期管理概述</title><link>/posts/rust-de-sheng-ming-zhou-qi-guan-li-gai-shu.html</link><description>&lt;p&gt;周末花些时间把 Rust 生命周期又翻了一遍，终于能写出一个可以编译通过的程序了😁。Rust 虽然学习曲线比较陡峭，但是掌握之后就发现这么设计确实是有道理的，尤其是对于编写正确的 C++ 程序也很有帮助。&lt;/p&gt;
&lt;h1&gt;可变与不可变&lt;/h1&gt;
&lt;p&gt;Rust 中使用 let 来绑定一个变量，默认是不可变的。也就是说默认就相当于 C++ 中 const 变量。但是实际上 C++ 中的 const 也只是只读而已。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;let x = 5;
x = 6;  // 非法
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果想要更改一个变量的值，在声明的时候，应该加上 mut（每次写 let mut 的时候，我心里都是读作“让TM的”）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;let mut = 5;
x = 6
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;copy 和 move 语义&lt;/h1&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sun, 17 Feb 2019 05:44:00 +0800</pubDate><guid isPermaLink="false">tag:None,2019-02-17:/posts/rust-de-sheng-ming-zhou-qi-guan-li-gai-shu.html</guid><category>Rust</category><category>编程语言</category><category>计算机</category></item><item><title>云时代的个人存储搭建</title><link>/posts/yun-shi-dai-de-ge-ren-cun-chu-da-jian.html</link><description>&lt;p&gt;昨天想用 iPad 上的 GoodReader 看一本书，但是从 iCloud 同步的时候出了些问题，进度始终为零。由于国内糟糕的网络环境，这种同步失败的问题时有发生。虽然可以直接通过 WiFi 把书从电脑上传过来，但是因为偶尔需要在另一个 iPad 上查看，为了同步进度，还是最终决定还是自己搭建一套云存储设施。&lt;/p&gt;
&lt;h1&gt;ftp 与 webdav&lt;/h1&gt;
&lt;p&gt;ftp 协议有诸多问题，现在用的已经很少了。WebDav 协议基于 HTTP，相比 FTP 有不少有点，可以参见文章1。另外不少开源的网盘客户端也支持 webdav。NextCloud 支持 webdav，后面会讲到&lt;/p&gt;
&lt;h1&gt;sftp 和 sshfs&lt;/h1&gt;
&lt;p&gt;sftp 则和 ftp 是完全独立的两个东西，虽然最终目的是一样的。好比海豚和鲨鱼都是在海里的生物，但是一个是哺乳动物，而一个是鱼类。sftp 基于 ssh 协议。&lt;/p&gt;
&lt;p&gt;sshfs 相比 sftp 则更近了一步，通过 sftp 把远程的文件系统直接映射到本地，从而无缝衔接。&lt;/p&gt;
&lt;h2&gt;搭建&lt;/h2&gt;
&lt;p&gt;sftp 直接基于 linux 的用户和文件权限系统。&lt;/p&gt;
&lt;h3&gt;添加相应的用户和分组，以用户名 sftp，分组名 ftpaccess 为例。&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% sudo groupadd ftpaccess&lt;/span&gt;
&lt;span class="c"&gt;% sudo useradd -m sftp -g ftpaccess -s /usr/sbin/nologin&lt;/span&gt;
&lt;span class="c"&gt;% sudo passwd sftp  # 更改密码&lt;/span&gt;
&lt;span class="c"&gt;% sudo mkdir /var/sftp&lt;/span&gt;
&lt;span class="c"&gt;% sudo chown root /var/sftp  # 这一步非常坑，切记不可省略，后面讲为什么&lt;/span&gt;
&lt;span class="c"&gt;% sudo mkdir -p /var/sftp/files&lt;/span&gt;
&lt;span class="c"&gt;% sudo chown sftp:ftpaccess /var/sftp/files&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;修改 /etc/ssh/sshd_config 文件&lt;/h3&gt;
&lt;p&gt;注释掉这一行 &lt;code&gt;Subsystem sftp /usr/lib/openssh/sftp-server&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后在文件的结尾添加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Subsystem sftp internal-sftp
Match group ftpaccess
ChrootDirectory /var/sftp  # 这里可以随便指定你想要的顶级目录
X11Forwarding no
AllowTcpForwarding no
ForceCommand internal-sftp
PasswordAuthentication yes
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ssh 的安全配置要求 ChrootDirectory 本身必须是 root 所有的，所以登录都的根目录我们是不可写的，但是可以在新建的目录中读写。&lt;/p&gt;
&lt;h3&gt;重启 ssh 服务&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% sudo systemctl restart ssh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以使用客户端链接啦~ 如果需要使用 publickey 登录的话，只需要像普通的用户一样，把文件传到 ~sftp 的对应目录就可以了。&lt;/p&gt;
&lt;h3&gt;使用 sshfs mount 到本地&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% brew install sshfs&lt;/span&gt;
&lt;span class="c"&gt;% brew cask install osxfuse&lt;/span&gt;
&lt;span class="c"&gt;% sshfs -o allow_other,defer_permissions -o volname=sftp_files sftp@your.example.com:/files $HOME/sftp_files&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="https://ws3.sinaimg.cn/large/006tKfTcly1g09iu47ttpj30i207cabm.jpg"&gt;&lt;/p&gt;
&lt;h1&gt;nextcloud&lt;/h1&gt;
&lt;p&gt;未完待续&lt;/p&gt;
&lt;h1&gt;参考资料&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;https://stackoverflow.com/questions/11216884/which-file-access-is-the-best-webdav-or-ftp&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/osxfuse/osxfuse/wiki/SSHFS"&gt;SSHFS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://askubuntu.com/questions/420652/how-to-setup-a-restricted-sftp-server-on-ubuntu"&gt;搭建 sftp 服务器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.minstrel.org.uk/papers/sftp/builtin/"&gt;sftp 的一个坑&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sat, 16 Feb 2019 22:27:00 +0800</pubDate><guid isPermaLink="false">tag:None,2019-02-16:/posts/yun-shi-dai-de-ge-ren-cun-chu-da-jian.html</guid><category>后端</category><category>计算机</category></item><item><title>kubernetes 初探——在 Master 节点部署 Pod</title><link>/posts/kubernetes-chu-tan-zai-master-jie-dian-bu-shu-pod.html</link><description>&lt;p&gt;虽然 K8S 本身不建议在 Master 节点中部署 Pod，但是实际上也是可以的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl taint nodes --all node-role.kubernetes.io/master-
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这行命令的意思是移除所有节点的 master taint，这样就可以在 master 节点部署 pod 啦~&lt;/p&gt;
&lt;h1&gt;原理解释——taint 和 toleration&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;https://www.ibm.com/support/knowledgecenter/en/SSCKRH_1.0.1/platform/install_pod_scheduling.html&lt;/li&gt;
&lt;li&gt;https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 12 Feb 2019 19:57:00 +0800</pubDate><guid isPermaLink="false">tag:None,2019-02-12:/posts/kubernetes-chu-tan-zai-master-jie-dian-bu-shu-pod.html</guid><category>架构</category><category>后端</category><category>计算机</category></item><item><title>故障排查记录</title><link>/posts/gu-zhang-pai-cha-ji-lu.html</link><description>&lt;p&gt;Case 1：&lt;/p&gt;
&lt;p&gt;CPU 和内存都被打满了，同时发现硬盘 IO 也很高。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ps -eo pid,ppid,cmd,%mem,mem,%cpu --sort=-%mem | head -n 50
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;发现 kswapd0 偶尔会占用很高的 CPU，而这个进程是在内存满的时候负责在内存和 swap 之间交换。也就是问题的根源是内存满了，而 kswapd0 开始在内存和 swap 之间反复读写文件，导致 CPU 和 IO 也涨了起来，这时候应该找到内存暴涨的根源，进而解决问题。&lt;/p&gt;
&lt;p&gt;[1] https://askubuntu.com/questions/259739/kswapd0-is-taking-a-lot-of-cpu&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Fri, 25 Jan 2019 18:03:00 +0800</pubDate><guid isPermaLink="false">tag:None,2019-01-25:/posts/gu-zhang-pai-cha-ji-lu.html</guid><category>架构</category><category>后端</category><category>计算机</category></item><item><title>GitHub 上的顶级项目都是做什么的？（一）</title><link>/posts/github-shang-de-ding-ji-xiang-mu-du-shi-zuo-shi-yao-de-yi.html</link><description>&lt;p&gt;前一阵看到同事在用一个名叫 AirFlow 的工具，而我竟然素未耳闻，一番搜索之后发现这个工具是 Apache 的顶级项目，而且在 GitHub 上有 1w+ 的 Star。震惊之余，感觉有必要把 GitHub 上常用工具捋一遍，以避免以后发生重复造轮子的情况。计划是把 GitHub 上 5k+ Star 的项目都知道是做什么用的，每周看 50 个，数据来源是这里：https://gitstar-ranking.com/repositories。&lt;/p&gt;
&lt;p&gt;下面是本周的记录：&lt;/p&gt;
&lt;h1&gt;教程资源类&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;freeCodeCamp/freeCodeCamp 292180&lt;/p&gt;
&lt;p&gt;免费代码训练营&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;EbookFoundation / free-programming-books 114236&lt;/p&gt;
&lt;p&gt;免费编程图书&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sindresorhus / awesome&lt;/p&gt;
&lt;p&gt;awesome 列表的列表。这个项目起源于某个人做了一个 awesome-php 的 php 优质资源列表，然后大家就做了 awesome-python，awesome-vue 等各种列表，这个项目又把各种 awesome 列表收集了起来。。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CyC2018 / CS-Notes&lt;/p&gt;
&lt;p&gt;国人编写的计算机基础教程，中文&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;jwasham / coding-interview-university&lt;/p&gt;
&lt;p&gt;面试考点总结&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;h5bp / Front-end-Developer-Interview-Questions&lt;/p&gt;
&lt;p&gt;前端工程师面试问题&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;vinta/awesome-python&lt;/p&gt;
&lt;p&gt;前面提到的 awesome 系列列表，不在赘述&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;airbnb / javascript&lt;/p&gt;
&lt;p&gt;Airbnb 的 js 编码规范，值得参考。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;github / gitignore&lt;/p&gt;
&lt;p&gt;GitHub 提供的各种项目的 gitignore 文件模板，省了自己写了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;getify / You-Dont-Know-JS&lt;/p&gt;
&lt;p&gt;前端（JS）的一些坑的总结&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;vuejs/awesome-vue&lt;/p&gt;
&lt;p&gt;awesome 系列，不再赘述&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;前端 UI 框架/库&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;twbs/bootstrap&lt;/p&gt;
&lt;p&gt;Twitter 推出的前端 UI 框架，有网格系统和各种组件，曾经常年在 GitHub 上排名第一，可以说是后端工程师画界面的利器。&lt;/p&gt;
&lt;p&gt;竞品：Semantic UI, pure-css&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FontAwesome/Font-Awesome&lt;/p&gt;
&lt;p&gt;字体和图标库，可以使用 SVG 和字体等等多种格式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ant-design/ant-design&lt;/p&gt;
&lt;p&gt;蚂蚁金服出的 react 组件库，前一阵大名鼎鼎的“圣诞彩蛋”就是这个库搞得。主要提供 React 的组件库，用于企业中后端的后台的建设。关于 React/Vue 和前端的组件化是一个很有意思的话题，可以查阅相关资料。&lt;/p&gt;
&lt;p&gt;和 Bootstrap 等的区别在于，Bootstrap 更偏向于 UI 方面，是 CSS 框架，而 antd 则是完整的包括 UI 和功能在内的 React 组件。可以理解为 Bootstrap 只做了“皮”，而 antd 是 “皮” + “骨”。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Semantic-Org/Sematic-UI&lt;/p&gt;
&lt;p&gt;和 Bootstrap 类似的一个组件库。Semantic UI 更强调使用语义化的 class 来定义样式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;google / material-design-icons&lt;/p&gt;
&lt;p&gt;Google 推出的 Material 风格图标库。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;daneden/animate.css&lt;/p&gt;
&lt;p&gt;CSS 动画效果库&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;大前端框架和库&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;vuejs/vue&lt;/p&gt;
&lt;p&gt;Vue 是国人推出的一个前端框架，可以通过写不同的 Vue 组件来组成一个完整的应用，支持服务端渲染（SSR）。和 React 一样，Vue 也使用了 Virtual-DOM 技术来提高性能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;facebook/react&lt;/p&gt;
&lt;p&gt;facebook 推出的一个前端框架，特点是每个组件的 HTML/JS/CSS 组合在一起，使用 Virtual-DOM 渲染。在 React 出现之前，前端框架普遍采用了后端广泛使用的 MVC 模式，强调 HTML/JS/CSS 三者要分离，而 React 则反其道而行之，强调从组件构建，可以 React 的出现是前端界的一场革命。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;facebook/react-native&lt;/p&gt;
&lt;p&gt;使用 React 的语法来构建 native app，注意这里并不是使用一个 iOS 或者 Android 的 WebView 中嵌套了一个 webapp，而是直接使用 JS 来操作原生组件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;angular/angular.js&lt;/p&gt;
&lt;p&gt;Google 推出的前端框架，没用过&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;reactjs/redux&lt;/p&gt;
&lt;p&gt;react.js 的一个组件，用来管理数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;meteor/meteor&lt;/p&gt;
&lt;p&gt;前几年火过一阵，号称要统一前后端，然而我从来没搞明白到底是干啥的，如今热度已经大减了。HN 上甚至直接有人问 &lt;a href="https://news.ycombinator.com/item?id=16782266"&gt;Is meteor.js dead?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;webpack/webpack&lt;/p&gt;
&lt;p&gt;用于打包前端资源&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;chartjs/Chart.js&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;electron&lt;/p&gt;
&lt;p&gt;可以使用前端的工具链来编写桌面应用，同时能够跨平台。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;jquery&lt;/p&gt;
&lt;p&gt;老牌的跨浏览器兼容库。随着浏览器的发展，现在使用 jquery 的越来越少了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;create-react-app&lt;/p&gt;
&lt;p&gt;用来构造 react app 的辅助工具。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;d3.js&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;后端工具&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;elasticsearch&lt;/p&gt;
&lt;p&gt;使用 Java 编写的一个搜索工具，要实现全文搜索的话，选择 ES 就对了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;moby&lt;/p&gt;
&lt;p&gt;Docker 的内核&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;库&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;ReactiveX/RxJava&lt;/p&gt;
&lt;p&gt;TODO 一种编程模式，现在还不是很了解。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;机器学习&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;TensorFlow&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;语言&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Microsoft/TypeScript&lt;/p&gt;
&lt;p&gt;微软推出的一个 JavaScript 的超集。我们知道 JavaScript 是一个动态弱类型的语言，这种特性在小项目上很方便，然而随着前端项目越来越大，强类型对于程序正确性的保证就显得越来越重要了。TypeScript 重点就在于增强了类型，甚至名字都叫 TypeScript。&lt;/p&gt;
&lt;p&gt;强类型的语言是近年来语言的发展趋势，新语言诸如 Rust、Go、Swift 都是强类型的语言。而一些老语言，比如 Python 也加入了 Type Hint 的功能来增强类型支持。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Apple/swift&lt;/p&gt;
&lt;p&gt;Apple 推出的新语言，用来代替 Obj-C。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;golang&lt;/p&gt;
&lt;p&gt;Google 推出的编程语言。特点是通过 Goroutine 支持高并发。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;nodejs&lt;/p&gt;
&lt;p&gt;可以在服务器上运行的 js。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;通用工具类&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;hakimel / reveal.js&lt;/p&gt;
&lt;p&gt;使用 js 来做 PPT 的一个框架或者说工具&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GoogleChrome/puppeteer&lt;/p&gt;
&lt;p&gt;Google 推出的操作 Chrome 浏览器的 node.js API。可以用在自动化测试和爬虫的领域。官方 API 的推出基本上意味着第三方工具已经失去意义了。比如说 Phantom.js 直接宣布停止维护了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;atom&lt;/p&gt;
&lt;p&gt;GitHub 推出的一个代码编辑器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;oh-my-zsh&lt;/p&gt;
&lt;p&gt;zsh 的增强组件集，可以让你的 shell 异常强大呢。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;vscode&lt;/p&gt;
&lt;p&gt;微软推出的代码编辑工具，目前占据了市场优势地位。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Web 框架&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;rails&lt;/p&gt;
&lt;p&gt;Ruby 的一个 MVC 模式的 web 框架，当年可谓大红大紫，现在似乎热度有所衰减了，可能是因为大家都不写 Web 应用了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;expressjs&lt;/p&gt;
&lt;p&gt;Node.js 的一个 Web 框架。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;socket.io&lt;/p&gt;
&lt;p&gt;实现 WebSocket 的一个库，使用 node.js 编写。WebSocket 是在浏览器和服务器之间实现全双工通信的一个协议。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;laravel&lt;/p&gt;
&lt;p&gt;一个比较现代的 PHP MVC web 框架，不过 PHP 这几年的热度衰减也很厉害，好多搞 PHP 的都直接转 Go 了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;内核&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;linux&lt;/p&gt;
&lt;p&gt;这个不用说了吧。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Fri, 25 Jan 2019 03:29:00 +0800</pubDate><guid isPermaLink="false">tag:None,2019-01-25:/posts/github-shang-de-ding-ji-xiang-mu-du-shi-zuo-shi-yao-de-yi.html</guid><category>库</category><category>计算机</category></item><item><title>kubernetes 初探——服务治理</title><link>/posts/kubernetes-chu-tan-fu-wu-zhi-li.html</link><description>&lt;p&gt;服务治理有两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一种是直接在服务中集成熔断降级等操作&lt;/li&gt;
&lt;li&gt;一种是使用 sidecar 模式，有公共组件来处理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;两种模式的区别如图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://ws1.sinaimg.cn/large/006tNc79ly1fzbu3a41c3j30gw09jabr.jpg"&gt;&lt;/p&gt;
&lt;h1&gt;参考资料&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://mp.weixin.qq.com/s/1zAxecTzeZToaWFymeY-sw"&gt;Service Mesh 的本质、价值和应用探索 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.kubernetes.org.cn/2350.html"&gt;Istio, K8S 的微服务支持&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.csdn.net/aa1215018028/article/details/81700796"&gt;微服务之熔断、降级、限流&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mp.weixin.qq.com/s?__biz=MzI1NzYzODk4OQ==&amp;amp;mid=2247484925&amp;amp;idx=1&amp;amp;sn=5c15ba98fb03a2a0d9c823136f34e162"&gt;微服务化之服务拆分与服务发现&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Fri, 18 Jan 2019 21:33:00 +0800</pubDate><guid isPermaLink="false">tag:None,2019-01-18:/posts/kubernetes-chu-tan-fu-wu-zhi-li.html</guid><category>架构</category><category>后端</category><category>计算机</category></item><item><title>使用 cProfile 和火焰图调优 Python 程序性能</title><link>/posts/shi-yong-cprofile-he-huo-yan-tu-diao-you-python-cheng-xu-xing-neng.html</link><description>&lt;p&gt;本来想坐下来写篇 2018 年的总结，仔细想想这一年发生的事情太多了，还是写篇技术文章吧。&lt;/p&gt;
&lt;p&gt;前几天调试程序，发现 QPS 总是卡在 20 左右上不去。开始以为是 IO 问题，就多开了些并发，然并卵，这才想到可能是 CPU 的问题。看了看监控，发现程序某一步的延迟在 400ms 左右，而且这一步是 CPU 密集的。当时开了 4 台双核的机器：(1s / 400ms) * 2 * 4 = 20 啊。看来需要优化下这一步的代码了，那么第一步就是找到可以优化的地方。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://ws2.sinaimg.cn/large/006tNbRwly1fyqb4f5jhij30yc0pwtej.jpg"&gt;&lt;/p&gt;
&lt;p&gt;测量程序的性能之前并没有实际做过，Google 了一番，感觉标准库的 cProfile 似乎值得一试。&lt;/p&gt;
&lt;p&gt;要测量的代码逻辑也很简单，使用 lxml 解析 HTML，然后提取一些字段出来，这些基本都是调用的 C 库了，解析的算法也不在 Python 中。看起来似乎没有什么能改进的地方，不管怎样，还是先跑一下吧。&lt;/p&gt;
&lt;p&gt;cProfile 有多种调用方法，可以直接从命令行调用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python -m cProfile -s tottime your_program.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中的 &lt;code&gt;-s&lt;/code&gt; 的意思是 sort。常用的 sort 类型有两个：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;tottime，指的是函数本身的运行时间，扣除了子函数的运行时间&lt;/li&gt;
&lt;li&gt;cumtime，指的是函数的累计运行时间，包含了子函数的运行时间&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;要获得对程序性能的全面理解，经常需要两个指标都看一下。&lt;/p&gt;
&lt;p&gt;不过在这里，我们并不能直接使用命令行方式调用，因为我的代码中还需要一些比较繁重的配置加载，如果把这部分时间算进去了，多少有些干扰，那么我们也可以直接在代码中调用 cProfile。&lt;/p&gt;
&lt;p&gt;使用 cProfile 的代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cProfile&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;pstats&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt;

&lt;span class="n"&gt;pr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cProfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Profile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;pr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;extractor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;crawl_doc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;composition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PageComposition&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rule&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;pr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;disable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;sortby&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;cumtime&amp;quot;&lt;/span&gt;  &lt;span class="c1"&gt;# 仅适用于 3.6, 3.7 把这里改成常量了&lt;/span&gt;
&lt;span class="n"&gt;ps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pstats&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Stats&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort_stats&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sortby&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_stats&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getvalue&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;把需要 profile 的代码放到 pr.enable 和 pr.disable 中间就好了。注意这里我们使用了 cumtime 排序，也就是累计运行时间。&lt;/p&gt;
&lt;p&gt;结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://ws2.sinaimg.cn/large/006tNbRwly1fyqc3j79mvj31o80lanbu.jpg"&gt;&lt;/p&gt;
&lt;p&gt;我们可以看到总的运行时间是 200ms，而其中红框内的部分就占了 100ms! 如果能够优化调的话，性能一下子就能提高一倍。红框内的代码是做什么的呢？我们知道解析一个 html 文档，第一步是建立 DOM 树，通常情况下，我们可能会从其中抽取一些链接。在网页中，链接不一定是绝对路径，也可能是 &lt;code&gt;/images/2018-12-31-xxx.jpg&lt;/code&gt; 这样的相对路径。lxml 库帮我们做了一个贴心的默认值，那就是在构造 DOM 树的时候，根据传入的 url 来吧页面中的所有 url 都重写成绝对路径。看起来这是个很贴心的功能，但是在这里却成了性能瓶颈。为什么很耗时呢？大概是因为需要遍历整个 DOM 树，重写所有的链接吧。这显然不是我们需要的，我们只需要把抽取之后的链接还原成绝对路径就好了，而不是事先把所有链接都重写一遍。所以在这里我们直接去掉这个功能就好了。&lt;/p&gt;
&lt;p&gt;修改代码之后，再次运行 profile 脚本，时长变成了 100ms：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://ws2.sinaimg.cn/large/006tNbRwly1fyqcamiop3j31ly08sjwy.jpg"&gt;&lt;/p&gt;
&lt;p&gt;这时候我们接着看，程序中下一个比较大头的时间占用：jsonfinder 和 json decode/encode。&lt;/p&gt;
&lt;p&gt;jsonfinder 是一个有意思的库，它自动从 HTML 中查找 json 字符串并尝试解析，但是有时候也不太准。经常为了找到特定的值，还是需要使用正则。那么对于这个可有可无的功能，性能有这么差，还是删掉好了。&lt;/p&gt;
&lt;p&gt;通过删代码，现在性能已经是原来的四倍了。&lt;/p&gt;
&lt;p&gt;这时候发现代码里面有正则还挺花费时间的，不过还好，暂时先不管了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://ws2.sinaimg.cn/large/006tNbRwly1fyqcja5bj5j31oi0kydva.jpg"&gt;&lt;/p&gt;
&lt;p&gt;刚刚都是只运行了一遍，测量结果难免有随机性，必定有失偏颇，实际上应该使用多个测试用例，成千上万次的跑，才能得到一个比较准确地结果。&lt;/p&gt;
&lt;p&gt;上面这个小步骤基本没有什么可以优化的了，下面我们把优化目标扩大一点，并把次数先定为100.&lt;/p&gt;
&lt;p&gt;下面这种图是按照 tottime 来排序的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://ws4.sinaimg.cn/large/006tNbRwly1fyqclx98l2j31lg0gu7ei.jpg"&gt;&lt;/p&gt;
&lt;p&gt;注意其中最耗时的步骤是 parseUnicodeDoc，也就是建树了，这是符合预期的，然而旁边的 ncalls 一栏却不太对劲了。我们明明只运行了 100 次，为什么这个函数调用了 300 次呢？显然代码中有重复建树的地方，也就是有隐藏的 bug。这种地方不经过 profile 很难浮现出来，因为程序本身的逻辑是对的，只是比较耗时而已。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://ws3.sinaimg.cn/large/006tNbRwly1fyqcrdtifcj31lw0j2woi.jpg"&gt;&lt;/p&gt;
&lt;p&gt;优化之后，终于变成了 100. 从 cProfile 的表格现在已经看不出什么结果来了，下一步我们开始使用火焰图，可视化往往能让我们更容易注视到性能瓶颈。（为什么不一开始就用火焰图呢？因为我以为很麻烦。。实际很简单）&lt;/p&gt;
&lt;p&gt;Python 中有一个第三方包(见参考文献)可以直接从 cProfile 的结果生成火焰图:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在原有的代码中加上一句: &lt;code&gt;pr.dump_stats("pipeline.prof")&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;调用该工具：&lt;code&gt;flameprof  pipeline.prof &amp;gt; pipeline.svg&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;然后打开 SVG 文件就可以了：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://ws1.sinaimg.cn/large/006tNbRwly1fyqcvj3ah8j30ys0jm42r.jpg"&gt;&lt;/p&gt;
&lt;p&gt;其中火焰的宽度代表了运行的时长，我们现在的优化目标就是这些耗时比较长的步骤。&lt;/p&gt;
&lt;p&gt;可以看大其中 mysql 的访问占了绝对的大头，按理说跑100次的话，不应该每次都花费时间在建立连接上啊，这里一定有问题。经过排查发现在某处链接是使用了 &lt;code&gt;close_old_connections&lt;/code&gt; 来保证不会抛出数据库断开的异常，这还是在头条带来的习惯。。close_old_connections 的功能是关闭已经失效的链接，看来我的理解还是有误的。先把这块删掉，最终解决应该是这块放到一个队列里，统一存入数据库。&lt;/p&gt;
&lt;p&gt;去掉之后：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://ws4.sinaimg.cn/large/006tNbRwly1fyqd1728dwj30xd0cvwgn.jpg"&gt;&lt;/p&gt;
&lt;p&gt;现在的大头又变成 lxml 的，又动了优化它的心思，lxml 是 libxml2 的一个 Python binding，查了下应该是最快的 html parser 了，这块真的没有什么优化空间。盯了一会儿，眼睛最终看到了一个小角落：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://ws1.sinaimg.cn/large/006tNbRwly1fyqd351qyvj309v04omxm.jpg"&gt;&lt;/p&gt;
&lt;p&gt;一个正则匹配居然占用了 8% 的运行时间，太不像话了。老早之前就听说 Python 的标准库正则性能不行，现在才发现原来是真的挺差劲的。Python 标准库的 re 模块采用的是 PCRE 的处理方式，而采用 NFA 的处理方式的正则要快很多，这块还需要再看一下。不过眼下倒是可以直接换一个库来解决。regex 模块是 re 模块的一个 drop-in replacement. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip install regex&lt;/code&gt; and &lt;code&gt;import regex as re&lt;/code&gt;，就搞定了&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://ws2.sinaimg.cn/large/006tNbRwly1fyqd8orglej30xi0dh410.jpg"&gt;&lt;/p&gt;
&lt;p&gt;可以看到正则那块直接消失了。提升还是很大的。时间不早了，当天的优化就到此结束了。上线之后，积压一下子就下去了：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://ws2.sinaimg.cn/large/006tNbRwly1fyqda1lv19j30sw0jmt9v.jpg"&gt;&lt;/p&gt;
&lt;h1&gt;后记&lt;/h1&gt;
&lt;p&gt;要想调试的时候方便，在写代码的时候就要注意，尽量使自己的代码 mock-friendly 一点。如果需要引入外部的数据库、服务、API等等各种资源，最好有一个开关或者选项能够不加载外部资源，或者至少能够很方便地 mock 这些外部服务，这样方便对每一个小单元进行 profile。&lt;/p&gt;
&lt;p&gt;总有人吐槽 Python 的性能低下，但是 Python 本来就不是做计算任务的呀，Python 是一门胶水语言，是用来写业务逻辑的，而不是用来写CPU密集的算法的。事实上复杂的解析一般都会用 C++ 这种硬核语言来写了，比如 numpy TensorFlow lxml。大多数程序员一天 90% 的工作除了和产品经理撕逼以外，也就是在写 CRUD，也就是调用这些包。所以瓶颈一般在 IO 上而不在 CPU 上，而解决 IO 的瓶颈手段就多了，Python 中至少有 多进程、多线程、AsyncIO、Gevent 等多种方法。不过方法多其实也是一个弊端，这几种方法可以说是基本互不兼容，对各种第三方库的支持也参差不齐。而 Go 在这方面就做地很好了，语言直接内置了 go 关键字，甚至都不支持多线程。所有的库都是支持一个统一的并发模型，对于使用者来说更简单。&lt;/p&gt;
&lt;p&gt;Zen of Python 中有一句：There should be one way -- preferably only one way -- to do a thing. 这点上 Python 本身没有做到，反倒是 Go 实践地非常好。&lt;/p&gt;
&lt;p&gt;扯远了，程序的瓶颈其实不外乎CPU、内存和 IO 三个方面，而 cProfile 和火焰图是判断 CPU 瓶颈的一把利器。&lt;/p&gt;
&lt;p&gt;后面还发现了一些性能瓶颈，也列在这里：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;yaml 的反序列化时间过长。解决方法是添加了一个 Expiring LRU Cache，不要每次都去加载，当然牺牲的是一点点内存，以及当规则变更时会有一些延迟，不过都是可以接受的。之前早就听人说 Thrift 的序列化性能相比 Protobuf 太低，现在想想序列化和反序列化还真是一个很常见的性能瓶颈啊。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存储使用了 360 的 pika，pika 可以理解为一个基于 rocksdb 的硬盘版 redis。最开始的时候没多想，随便找了台机器搭了起开，把上面的问题解决之后，pika 的延迟很快大了起来，机器的监控也显示 IO 基本被打满了。这时候才发现原来这台机器没有用 SSD，果断换了 SSD 问题基本解决了。如果再有问题可能就需要集群了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;性能这个问题其实是典型的木桶理论的场景，系统的整体性能是由最差的一块决定的。所以也是一个不断迭代的过程。&lt;/p&gt;
&lt;p&gt;祝大家新年快乐~&lt;/p&gt;
&lt;h1&gt;参考文献&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;https://toucantoco.com/en/tech-blog/tech/python-performance-optimization&lt;/li&gt;
&lt;li&gt;https://docs.python.org/3.6/library/profile.html&lt;/li&gt;
&lt;li&gt;https://medium.com/build-smarter/blazing-fast-python-40a2b25b0495&lt;/li&gt;
&lt;li&gt;https://swtch.com/~rsc/regexp/regexp1.html&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Fri, 28 Dec 2018 00:17:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-12-28:/posts/shi-yong-cprofile-he-huo-yan-tu-diao-you-python-cheng-xu-xing-neng.html</guid><category>后端</category><category>计算机</category></item><item><title>使用 Nomad 编排服务</title><link>/posts/shi-yong-nomad-bian-pai-fu-wu.html</link><description>&lt;p&gt;2019-01-02 更新：相对于 Kubernetes 来说，Nomad 还是太简陋了，弃坑&lt;/p&gt;
&lt;p&gt;Nomad 是 HashiCorp 出品的一个容器编排服务，相较于重量级的 Kubernetes 来说，Nomad 的特点在于&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;轻量级，只有一个二进制文件。K8s 的安装可能就要花上半天，在国内还有万恶的防火墙问题。&lt;/li&gt;
&lt;li&gt;概念也比较清晰，专注于任务的调度的编排，而不像 Kubernetes 一样引入了各种五花八门的概念。&lt;/li&gt;
&lt;li&gt;除了编排容器之外，Nomad 还可以直接编排普通应用，使用 cgroups 安全运行应用。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;安装&lt;/h1&gt;
&lt;p&gt;从官网下载二进制文件，复制到 /usr/local/bin 就好了，不再赘述&lt;/p&gt;
&lt;h1&gt;使用&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo nomad agent -dev

$ nomad node status
ID        DC   Name   Class   Drain  Eligibility  Status
171a583b  dc1  nomad  &amp;lt;none&amp;gt;  &lt;span class="nb"&gt;false&lt;/span&gt;  eligible     ready

$ nomad server members
Name          Address    Port  Status  Leader  Protocol  Build  Datacenter  Region
nomad.global  &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1  &lt;span class="m"&gt;4648&lt;/span&gt;  alive   &lt;span class="nb"&gt;true&lt;/span&gt;    &lt;span class="m"&gt;2&lt;/span&gt;         &lt;span class="m"&gt;0&lt;/span&gt;.7.0  dc1         global
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Job&lt;/h1&gt;
&lt;p&gt;Nomad 的调度单元称作 Job，Job 分为了三种类型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Batch，也就是一次批处理，程序运行之后就结束了。不过也可以通过 cron 字段指定任务定期运行&lt;/li&gt;
&lt;li&gt;Service，程序是一个常驻内存的服务，如果退出之后，Nomad 会按照给定的策略重启&lt;/li&gt;
&lt;li&gt;System，在每一个 Nomad 节点上都需要运行的服务&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Job 可以使用 HCL 文件来定义，HCL 文件在语义上和 JSON 是等价的，只不过是省去了一些多余的引号逗号之类的。也可以使用 JSON 文件来定义。&lt;/p&gt;
&lt;h2&gt;创建一个新的 Job&lt;/h2&gt;
&lt;p&gt;创建一个空白的 job 文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nomad job init
Example job file written to example.nomad
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;打开生成的 example.nomad 文件，我们看到生成了一大推配置，默认定义了一个 redis 服务器的 job。Job 中包含了 Group，Group 中包含了 Task，task 可以认为是我们最终需要运行服务的那个命令。比如这里就是定义了运行 redis:3.2 这个 docker 镜像。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;task &amp;quot;redis&amp;quot; {
  # The &amp;quot;driver&amp;quot; parameter specifies the task driver that should be used to
  # run the task.
  driver = &amp;quot;docker&amp;quot;

  # The &amp;quot;config&amp;quot; stanza specifies the driver configuration, which is passed
  # directly to the driver to start the task. The details of configurations
  # are specific to each driver, so please see specific driver
  # documentation for more information.
  config {
    image = &amp;quot;redis:3.2&amp;quot;
    port_map {
      db = 6379
    }
  }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们可以运行一下这个 job&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-&amp;gt; % nomad job run example.nomad
==&amp;gt; Monitoring evaluation &amp;quot;4f5559e0&amp;quot;
    Evaluation triggered by job &amp;quot;example&amp;quot;
    Allocation &amp;quot;98959767&amp;quot; created: node &amp;quot;ecf9f7cd&amp;quot;, group &amp;quot;cache&amp;quot;
    Evaluation within deployment: &amp;quot;e66e0957&amp;quot;
    Evaluation status changed: &amp;quot;pending&amp;quot; -&amp;gt; &amp;quot;complete&amp;quot;
==&amp;gt; Evaluation &amp;quot;4f5559e0&amp;quot; finished with status &amp;quot;complete&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后查看一下 job 的运行状态：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nomad status example
...
Allocations
ID        Node ID   Task Group  Version  Desired  Status   Created  Modified
8ba85cef  171a583b  cache       &lt;span class="m"&gt;0&lt;/span&gt;        run      running  5m ago   5m ago
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在最下面一行我们可以看到 Allocation 的状态。Allocation 可以理解为一个 Job 的一个实例化。&lt;/p&gt;
&lt;p&gt;我们可以再查看这个 Alloc 的状态：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nomad alloc status 8ba85cef
...
Recent Events:
Time                   Type        Description
&lt;span class="m"&gt;10&lt;/span&gt;/31/17 &lt;span class="m"&gt;22&lt;/span&gt;:58:49 UTC  Started     Task started by client
&lt;span class="m"&gt;10&lt;/span&gt;/31/17 &lt;span class="m"&gt;22&lt;/span&gt;:58:40 UTC  Driver      Downloading image redis:3.2
&lt;span class="m"&gt;10&lt;/span&gt;/31/17 &lt;span class="m"&gt;22&lt;/span&gt;:58:40 UTC  Task Setup  Building Task Directory
&lt;span class="m"&gt;10&lt;/span&gt;/31/17 &lt;span class="m"&gt;22&lt;/span&gt;:58:40 UTC  Received    Task received by client
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查看 Alloc 的日志&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nomad alloc logs 8ba85cef redis
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;修改 Job&lt;/h2&gt;
&lt;p&gt;比如说，我们可以把这个 Job 中 cache task group 需要运行的副本数量改为 3&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;count = 3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用 nomad job plan 来 dry run 一下。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nomad job plan example.nomad

+/- Job: &lt;span class="s2"&gt;&amp;quot;example&amp;quot;&lt;/span&gt;
+/- Task Group: &lt;span class="s2"&gt;&amp;quot;cache&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; create, &lt;span class="m"&gt;1&lt;/span&gt; in-place update&lt;span class="o"&gt;)&lt;/span&gt;
  +/- Count: &lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="s2"&gt;&amp;quot;3&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;forces create&lt;span class="o"&gt;)&lt;/span&gt;
      Task: &lt;span class="s2"&gt;&amp;quot;redis&amp;quot;&lt;/span&gt;
...
Job Modify Index: &lt;span class="m"&gt;7&lt;/span&gt;
To submit the job with version verification run:

nomad job run -check-index &lt;span class="m"&gt;7&lt;/span&gt; example.nomad
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意到其中返回了一个 check-index 这个是为了避免同时更改同一个 job 造成冲突。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nomad job run -check-index &lt;span class="m"&gt;7&lt;/span&gt; example.nomad
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;集群&lt;/h1&gt;
&lt;p&gt;在生产环境中，我们当然应该使用集群模式，而不是单机。nomad 可以直接利用 consul 来实现 bootstrap 集群。&lt;/p&gt;
&lt;p&gt;服务端配置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# /etc/nomad.d/server.hcl

data_dir = &amp;quot;/etc/nomad.d&amp;quot;

server {
  enabled          = true
  bootstrap_expect = 3
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;启动：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nomad agent -config&lt;span class="o"&gt;=&lt;/span&gt;/etc/nomad.d/server.hcl
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;客户端配置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# /etc/nomad.d/client.hcl

datacenter = &amp;quot;dc1&amp;quot;
data_dir   = &amp;quot;/etc/nomad.d&amp;quot;

client {
  enabled = true
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;启动：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nomad agent -config&lt;span class="o"&gt;=&lt;/span&gt;/etc/nomad.d/client.hcl
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Thu, 22 Nov 2018 22:57:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-11-22:/posts/shi-yong-nomad-bian-pai-fu-wu.html</guid><category>架构</category><category>后端</category><category>计算机</category></item><item><title>Python Redis 客户端连接池解析</title><link>/posts/python-redis-ke-hu-duan-lian-jie-chi-jie-xi.html</link><description>&lt;p&gt;Python Redis 的客户端使用了链接池机制，通过复用链接可以减低服务器的压力并在失败时重试。连接池其实是一种很通用的机制，在实现客户端是是一个经常需要（或许其实不需要）重复发明的轮子。&lt;/p&gt;
&lt;p&gt;Redis 客户端一共涉及到了三个类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Connection，表示一个到服务器的链接&lt;/li&gt;
&lt;li&gt;ConnectionPool，链接池&lt;/li&gt;
&lt;li&gt;Redis，使用连接池，并在失败时重试&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Connection 类解析&lt;/h1&gt;
&lt;p&gt;Connection 类主要负责建立和 Redis 服务器的一个 Socket 链接，并且沟通相关信息。下面的代码是 Connection 类和 socket 处理相关的代码。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__del__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;except&lt;/span&gt; &lt;span class="nx"&gt;Exception&lt;/span&gt;:
            &lt;span class="kt"&gt;pass&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;        连接 Redis 服务器&lt;/span&gt;
&lt;span class="s2"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;self._sock&lt;/span&gt;:
            &lt;span class="kt"&gt;return&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="nx"&gt;sock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;except&lt;/span&gt; &lt;span class="nx"&gt;socket.timeout&lt;/span&gt;:
            &lt;span class="kt"&gt;raise&lt;/span&gt; &lt;span class="nx"&gt;TimeoutError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Timeout connecting to server&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;except&lt;/span&gt; &lt;span class="nx"&gt;socket.error&lt;/span&gt;:
            &lt;span class="kt"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exc_info&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="nx"&gt;raise&lt;/span&gt; &lt;span class="nx"&gt;ConnectionError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_error_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sock&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on_connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;except&lt;/span&gt; &lt;span class="nx"&gt;RedisError&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;clean&lt;/span&gt; &lt;span class="nx"&gt;up&lt;/span&gt; &lt;span class="nx"&gt;after&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;on_connect&lt;/span&gt;
            &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="nx"&gt;raise&lt;/span&gt;

        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="nx"&gt;callbacks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;only&lt;/span&gt; &lt;span class="nx"&gt;internal&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;
        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;pubsub&lt;/span&gt; &lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;pattern&lt;/span&gt; &lt;span class="nx"&gt;resubscription&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;self._connect_callbacks&lt;/span&gt;:
            &lt;span class="kt"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;_connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;        建立链接的具体过程, 主要是 socket 操作&lt;/span&gt;
&lt;span class="s2"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;        关闭链接&lt;/span&gt;
&lt;span class="s2"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_parser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on_disconnect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sock&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;None&lt;/span&gt;:
            &lt;span class="kt"&gt;return&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shutdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SHUT_RDWR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;except&lt;/span&gt; &lt;span class="nx"&gt;socket.error&lt;/span&gt;:
            &lt;span class="kt"&gt;pass&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_sock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;None&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;send_packed_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;self._sock&lt;/span&gt;:
            &lt;span class="kt"&gt;self.connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="err"&gt;。。。&lt;/span&gt;
        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;发送命令到服务器&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看出，Connection 类主要是在 socket 上的一层薄薄封装。当然，这个 Connection 不是线程安全的。&lt;/p&gt;
&lt;h1&gt;ConnectionPool 类解析&lt;/h1&gt;
&lt;p&gt;redis.py 的代码中 ConnectionPool 分了两个类，基类 ConnectionPool，还有一个子类 BlockingConnectionPool。这里我感到有些不解，既然只有一个子类，不知道为什么还要分成两个类呢？可能是开始时候规划了好几个子类，最后只实现了一个吧……&lt;/p&gt;
&lt;p&gt;其中 BlockingConnection 类不只是线程安全的，还是进程安全的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ConnectionPool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;connection_class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;max_connections&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;connection_kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;max_connections&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;max_connections&lt;/span&gt; &lt;span class="nx"&gt;or&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max_connections&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;long&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="nx"&gt;or&lt;/span&gt; &lt;span class="nx"&gt;max_connections&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;0&lt;/span&gt;:
            &lt;span class="kt"&gt;raise&lt;/span&gt; &lt;span class="nx"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;max_connections&amp;quot; must be a positive integer&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connection_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;connection_class&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connection_kwargs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;connection_kwargs&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max_connections&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;max_connections&lt;/span&gt;

        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;调用&lt;/span&gt; &lt;span class="nx"&gt;reset&lt;/span&gt; &lt;span class="err"&gt;初始化一些属性&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getpid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;通过&lt;/span&gt; &lt;span class="nx"&gt;pid&lt;/span&gt; &lt;span class="err"&gt;检查实现进程安全&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_created_connections&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_available_connections&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;直接使用一个&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="err"&gt;来存放连接&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_in_use_connections&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_check_lock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;threading&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;_checkpid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;如果当前的&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt; &lt;span class="err"&gt;是&lt;/span&gt; &lt;span class="nx"&gt;fork&lt;/span&gt; &lt;span class="err"&gt;来的，直接关闭链接&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nx"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getpid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;self._check_lock&lt;/span&gt;:
                &lt;span class="kt"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getpid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;另一个线程已经检查了，直接返回&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt;
                &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;get_connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;command_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;从连接池中取一个连接，注意这里是弹出，也就是同一个链接只有一个用户使用&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_checkpid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="nx"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_available_connections&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;except&lt;/span&gt; &lt;span class="nx"&gt;IndexError&lt;/span&gt;:
            &lt;span class="kt"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;make_connection&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_in_use_connections&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;make_connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;创建一个新的连接&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_created_connections&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;self.max_connections&lt;/span&gt;:
            &lt;span class="kt"&gt;raise&lt;/span&gt; &lt;span class="nx"&gt;ConnectionError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Too many connections&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_created_connections&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connection_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connection_kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;release&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;使用完毕连接后需要显式调用&lt;/span&gt; &lt;span class="nx"&gt;release&lt;/span&gt; &lt;span class="err"&gt;把连接归还到连接池中。&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_checkpid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nx"&gt;self.pid&lt;/span&gt;:
            &lt;span class="kt"&gt;return&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_in_use_connections&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_available_connections&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;断开所有连接&lt;/span&gt;
        &lt;span class="nx"&gt;all_conns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_available_connections&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                          &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_in_use_connections&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;all_conns&lt;/span&gt;:
            &lt;span class="kt"&gt;connection.disconnect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;BlockingConnectionPool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ConnectionPool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;    这个连接池的实现是线程安全的&lt;/span&gt;
&lt;span class="s2"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;max_connections&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="nx"&gt;connection_class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;queue_class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;LifoQueue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;connection_kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queue_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;queue_class&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;使用一个队列来存放连接&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;timeout&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;增加了超时功能&lt;/span&gt;
        &lt;span class="kr"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BlockingConnectionPool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nx"&gt;connection_class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;connection_class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;max_connections&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;max_connections&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;connection_kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getpid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_check_lock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;threading&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;首先在队列中填满&lt;/span&gt; &lt;span class="nx"&gt;None&lt;/span&gt;&lt;span class="err"&gt;，后面会用到，这里很关键&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queue_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max_connections&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nx"&gt;True&lt;/span&gt;:
            &lt;span class="kt"&gt;try&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put_nowait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;except&lt;/span&gt; &lt;span class="nx"&gt;Full&lt;/span&gt;:
                &lt;span class="kt"&gt;break&lt;/span&gt;

        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;Keep&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;actual&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt; &lt;span class="nx"&gt;instances&lt;/span&gt; &lt;span class="nx"&gt;so&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="nx"&gt;we&lt;/span&gt; &lt;span class="nx"&gt;can&lt;/span&gt;
        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;disconnect&lt;/span&gt; &lt;span class="nx"&gt;them&lt;/span&gt; &lt;span class="nx"&gt;later&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_connections&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;make_connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;创建一个链接，貌似和上面的函数没有什么区别。。&lt;/span&gt;
        &lt;span class="nx"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connection_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connection_kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_connections&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;get_connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;command_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;        获取一个新的连接，最长等待 timeout 秒&lt;/span&gt;

&lt;span class="s2"&gt;        如果我们读取到的新连接是 None 的话，就会创建一个新的连接。因为我们使用的是 LIFO 队列，也就是栈，&lt;/span&gt;
&lt;span class="s2"&gt;        所以我们优先得到的是已经创建的链接，而不是最开始放进去的 None。也就是我们只有在需要的时候才会创建&lt;/span&gt;
&lt;span class="s2"&gt;        新的连接，也就是说连接数量是按需增长的。&lt;/span&gt;
&lt;span class="s2"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;确保没有更换进程&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_checkpid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;尝试获取一个连接，如果在&lt;/span&gt; &lt;span class="nx"&gt;timeout&lt;/span&gt; &lt;span class="err"&gt;时间内失败的话，抛出&lt;/span&gt; &lt;span class="nx"&gt;ConnectionError&lt;/span&gt;
        &lt;span class="nx"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;None&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="nx"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;block&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;except&lt;/span&gt; &lt;span class="nx"&gt;Empty&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;需要注意的是这个错误并不会被&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt; &lt;span class="err"&gt;捕获，需要用户自己处理&lt;/span&gt;
            &lt;span class="nx"&gt;raise&lt;/span&gt; &lt;span class="nx"&gt;ConnectionError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;No connection available.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;如果真的没有连接可用了，直接创建一个新的连接&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;None&lt;/span&gt;:
            &lt;span class="kt"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;make_connection&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;release&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;释放连接到连接池&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_checkpid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nx"&gt;self.pid&lt;/span&gt;:
            &lt;span class="kt"&gt;return&lt;/span&gt;

        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;Put&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt; &lt;span class="nx"&gt;back&lt;/span&gt; &lt;span class="nx"&gt;into&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put_nowait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;except&lt;/span&gt; &lt;span class="nx"&gt;Full&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;perhaps&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;pool&lt;/span&gt; &lt;span class="nx"&gt;has&lt;/span&gt; &lt;span class="nx"&gt;been&lt;/span&gt; &lt;span class="nx"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;after&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;fork&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;regardless&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;we&lt;/span&gt; &lt;span class="nx"&gt;don&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="nx"&gt;want&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt;
            &lt;span class="nx"&gt;pass&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;释放所有的连接&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;self._connections&lt;/span&gt;:
            &lt;span class="kt"&gt;connection.disconnect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;redis.Redis 类解析&lt;/h1&gt;
&lt;p&gt;Redis 类中使用了 ConnectionPool，如果没有显式创建的话，会自动创建一个线程池。所以每次你在使用 Redis 的时候，其实已经在使用线程池了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Redis&lt;/span&gt;:
    &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;...)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;connection_pool&lt;/span&gt;:
            &lt;span class="kt"&gt;connection_pool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ConnectionPool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connection_pool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;connection_pool&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;execute_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;执行每条命令都会调用该方法&lt;/span&gt;
        &lt;span class="nx"&gt;pool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connection_pool&lt;/span&gt;
        &lt;span class="nx"&gt;command_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;弹出一个连接&lt;/span&gt;
        &lt;span class="nx"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get_connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;command_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;尝试调用&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt;
            &lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;command_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;except&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ConnectionError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TimeoutError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;如果是连接问题，关闭有问题的连接，下面再次使用这个连接的时候会重新连接。&lt;/span&gt;
            &lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;retry_on_timeout&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TimeoutError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="nx"&gt;raise&lt;/span&gt;
            &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;再次尝试调用&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt;
            &lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;command_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;不管怎样都要把这个连接归还到连接池&lt;/span&gt;
            &lt;span class="nx"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;release&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 21 Nov 2018 22:47:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-11-21:/posts/python-redis-ke-hu-duan-lian-jie-chi-jie-xi.html</guid><category>后端</category><category>计算机</category></item><item><title>HAR 格式解析</title><link>/posts/har-ge-shi-jie-xi.html</link><description>&lt;p&gt;HAR(HTTP Archive) 文件是一种常见的用来保存 HTTP 请求和响应的格式。本质上，HAR 文件其实就是一个 JSON 文件。&lt;/p&gt;
&lt;p&gt;每一个 HAR Entry 都可以有以下记录存在：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;log&lt;/li&gt;
&lt;li&gt;creator&lt;/li&gt;
&lt;li&gt;browser&lt;/li&gt;
&lt;li&gt;pages&lt;ul&gt;
&lt;li&gt;pageTimings&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;entries&lt;ul&gt;
&lt;li&gt;request&lt;ul&gt;
&lt;li&gt;queryString&lt;/li&gt;
&lt;li&gt;postData&lt;/li&gt;
&lt;li&gt;params&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;response&lt;ul&gt;
&lt;li&gt;cookies&lt;/li&gt;
&lt;li&gt;headers&lt;/li&gt;
&lt;li&gt;content&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;cache&lt;/li&gt;
&lt;li&gt;timings&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;log&lt;/h1&gt;
&lt;p&gt;这个是一个 HAR 文件的根字段，其他字段都是该字段的子字段&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{
    &amp;quot;log&amp;quot;: {
        &amp;quot;version&amp;quot; : &amp;quot;1.2&amp;quot;,
        &amp;quot;creator&amp;quot; : {},
        &amp;quot;browser&amp;quot; : {},
        &amp;quot;pages&amp;quot;: [],
        &amp;quot;entries&amp;quot;: [],
        &amp;quot;comment&amp;quot;: &amp;quot;&amp;quot;
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;creator&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;creator&amp;quot;: {
    &amp;quot;name&amp;quot;: &amp;quot;Firebug&amp;quot;,
    &amp;quot;version&amp;quot;: &amp;quot;1.6&amp;quot;,
    &amp;quot;comment&amp;quot;: &amp;quot;&amp;quot;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;browser&lt;/h1&gt;
&lt;p&gt;同 creator 结构完全一样&lt;/p&gt;
&lt;h1&gt;pages&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;pages&amp;quot;: [
    {
        &amp;quot;startedDateTime&amp;quot;: &amp;quot;2009-04-16T12:07:25.123+01:00&amp;quot;,
        &amp;quot;id&amp;quot;: &amp;quot;page_0&amp;quot;,
        &amp;quot;title&amp;quot;: &amp;quot;Test Page&amp;quot;,
        &amp;quot;pageTimings&amp;quot;: {...},
        &amp;quot;comment&amp;quot;: &amp;quot;&amp;quot;
    }
]
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;pageTimings&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;pageTimings&amp;quot;: {
    &amp;quot;onContentLoad&amp;quot;: 1720,
    &amp;quot;onLoad&amp;quot;: 2500,
    &amp;quot;comment&amp;quot;: &amp;quot;&amp;quot;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;entries&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;entries&amp;quot;: [
    {
        &amp;quot;pageref&amp;quot;: &amp;quot;page_0&amp;quot;,
        &amp;quot;startedDateTime&amp;quot;: &amp;quot;2009-04-16T12:07:23.596Z&amp;quot;,
        &amp;quot;time&amp;quot;: 50,
        &amp;quot;request&amp;quot;: {...},
        &amp;quot;response&amp;quot;: {...},
        &amp;quot;cache&amp;quot;: {...},
        &amp;quot;timings&amp;quot;: {},
        &amp;quot;serverIPAddress&amp;quot;: &amp;quot;10.0.0.1&amp;quot;,
        &amp;quot;connection&amp;quot;: &amp;quot;52492&amp;quot;,
        &amp;quot;comment&amp;quot;: &amp;quot;&amp;quot;
    }
]
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;request&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;request&amp;quot;: {
    &amp;quot;method&amp;quot;: &amp;quot;GET&amp;quot;,
    &amp;quot;url&amp;quot;: &amp;quot;http://www.example.com/path/?param=value&amp;quot;,
    &amp;quot;httpVersion&amp;quot;: &amp;quot;HTTP/1.1&amp;quot;,
    &amp;quot;cookies&amp;quot;: [],
    &amp;quot;headers&amp;quot;: [],
    &amp;quot;queryString&amp;quot; : [],
    &amp;quot;postData&amp;quot; : {},
    &amp;quot;headersSize&amp;quot; : 150,
    &amp;quot;bodySize&amp;quot; : 0,
    &amp;quot;comment&amp;quot; : &amp;quot;&amp;quot;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;queryString&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;queryString&amp;quot;: [
    {
        &amp;quot;name&amp;quot;: &amp;quot;param1&amp;quot;,
        &amp;quot;value&amp;quot;: &amp;quot;value1&amp;quot;,
        &amp;quot;comment&amp;quot;: &amp;quot;&amp;quot;
    },
    {
        &amp;quot;name&amp;quot;: &amp;quot;param1&amp;quot;,
        &amp;quot;value&amp;quot;: &amp;quot;value1&amp;quot;,
        &amp;quot;comment&amp;quot;: &amp;quot;&amp;quot;
    }
]
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;postData&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;postData&amp;quot;: {
    &amp;quot;mimeType&amp;quot;: &amp;quot;multipart/form-data&amp;quot;,
    &amp;quot;params&amp;quot;: [],
    &amp;quot;text&amp;quot; : &amp;quot;plain posted data&amp;quot;,
    &amp;quot;comment&amp;quot;: &amp;quot;&amp;quot;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;params&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;params&amp;quot;: [
    {
        &amp;quot;name&amp;quot;: &amp;quot;paramName&amp;quot;,
        &amp;quot;value&amp;quot;: &amp;quot;paramValue&amp;quot;,
        &amp;quot;fileName&amp;quot;: &amp;quot;example.pdf&amp;quot;,
        &amp;quot;contentType&amp;quot;: &amp;quot;application/pdf&amp;quot;,
        &amp;quot;comment&amp;quot;: &amp;quot;&amp;quot;
    }
]
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;response&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;response&amp;quot;: {
    &amp;quot;status&amp;quot;: 200,
    &amp;quot;statusText&amp;quot;: &amp;quot;OK&amp;quot;,
    &amp;quot;httpVersion&amp;quot;: &amp;quot;HTTP/1.1&amp;quot;,
    &amp;quot;cookies&amp;quot;: [],
    &amp;quot;headers&amp;quot;: [],
    &amp;quot;content&amp;quot;: {},
    &amp;quot;redirectURL&amp;quot;: &amp;quot;&amp;quot;,
    &amp;quot;headersSize&amp;quot; : 160,
    &amp;quot;bodySize&amp;quot; : 850,
    &amp;quot;comment&amp;quot; : &amp;quot;&amp;quot;
 }
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;content&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;content&amp;quot;: {
    &amp;quot;size&amp;quot;: 33,
    &amp;quot;compression&amp;quot;: 0,
    &amp;quot;mimeType&amp;quot;: &amp;quot;text/html; charset=utf-8&amp;quot;,
    &amp;quot;text&amp;quot;: &amp;quot;\n&amp;quot;,
    &amp;quot;comment&amp;quot;: &amp;quot;&amp;quot;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;cookies&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;cookies&amp;quot;: [
    {
        &amp;quot;name&amp;quot;: &amp;quot;TestCookie&amp;quot;,
        &amp;quot;value&amp;quot;: &amp;quot;Cookie Value&amp;quot;,
        &amp;quot;path&amp;quot;: &amp;quot;/&amp;quot;,
        &amp;quot;domain&amp;quot;: &amp;quot;www.janodvarko.cz&amp;quot;,
        &amp;quot;expires&amp;quot;: &amp;quot;2009-07-24T19:20:30.123+02:00&amp;quot;,
        &amp;quot;httpOnly&amp;quot;: false,
        &amp;quot;secure&amp;quot;: false,
        &amp;quot;comment&amp;quot;: &amp;quot;&amp;quot;
    }
]
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;headers&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;headers&amp;quot;: [
    {
        &amp;quot;name&amp;quot;: &amp;quot;Accept-Encoding&amp;quot;,
        &amp;quot;value&amp;quot;: &amp;quot;gzip,deflate&amp;quot;,
        &amp;quot;comment&amp;quot;: &amp;quot;&amp;quot;
    },
    {
        &amp;quot;name&amp;quot;: &amp;quot;Accept-Language&amp;quot;,
        &amp;quot;value&amp;quot;: &amp;quot;en-us,en;q=0.5&amp;quot;,
        &amp;quot;comment&amp;quot;: &amp;quot;&amp;quot;
    }
]
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;cache&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;cache&amp;quot;: {
    &amp;quot;beforeRequest&amp;quot;: {},
    &amp;quot;afterRequest&amp;quot;: {},
    &amp;quot;comment&amp;quot;: &amp;quot;&amp;quot;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;beforeRequest&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;beforeRequest&amp;quot;: {
    &amp;quot;expires&amp;quot;: &amp;quot;2009-04-16T15:50:36&amp;quot;,
    &amp;quot;lastAccess&amp;quot;: &amp;quot;2009-16-02T15:50:34&amp;quot;,
    &amp;quot;eTag&amp;quot;: &amp;quot;&amp;quot;,
    &amp;quot;hitCount&amp;quot;: 0,
    &amp;quot;comment&amp;quot;: &amp;quot;&amp;quot;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;timings&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;timings&amp;quot;: {
    &amp;quot;blocked&amp;quot;: 0,
    &amp;quot;dns&amp;quot;: -1,
    &amp;quot;connect&amp;quot;: 15,
    &amp;quot;send&amp;quot;: 20,
    &amp;quot;wait&amp;quot;: 38,
    &amp;quot;receive&amp;quot;: 12,
    &amp;quot;ssl&amp;quot;: -1,
    &amp;quot;comment&amp;quot;: &amp;quot;&amp;quot;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;参考资料&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;http://www.softwareishard.com/blog/har-12-spec/#response&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Thu, 15 Nov 2018 20:29:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-11-15:/posts/har-ge-shi-jie-xi.html</guid><category>计算机</category><category>网络</category></item><item><title>Python 环境变量的一个坑</title><link>/posts/python-huan-jing-bian-liang-de-yi-ge-keng.html</link><description>&lt;p&gt;Python 中可以使用 os.environ 操作环境变量，前几天看到了其他几个函数 os.getenv 和 os.putenv。然而 os.putenv 是一个大坑，os.putenv 之后，在后面的 os.getenv 中并不能读出来。囧&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;https://mail.python.org/pipermail/python-list/2013-June/650294.html&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 13 Nov 2018 19:26:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-11-13:/posts/python-huan-jing-bian-liang-de-yi-ge-keng.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>网页更新与重抓策略</title><link>/posts/wang-ye-geng-xin-yu-zhong-zhua-ce-lue.html</link><description>&lt;p&gt;我们知道网页总是会更新的。在大规模的网络爬取中，一个很重要的问题是重抓策略，也就是在什么时候去重新访问同一个网页已获得更新。要获得这个问题的解，需要满足如下两个条件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;尽可能地少访问，以减少自身和对方站点的资源占用&lt;/li&gt;
&lt;li&gt;尽可能快的更新，以便获得最新结果&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这两个条件几乎是对立的，所以我们必须找到一种算法，并获得一个尽可能优的折衷。&lt;/p&gt;
&lt;p&gt;可以使用泊松过程：https://stackoverflow.com/questions/10331738/strategy-for-how-to-crawl-index-frequently-updated-webpages&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 13 Nov 2018 00:56:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-11-13:/posts/wang-ye-geng-xin-yu-zhong-zhua-ce-lue.html</guid><category>计算机</category><category>爬虫</category></item><item><title>如何调试 Python 的 Core Dump</title><link>/posts/ru-he-diao-shi-python-de-core-dump.html</link><description>&lt;p&gt;如果需要记录 Core Dump 的原因，首先需要使用 faulthandler 参数启动 Python&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python -X faulthandler main.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;出 core 之后，可以使用 gdb 调试&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gdb python core
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;https://stackoverflow.com/questions/2663841/python-tracing-a-segmentation-fault/2664232#2664232&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 12 Nov 2018 18:47:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-11-12:/posts/ru-he-diao-shi-python-de-core-dump.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>Linux 下分区并挂载磁盘</title><link>/posts/linux-xia-fen-qu-bing-gua-zai-ci-pan.html</link><description>&lt;h1&gt;分区&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;parted -s -a optimal /dev/sda mklabel gpt -- mkpart primary ext4 1 -1s
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;创建文件系统&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkfs.ext4 /dev/sda1
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;查看分区结果&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;parted -l
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;复制数据&lt;/h1&gt;
&lt;p&gt;首先挂载到临时分区&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mount /dev/sdb1 /mnt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;把之前的数据考进去&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# rsync -av /home/* /mnt/
OR
# cp -aR /home/* /mnt/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;校验数据&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;diff -r /home /mnt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;删除老数据&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rm -rf /home/*
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;umount /mnt
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;挂载&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mount /dev/sdb1 /home
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;写入到 fstab 中&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;blkid /dev/sdb1

/dev/sdb1: UUID=&amp;quot;e087e709-20f9-42a4-a4dc-d74544c490a6&amp;quot; TYPE=&amp;quot;ext4&amp;quot; PARTLABEL=&amp;quot;primary&amp;quot; PARTUUID=&amp;quot;52d77e5c-0b20-4a68-ada4-881851b2ca99&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在 /etc/fstab 中增加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;UUID=e087e709-20f9-42a4-a4dc-d74544c490a6   /home   ext4   defaults   0   2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;每一列的含义如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    UUID – specifies the block device, you can alternatively use the device file /dev/sdb1.
    /home – this is the mount point.
    etx4 – describes the filesystem type on the device/partition.
    defaults – mount options, (here this value means rw, suid, dev, exec, auto, nouser, and async).
    0 – used by dump tool, 0 meaning don’t dump if filesystem is not present.
    2 – used by fsck tool for discovering filesystem check order, this value means check this device after root filesystem.
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;调整分区大小&lt;/h1&gt;
&lt;p&gt;首先使用 parted 打开对应的磁盘&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tiger@iZ8vbe91kz7sqlvkjdu8p6Z:~$ sudo parted
GNU Parted 3.2
Using /dev/vda
Welcome to GNU Parted! Type &amp;#39;help&amp;#39; to view a list of commands.
(parted) select /dev/vdc
Using /dev/vdc
(parted) resizepart
Partition number? 1
Warning: Partition /dev/vdc1 is being used. Are you sure you want to continue?
Yes/No? yes
End?  [107GB]? 1100G
(parted) print
Model: Virtio Block Device (virtblk)
Disk /dev/vdc: 1100GB
Sector size (logical/physical): 512B/512B
Partition Table: msdos
Disk Flags:

Number  Start   End     Size    Type     File system  Flags
 1      1049kB  1100GB  1100GB  primary  ext4
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后使用 resize2fs 重新调整分区大小&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;resize2fs /dev/vdb1
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;参考&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;https://www.tecmint.com/move-home-directory-to-new-partition-disk-in-linux/&lt;/li&gt;
&lt;li&gt;https://www.tecmint.com/parted-command-to-create-resize-rescue-linux-disk-partitions/&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Thu, 01 Nov 2018 23:45:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-11-01:/posts/linux-xia-fen-qu-bing-gua-zai-ci-pan.html</guid><category>命令行</category><category>后端</category><category>计算机</category></item><item><title>Linux 中的 Process Group 和 Session</title><link>/posts/linux-zhong-de-process-group-he-session.html</link><description>&lt;p&gt;使用了这么多年的 Ubuntu, 自以为 Linux 下进程的概念已经很熟悉了, 然而发现进程组(Process Group)和会话(Session)两个概念日常并不会接触很多, 平时也没有注意, 导致今天遇到一个问题还想了半天才想明白.&lt;/p&gt;
&lt;p&gt;看了一些讲进程控制的书和文章, 感觉都比较老了, 不少都还在讲 double fork 的原理及意义, 而现实是 systemd 已经接管了几乎整个 Linux 世界, double fork 这种东西真的不应该存在了, 至少在新的程序中不应该再使用了, 所以有了这篇文章.&lt;/p&gt;
&lt;h1&gt;引子--问题&lt;/h1&gt;
&lt;p&gt;我们知道在命令行运行的前台命令, 可以随时通过 Ctrl-C 关闭掉. 原理很简单, 当我们按下 Ctrl-C 的时候, shell 进程会向前台进程发送一个 SIGINT 信号, 进程收到 SIGINT 的默认操作就是退出. 按照这个思路出发, 在 fork 之后, 如果按下 Ctrl-C 应该只有主进程会关闭, 而子进程应该继续运行, 实际上并不是这样的, 两个进程都收到了 SIGINT 信号.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;child&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;child process&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;KeyboardInterrupt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;child sigint&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;main process&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;KeyboardInterrupt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;main sigint&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当我们按下 Ctrl-C 的时候&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;main process
child process
main process
child process
^Cchild sigint
main sigint
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;也就是说上述说法并不是完全正确的. 实际上, SIGINT 并不只会发送给前台进程, 而是发送给&lt;strong&gt;前台进程组&lt;/strong&gt;中的每一个进程. 那么什么是进程组呢?&lt;/p&gt;
&lt;h1&gt;进程 -- Process&lt;/h1&gt;
&lt;p&gt;要说进程组, 我们首先来回忆一下进程的概念. 进程可以理解为 "进行中的程序", 在 Linux 上可以通过 fork 来创建新的进程, 然后可以使用 exec 来在子进程或者父进程中执行新的程序.&lt;/p&gt;
&lt;h2&gt;进程退出的情况&lt;/h2&gt;
&lt;p&gt;当一个进程的子进程退出的时候, 父进程有义务对子进程的状态进行回收(wait). 子进程退出的时候, 父进程会收到 SIGCHLD 信号. 如果子进程退出了, 而父进程又还没有进行回收, 那么在这段时间内, 这个子进程被称为僵尸进程(zombie process), 僵尸进程会持续占用一部分系统资源, 所以最好还是尽快回收. 如果父进程没有进行回收, 也退出了, pid=1 的 init 进程会接管僵尸状态的子进程并进行回收.&lt;/p&gt;
&lt;p&gt;当一个进程的父进程退出时, 这个进程被称为孤儿进程(orphaned process), 子进程会被 init 进程接管, 也就是说, 子进程的 ppid 会变成 1. 但是, 默认情况下, 子进程并不会收到任何信号. 不过, 可以使用 prctl 系统调用来设置在父进程退出的时候, 子进程收到什么信号.&lt;/p&gt;
&lt;h1&gt;进程组 -- Process Group&lt;/h1&gt;
&lt;p&gt;顾名思义就是一组进程. 进程组的 id (pgid) 就是进程组组长(group leader)的 pid. 当一个进程 fork 的时候, 子进程默认是和父进程在同一个进程组的. 从 shell 中启动一个进程的时候, shell 会给这个进程设置为一个新的进程组. 如果使用了 pipe, 那么 shell 会将这些进程放入同一个进程组, 比如 &lt;code&gt;cat hello | less&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;需要注意的是, 当进程组的 leader 退出的时候, 进程组的其他进程并不会受影响, 系统不会给孤儿进程发送任何信号. 一个进程组在最后一个进程退出时消失.&lt;/p&gt;
&lt;h2&gt;相关函数&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;getpgid(pid) - 获得指定 pid 对应的 pgid
setpgid(pid, pgid) - 设定指定进程的 pgid
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中可以用 0 来表示当前进程, 如果设置当前进程的 pgid 为自己的 pid, 也就是钦点自己为 group leader, 那么就相当于创建了一个新的进程组.&lt;/p&gt;
&lt;h2&gt;相关命令&lt;/h2&gt;
&lt;p&gt;kill 命令用来给 pid 发送信号, 一般命令形式是 &lt;code&gt;kill -SIG PID&lt;/code&gt;, 可以在PID参数前面加上 &lt;code&gt;-&lt;/code&gt; 表示一个 Process Group, 而不是 Process. 比如:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kill -TERM -6379  # 向 6379 进程组发送 TERM 信号
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;回到问题&lt;/h1&gt;
&lt;p&gt;那么我们现在可以再思考一下刚开始的问题, 为什么按 Ctrl-C 的时候, 父进程和子进程都会收到 SIGINT 信号呢? 答案之前说了:实际上, SIGINT 并不只会发送给前台进程, 而是发送给前台进程组中的每一个进程. 而父进程和子进程当前所在的组正是前台进程组.&lt;/p&gt;
&lt;p&gt;前台进程组是一个 session 中在前台运行的那一组进程, 那么什么又是 session 呢?&lt;/p&gt;
&lt;h1&gt;会话 -- session&lt;/h1&gt;
&lt;p&gt;session 是一个更大的概念, 一个 session 中可以包含多个 process group.&lt;/p&gt;
&lt;p&gt;他们的关系是这样的:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+--------------------------------------------------------------+
|                                                              |
|      pg1             pg2             pg3            pg4      |
|    +------+       +-------+        +-----+        +------+   |
|    | bash |       | sleep |        | cat |        | jobs |   |
|    +------+       +-------+        +-----+        +------+   |
| session leader                     | wc  |                   |
|                                    +-----+                   |
|                                                              |
+--------------------------------------------------------------+
                            session
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;和 process group 一样, 每个 session 也有一个 leader, session leader 就是 这个进程的 pid. session 的本意是用来作业控制, 每个用户登录的时候都会创建自己的 session. 一般来说在 shell 中, session leader 就是 shell 本身.&lt;/p&gt;
&lt;h2&gt;相关函数&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;getsid(pid) - 获得指定 pid 对应的 sid
setsid() - 创建新的session
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中需要注意的是, setsid 不能由 group leader 进程来调用, 因为这样会导致同一个 group 中的进程属于不同的 session, 所以 POSIX 标准直接禁止了这么做.&lt;/p&gt;
&lt;h2&gt;session 退出&lt;/h2&gt;
&lt;p&gt;当一个session leader 退出时, 其他进程不会受到任何影响, 但是因为 session leader 退出可能造成 orphaned process group, 因此在shell中, &lt;strong&gt;一般情况下会造成进程退出的情况&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Orphaned Process Group&lt;/h2&gt;
&lt;p&gt;当一个 group leader 退出的时候, 本身并不会对进程组造成任何影响, 也不会收到任何信号. 但是, 当一个进程组变成孤儿进程组(orphaned process group)的时候, 可能会收到一些信号.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;孤儿进程组&lt;/p&gt;
&lt;p&gt;A process group is called orphaned when the parent of every member is either in the process group or outside the session. In particular, the process group of the session leader is always orphaned.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果一个进程组中的所有进程的父进程都在组内或者都是其他 session 的进程(比如 init)的时候, 这个进程组被称为孤儿进程组. 显然, 每个进程的退出或者移出进程组都可能造成进程组变成孤儿进程组. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果这时候进程组中的某个进程的状态是 STOP, 那么内核会向该进程组的所有进程发送 SIGHUP, 并紧接着发送 SIGCONT 信号.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;值得注意的是, session leader 本身就是一个孤儿进程组了, 所以退出的时候不会给本组的进程发信号, 下面要用到.&lt;/p&gt;
&lt;p&gt;为什么内核要这么做呢?&lt;/p&gt;
&lt;p&gt;一般情况下, shell 进程是当前 session 的 leader, 当我们运行每个命令的时候都会创建一个新的 Process Group, 如果这时候某个孤儿进程组中有进程是 STOP 状态的, 那么可能就再也没有机会运行了, 所以系统首先发送 SIGHUP 信号退出, 如果有进程对 SIGINT 做了处理, 那么在收到 SIGCONT 信号之后又可以继续运行了.&lt;/p&gt;
&lt;p&gt;也就是说当我们退出 shell 的时候, 内核会向 session 中的&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;前台进程组&lt;/li&gt;
&lt;li&gt;孤儿进程组&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;发送 SIGHUP 信号, 从而退出他们. 那么问题来了, 后台进程组呢?&lt;/p&gt;
&lt;p&gt;答案是: shell 会向session的所有进程组发送 SIGHUP 信号, 所以运行中的后台进程组也会退出.&lt;/p&gt;
&lt;h2&gt;daemonize&lt;/h2&gt;
&lt;p&gt;在 Unix 的上古时期, 没有 Process Manager 这个概念, 所以每个守护进程(比如说 apache)都需要自己变成守护进程, 一般来说是通过 double fork 的形式:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;fork 第一次, 确保自己不是 group leader&lt;/li&gt;
&lt;li&gt;setsid, 创建新的 session&lt;/li&gt;
&lt;li&gt;fork 第二次, 确保自己不是 session leader, 避免获取 tty&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;实际上整个步骤需要 15 步之多, 可以查看 &lt;code&gt;man 7 daemon&lt;/code&gt; 命令.&lt;/p&gt;
&lt;p&gt;整个过程非常复杂, 在 GNU C lib 中提供了 daemon() 函数来实现这些步骤, 然而讽刺的是, 由于步骤实在太多了, 系统提供的 daemon 函数竟然忘了其中几步, 所以不推荐使用...&lt;/p&gt;
&lt;p&gt;在我看来, 由进程自我守护实际上完全背离的 Unix philosophy -- Write programs that do one thing and do it well, 每个进程应该只做一件事, 变成守护进程显然是让一个进程做了两件事, 而且是一个重复性的工作, 由一个统一的 init 进程来管理 daemon 才是真正符合 Unix 哲学的.&lt;/p&gt;
&lt;h1&gt;systemd&lt;/h1&gt;
&lt;p&gt;在现代的 Linux 上, 系统层面, 我们通过 systemd 来管理守护进程, 每个进程只需要实现最简单的单进程程序就好了, 然后通过编写 systemd 的 unit 文件来实现 daemonize. 用户层面, 我们可以使用 supervisord 或者 pm2 来管理进程, 他们和 systemd 的功能和理念都是类似的.&lt;/p&gt;
&lt;p&gt;但是, 如上文所述, 一个进程完全可以通过 setsid 和 fork 等操作而完全脱离创建进程的控制, 而且不少进程在创建的时候也是具有 root 权限的, 那么 systemd 是怎样确保进程不会偷偷跑掉的呢? &lt;/p&gt;
&lt;p&gt;答案是 cgroups, 且听下回分解...&lt;/p&gt;
&lt;h1&gt;参考资料&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;https://www.win.tue.nl/~aeb/linux/lk/lk-10.html&lt;/li&gt;
&lt;li&gt;https://notes.shichao.io/apue/ch9/#sessions&lt;/li&gt;
&lt;li&gt;http://blog.jorgenschaefer.de/2014/07/why-systemd.html&lt;/li&gt;
&lt;li&gt;https://unix.stackexchange.com/questions/149741/why-is-sigint-not-propagated-to-child-process-when-sent-to-its-parent-process&lt;/li&gt;
&lt;li&gt;https://segmentfault.com/a/1190000009152815&lt;/li&gt;
&lt;li&gt;https://stackoverflow.com/questions/24346126/where-do-zombie-processes-go-after-their-parent-dies&lt;/li&gt;
&lt;li&gt;https://stackoverflow.com/questions/881388/what-is-the-reason-for-performing-a-double-fork-when-creating-a-daemon&lt;/li&gt;
&lt;li&gt;https://unix.stackexchange.com/questions/404054/how-is-a-process-group-id-set&lt;/li&gt;
&lt;li&gt;https://stackoverflow.com/a/39109685/1061155&lt;/li&gt;
&lt;li&gt;https://stackoverflow.com/questions/32780706/does-linux-kill-background-processes-if-we-close-the-terminal-from-which-it-has&lt;/li&gt;
&lt;li&gt;https://superuser.com/questions/403200/what-is-a-stopped-process-in-linux&lt;/li&gt;
&lt;li&gt;http://www.informit.com/articles/article.aspx?p=397655&amp;amp;seqNum=6&lt;/li&gt;
&lt;li&gt;https://stackoverflow.com/questions/13069634/python-daemon-and-systemd-service&lt;/li&gt;
&lt;li&gt;https://unix.stackexchange.com/questions/447275/does-systemd-not-protect-processes-against-acquiring-a-controlling-terminal&lt;/li&gt;
&lt;li&gt;https://linuxaria.com/article/how-to-manage-processes-with-cgroup-on-systemd&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sat, 20 Oct 2018 07:22:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-10-20:/posts/linux-zhong-de-process-group-he-session.html</guid><category>并发编程</category><category>计算机</category></item><item><title>Python + Influxdb + Grafana 的监控系统</title><link>/posts/python-influxdb-grafana-de-jian-kong-xi-tong.html</link><description>&lt;h1&gt;influxdb&lt;/h1&gt;
&lt;p&gt;为什么我们要把监控数据存到 influxdb 呢? 存到 MySQL 或者 MongoDB 甚至 Elasticsearch 不好么?&lt;/p&gt;
&lt;p&gt;数据模型上, 监控数据是和时间相关的, 脱离点产生的时间, 那么数据将毫无意义, 传统数据库中并没又强调这一点.&lt;/p&gt;
&lt;p&gt;性能上, influxdb 是时间序列数据库, 这类数据库面临的问题是写入非常多, 而读取比较少. 而普通的数据库一般都是读比较多, 而写入较少, 并且要保证写入的正确性. &lt;/p&gt;
&lt;p&gt;监控打点显然是一个面向时间序列的过程, 并且写入非常多, 而一般只有在触发告警, 排查问题的时候可能读取才比较多. 所以从性能和功能考虑上来说, 传统数据库都是不适用的.&lt;/p&gt;
&lt;p&gt;influxdb 中常见的存储数据格式:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cpu_usage value=49 1502043216
cpu_usage value=50 1502193042
cpu_usage value=5 1502196258
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;influxdb 数据模型&lt;/h2&gt;
&lt;p&gt;我们以一个 measurement(测量) 作为一个表, tag-value, field-value 都是记录数据的键值对, 区别是 tag 是由索引的, 而 field 没有, timestamp 是时间戳. tag set 自然指的是一组 tag 的组合.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;measurement,tag=value,tag1=value1 field=value,field1=value1 timestamp
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;measurement + tag set&lt;/code&gt; 被称为一个序列(series). 每一个 series 都可以指定不同的 retention policy.&lt;/p&gt;
&lt;h2&gt;influxdb 查询&lt;/h2&gt;
&lt;p&gt;使用类似 SQL 的语言, 执行 &lt;code&gt;influx&lt;/code&gt; 进入shell&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; CREATE DATABASE mydb
&amp;gt; SHOW DATABASES
&amp;gt; USE mydb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;插入数据, 和 SQL 差别还是挺大的, 其中 cpu 是 measurement, 也就是 "表名", 没指定时间的话, influxdb 会自己加上.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;INSERT cpu,host=serverA,region=us_west value=0.64
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查询数据, 注意多出来的 timestamp 一栏&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; SELECT &amp;quot;host&amp;quot;, &amp;quot;region&amp;quot;, &amp;quot;value&amp;quot; FROM &amp;quot;cpu&amp;quot;
name: cpu
---------
time                                     host       region   value
2015-10-21T19:28:07.580664347Z  serverA   us_west    0.64
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;回收策略&lt;/h2&gt;
&lt;p&gt;默认情况下, influxdb 会永久保留数据, 一般来说这样是没有意义的, 我们可以设置短一点.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CREATE RETENTION POLICY &amp;lt;retention_policy_name&amp;gt; ON &amp;lt;database_name&amp;gt; DURATION &amp;lt;duration&amp;gt; REPLICATION &amp;lt;n&amp;gt; [DEFAULT]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中 replication 只能设置为 1, 因为开源版只有 1. 可以设置成 30d, 1w&lt;/p&gt;
&lt;h1&gt;Python 客户端的编写&lt;/h1&gt;
&lt;p&gt;看到这里有人可能要问了, 不是有 python-influxdb 这个库么, 好好地客户端你为什么要封装一层呢? 答案很简单: 性能.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;调用 &lt;code&gt;influxdb.write_points()&lt;/code&gt; 是一个涉及到网络的阻塞操作, 极有可能对于程序造成性能影响.&lt;/li&gt;
&lt;li&gt;如果我们在程序中散落着各种打点的代码, 那么就会造成没打一个点都去调用一些 IO, 不如放在一个队列里面可以每次多打几个, 减少 IO 次数, 这样对程序和 influxdb 的性能都有好处.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;UDP vs http&lt;/h2&gt;
&lt;p&gt;influxdb 支持使用 UDP 和 HTTP 两种协议访问. 显然对于打点这种操纵来说, 我们不关心响应结果, 哪怕一个点没打上, 没打上就没打上吧......所以采用 UDP 就好了. 根据测试 udp 的性能在 http 的几十倍.&lt;/p&gt;
&lt;p&gt;按照 influxdb 官网的建议, 我们需要调整 UDP buffer 的 size 到 25MB(26214400B) 为宜.&lt;/p&gt;
&lt;p&gt;查看系统的 udp buffer 大小:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sysctl net.core.rmem_max
$ sysctl net.core.rmem_default
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改 &lt;code&gt;/etc/sysctl.conf&lt;/code&gt; 文件: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;net.core.rmem_max=26214400
net.core.rmem_default=26214400
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但是这个设置只有到下次重启才能生效, 继续使用 sysctl 设置立即生效:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sysctl -w net.core.rmem_max&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;26214400&lt;/span&gt;
$ sysctl -w net.core.rmem_default&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;26214400&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;另外注意, UDP 有一个大坑, 只吃吃精度为 s 的打点, 所以在配置和客户端中都必须使用这个时间精度.&lt;/p&gt;
&lt;p&gt;P.S. 中文互联网上的好多教程都在使用 http 打点, 误人子弟, 毁人不倦啊......&lt;/p&gt;
&lt;p&gt;参考:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;https://docs.influxdata.com/influxdb/v1.6/supported_protocols/udp/&lt;/li&gt;
&lt;li&gt;https://github.com/MikaelGRA/InfluxDB.Client/issues/31&lt;/li&gt;
&lt;li&gt;https://blog.codeship.com/a-deep-dive-into-influxdb/&lt;/li&gt;
&lt;li&gt;http://docs.grafana.org/features/datasources/influxdb/&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 16 Oct 2018 02:18:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-10-16:/posts/python-influxdb-grafana-de-jian-kong-xi-tong.html</guid><category>架构</category><category>后端</category><category>计算机</category></item><item><title>使用 prctl 在父进程退出的时候安全退出子进程</title><link>/posts/shi-yong-prctl-zai-fu-jin-cheng-tui-chu-de-shi-hou-an-quan-tui-chu-zi-jin-cheng.html</link><description>&lt;p&gt;在 Linux 中, 当子进程退出的时候, 父进程可以收到信号, 但是当父进程退出的时候, 子进程并不会受到信号. 这样就造成了在父进程崩溃的时候, 子进程并不能同时退出, 而是一直会在后台运行, 比如下面的例子:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;loop_print&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;child alive, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;OSError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# parent&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;parent sleep for 2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;parent quit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;loop_print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当父进程退出的时候, 子进程一直在不断地 print, 而没有退出.&lt;/p&gt;
&lt;h1&gt;naive 的方法, 使用 multiprocessing 库&lt;/h1&gt;
&lt;p&gt;昨天我已经吐槽过标准库的 multiprocessing 有很多坑, 不出所望, 在这个问题上 multiprocessing 依然提供了半个解法, 只解决了一半问题......&lt;/p&gt;
&lt;p&gt;在使用 multiprocessing 库创建进程的时候, 可以设置 &lt;code&gt;Process.daemon = True&lt;/code&gt;, 这个属性又是模仿 threading 库的 API 来的.&lt;/p&gt;
&lt;p&gt;正常情况下, 当一个程序收到 SIGTERM 或者 SIGHUP 等信号的时候, multiprocessing 会调用每个子进程的 terminate 方法, 这样会给每个子进程发送 SIGTERM 信号, 子进程就可以优雅退出. 然而, 当异常发生的时候, 父进程挂了, 比如说收到了 SIGKILL 信号, 那么子进程就得不到收割, 也就变成了孤儿进程.&lt;/p&gt;
&lt;p&gt;所以说, multiprocessing 库只解决了半个问题, 真遇到问题的时候就会坑你一把.&lt;/p&gt;
&lt;h1&gt;正确解决方法&lt;/h1&gt;
&lt;p&gt;Linux 提供了 prctl 系统调用, 可以由子进程向内核注册父进程退出时候收到什么信号, 我们只要注册一个 SIGTERM 信号就好了.&lt;/p&gt;
&lt;p&gt;在 Python 中可以使用 python-prctl 这个包.&lt;/p&gt;
&lt;h2&gt;安装&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# apt install libcap-dev &amp;amp;&amp;amp; pip install python-prctl
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;使用&lt;/h2&gt;
&lt;p&gt;以上面的程序为例:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;loop_print&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;prctl&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;signal&lt;/span&gt;
    &lt;span class="n"&gt;prctl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_pdeathsig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGTERM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;child alive, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;OSError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# parent&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;parent sleep for 2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;parent quit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;loop_print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这次我们看到, 在父进程退出的同时, 子进程也推出了.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;parent sleep for 2
child alive, 1539676057.5094635
child alive, 1539676058.5105338
parent quit
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 15 Oct 2018 23:50:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-10-15:/posts/shi-yong-prctl-zai-fu-jin-cheng-tui-chu-de-shi-hou-an-quan-tui-chu-zi-jin-cheng.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>吐槽一下 Python 混乱的 threading 和 multiprocessing</title><link>/posts/tu-cao-yi-xia-python-hun-luan-de-threading-he-multiprocessing.html</link><description>&lt;p&gt;最近要写一个库往 influxdb 中打点, 因为要被很多程序使用, 而又要创建新的进程, 为了避免引起使用方的异常, 简单深入了解了下 Python 的并发控制, 这才发现标准库真是坑. 之前没过多考虑过, 只是凭感觉在 CPU 密集的时候使用 multiprocessing, 而默认使用 threading, 其实两个还是有很多不一样的, 除了都是并发执行以外还有很大的不同. Python 中试图用 threading 和 multiprocessing 实现类似的接口来统一两方面, 结果导致更混乱了. 本文探讨几个坑.&lt;/p&gt;
&lt;h1&gt;在多线程环境中 fork&lt;/h1&gt;
&lt;p&gt;首先不谈 Python, 我们思考一下, 在多线程环境下如果执行 fork 会怎样? 在新的进程中, 会不会所有线程都在运行? 答案是否定的, &lt;strong&gt;在 fork 之后, 只有执行 fork 的线程在运行&lt;/strong&gt;, 而其他线程都不会运行. 这是 POSIX 标准规定的:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A process shall be created with a single thread. If a multi-threaded process calls fork(), the new process shall contain a replica of the calling thread and its entire address space, possibly including the states of mutexes and other resources. Consequently, to avoid errors, the child process may only execute async-signal-safe operations until such time as one of the exec functions is called. Fork handlers may be established by means of the pthread_atfork() function in order to maintain application invariants across fork() calls.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但是这时候其他线程持有的锁并不会自动转化到当前线程, 所以可能造成死锁. 关于在多线程程序中执行 fork 会造成的问题, 有好多文章有详细的讨论:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;http://www.linuxprogrammingblog.com/threads-and-fork-think-twice-before-using-them&lt;/li&gt;
&lt;li&gt;https://stackoverflow.com/questions/1073954/fork-and-existing-threads/1074663#1074663&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;在 python 的 daemon thread 中 fork 又会怎样&lt;/h1&gt;
&lt;p&gt;在 Python 中可以把线程设置为 daemon 状态, 如果一个进程中只有 daemon thread, 这个进程就会自动退出. 那么问题来了, 如果我们 daemon thread 中执行 fork 会怎样呢?&lt;/p&gt;
&lt;p&gt;理论上来说, 既然 fork 之后只有一个线程, 而这个线程又是 daemon 线程, 那么显然这个进程应该直接退出的, 然而并不会这样, 这个进程会一直运行, 直到该线程退出. 这是因为 fork 之后, 唯一的线程自动成为了 main thread, 而 Python 中硬编码了 main thread 不是 daemon thread, 所以这个线程不会退出.&lt;/p&gt;
&lt;p&gt;参考: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;https://stackoverflow.com/questions/31055960/is-it-a-python-bug-that-the-main-thread-of-a-process-created-in-a-daemon-thread&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;在新创建的进程中创建线程又会怎样&lt;/h1&gt;
&lt;p&gt;在普通进程中, 进程在所有非daemon 的线程退出之后才会推出, 但是在新创建的进程中, 不论创建的线程是 daemon thread 还是不是 daemon thread 都会在主线程退出后退出. 这是 Python 的一个 &lt;a href="https://bugs.python.org/issue18966"&gt;bug&lt;/a&gt;, 这个 bug 最早在 2013-09-08 01:20 报告出来, 而直到 2017-08-16 18:54 的 Python 3.7 才修复...&lt;/p&gt;
&lt;p&gt;如何复现这个 bug&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Process&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sleep&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;proc&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;mythread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;mythread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Thread.daemon = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;mythread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;daemon&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;#mythread.join()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Tick: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;proc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Process.daemon = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;daemon&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;下面大概说下这个 bug 的原因:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;普通进程会调用 &lt;code&gt;sys.exit()&lt;/code&gt; 退出, 在这个函数中会调用 &lt;code&gt;thread.join()&lt;/code&gt; 也就是会等待其他线程运行结束&lt;/li&gt;
&lt;li&gt;在 Python 3.4 之前, 默认只会使用 fork 创建线程, 而对于 fork 创建的线程, 会使用 &lt;code&gt;os._exit()&lt;/code&gt; 退出, 也就是不会调用 &lt;code&gt;thread.join()&lt;/code&gt;. 所以也就不会等待其他线程退出&lt;/li&gt;
&lt;li&gt;在 Python 3.4 中引入了对 &lt;code&gt;spawn&lt;/code&gt; 系统调用的支持, 可以通过 &lt;code&gt;multiprocessing.set_start_method&lt;/code&gt; 来设定创建进程使用的系统调用. 而使用 &lt;code&gt;spawn&lt;/code&gt; 调用创建的进程会通过 &lt;code&gt;sys.exit()&lt;/code&gt; 退出, 也就避免了这个 bug 的影响. 而使用 &lt;code&gt;fork&lt;/code&gt; 创建的进程依然受到这个 bug 的影响.&lt;/li&gt;
&lt;li&gt;在 Python 3.7 中终于在添加了 &lt;code&gt;thread._shutdown&lt;/code&gt; 的调用, 也就是会 join 其他的 thread.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;fork vs spawn 造成的 OS 平台差异性&lt;/h1&gt;
&lt;p&gt;我们知道, 在 &lt;code&gt;*nix&lt;/code&gt; 系统中创建一个一个新的进程可以使用系统调用 &lt;code&gt;fork&lt;/code&gt;, 父进程的所有资源都会被复制到子进程中, 当然是 Copy On Write 的. 如果要执行一个新的程序, 必须在 &lt;code&gt;fork&lt;/code&gt; 之后调用 &lt;code&gt;exec*&lt;/code&gt; 家族的系统调用, 后来 Linux 中添加了 &lt;code&gt;spawn&lt;/code&gt; 系统调用, &lt;code&gt;spawn&lt;/code&gt; 和 &lt;code&gt;fork&lt;/code&gt; 的不同是, 他是从头创建了一个新的子程序, 而不是像 &lt;code&gt;fork&lt;/code&gt; 一样复制了一份父进程. &lt;/p&gt;
&lt;p&gt;而在 Windows 上, 从来没有类似 &lt;code&gt;fork&lt;/code&gt; 的系统调用, 只有类似 &lt;code&gt;spawn&lt;/code&gt; 的系统调用, 也就是从头创建一个新的程序.&lt;/p&gt;
&lt;p&gt;对于 Python 的影响. 在 &lt;code&gt;*nix&lt;/code&gt; 操作系统上, 当使用 multiprocessing 的时候, 默认调用的是 fork, 在新的进程中所有导入的包都已经在了, 所以不会再 import 一次. 而在 Windows 系统上, 使用 multiprocessing 创建新的进程时, 所有包都会被在新进程中重新 import 一遍, 如果 import 操作是对外部系统有副作用的, 就会造成不同. &lt;/p&gt;
&lt;p&gt;当然如上文所述, 在 Python 3.4 之后可以选择创建进程时使用的系统调用, 如果选择了 &lt;code&gt;spawn&lt;/code&gt;, 那么在各个平台上行为就是统一的了.&lt;/p&gt;
&lt;p&gt;参考:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为什么要区别 fork 和 exec: https://www.zhihu.com/question/66902460&lt;/li&gt;
&lt;li&gt;fork 和 spawn 造成的有趣影响: https://zhuanlan.zhihu.com/p/39542342&lt;/li&gt;
&lt;li&gt;https://stackoverflow.com/questions/38236211/why-multiprocessing-process-behave-differently-on-windows-and-linux-for-global-o&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;fork 和 asyncio&lt;/h1&gt;
&lt;p&gt;多进程和 Event Loop 也可能引起一些问题, &lt;a href="http://4fish.xyz/posts/asyncio-concurrency/"&gt;这篇文章&lt;/a&gt; 给了一个很好的例子:&lt;/p&gt;
&lt;p&gt;假设现在有一个场景，主进程运行着一个event loop，在某个时候会fork出一个子进程，子进程再去运行一个新建的event loop：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;async def coro(loop):
    pid = os.fork()
    if pid != 0:  # parent
        pass
    else:  # child
        cloop = asyncio.new_event_loop()
        cloop.run_forever()

loop = asyncio.get_event_loop()
asyncio.ensure_future(coro(loop), loop=loop)
loop.run_forever()
loop.close()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这段代码看起来没有什么问题, 在子进程中开了一个新的 Event Loop, 然而在 Python 3.5 和以下, 在真正运行时会报错:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;...
cloop.run_forever()
  File &amp;quot;/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/asyncio/base_events.py&amp;quot;, line 411, in run_forever
    &amp;#39;Cannot run the event loop while another loop is running&amp;#39;)
RuntimeError: Cannot run the event loop while another loop is running
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;原因就在于标准库的 Event Loop 没有考虑多进程环境, 只是使用一个 thread local 来表示当前的 loop, 在多线程条件下, 这样当然是可以的, 但是在 fork 之后, 数据结构全部都得到了复制, 因此子进程就会检查到已经有 event loop 在运行了.&lt;/p&gt;
&lt;p&gt;在 Python 3.6 中, 这个问题得到了简单粗暴的修复, 在每个 loop 上都标记一个 pid, 检查的时候再加上 pid 验证是不是当前进程就好了.&lt;/p&gt;
&lt;p&gt;总而言之, 尽量不要同时使用多进程和多线程, 如果非要用的话, 首先尽早创建好需要的进程, 然后在进程中再开始创建线程或者开启 Event Loop.&lt;/p&gt;
&lt;p&gt;还有一篇文章没看, 用空了再看下吧, 是讲 multiprocessing.Pool 的坑:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;https://codewithoutrules.com/2018/09/04/python-multiprocessing/&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 15 Oct 2018 03:21:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-10-15:/posts/tu-cao-yi-xia-python-hun-luan-de-threading-he-multiprocessing.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>Python 高性能请求库 aiohttp 的基本用法</title><link>/posts/python-gao-xing-neng-qing-qiu-ku-aiohttp-de-ji-ben-yong-fa.html</link><description>&lt;p&gt;aiohttp 是 Python 异步编程最常用的一个 web 请求库了, 依托于 asyncio, 性能非常吓人. 下面列举几个常见的用法:&lt;/p&gt;
&lt;h1&gt;最基础: 并发下载网页&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;aiohttp&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;

&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;urls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;http://python.org&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;https://google.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;http://yifei.me&amp;#39;&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;tasks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;aiohttp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ClientSession&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;htmls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gather&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;htmls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sat, 13 Oct 2018 17:05:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-10-13:/posts/python-gao-xing-neng-qing-qiu-ku-aiohttp-de-ji-ben-yong-fa.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>kubernetes 初探——使用 helm 部署服务</title><link>/posts/kubernetes-chu-tan-shi-yong-helm-bu-shu-fu-wu.html</link><description>&lt;p&gt;前几篇写了一写 k8s 部署方面的东西, 后来发现阿里云的 k8s 集群还很好用...何苦自己研究几天部署呢...?&lt;/p&gt;
&lt;p&gt;------分隔线------&lt;/p&gt;
&lt;p&gt;在 k8s 上部署一个应用还是有些复杂的, 自己的应用当然需要自己一步一步部署, 但是对于一些通用的应用, 比如说 mysql/grafana 这种就没必要自己手工一步一步部署了. 这时候就有了 helm, 通俗的来说他就是 kubernetes 上的 AppStore, 常见的应用都已经在了, 而且你也可以按照他的格式打包自己的应用部署.&lt;/p&gt;
&lt;h1&gt;安装&lt;/h1&gt;
&lt;p&gt;在 helm 的 release 页面下载, 然后拷贝到本地的 /usr/local/bin/ 目录就好了. helm 运行的时候会使用 ~/.kube/config 文件, 所以本地 kubectl 可以使用就好了.&lt;/p&gt;
&lt;p&gt;helm 分为两部分, helm 是本地命令, tiller 是服务端, 作为一个 pod 运行在, 两者的版本需要保持一致. 理论上来说, 安装好 helm 之后, 只需要执行 helm init 就可以自动在 k8s 集群中安装 tiller 了, 但是由于一些众所周知的原因, 在中国大陆地区并不能安装成功, 需要使用阿里云或者中科大的镜像:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;使用&lt;/h1&gt;
&lt;h2&gt;概念&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Chart, 大概相当于 package 的意思&lt;/li&gt;
&lt;li&gt;Repository, Helm 的中心仓库&lt;/li&gt;
&lt;li&gt;Release, 每次运行一个 Chart 都会生成一个 Release, 每个 release 之间是独立的. Chart/Release 的关系就好比 Docker 的 Image/Container 一样.&lt;/li&gt;
&lt;li&gt;Revision, 每次更新 Release 都会产生一个新的版本, 可以回滚&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;基础命令&lt;/h2&gt;
&lt;p&gt;helm search 查找相关的软件包(chart), 现在 stable 仓库中大概有 200 多个包可以安装.&lt;/p&gt;
&lt;p&gt;helm install --name NAME PACKAGE 会安装对应的 chart. 如果不指定 name, 会自动生成一个.&lt;/p&gt;
&lt;p&gt;helm status NAME 可以查看对应的包的信息, 一般包括了如何连接使用这个包等信息, 可以当做帮助来用.&lt;/p&gt;
&lt;h2&gt;在安装包之前更改配置&lt;/h2&gt;
&lt;p&gt;每个 helm chart 都定义了一些默认的配置, 可以在安装之前查看并修改这些值.&lt;/p&gt;
&lt;p&gt;helm inspect values stable/mysql 查看 mysql 的默认值. 或者去 GitHub 上看这个仓库的 readme.&lt;/p&gt;
&lt;p&gt;把需要覆盖的变量写到 OVERRIDE.yml 文件中, helm install -f OVERRIDE.yml stable/mysql 就可以使用自己的配置了&lt;/p&gt;
&lt;h2&gt;更新 release&lt;/h2&gt;
&lt;p&gt;如果需要更新一个 release, 可以使用 helm upgrade -f OVERRIDE.yml RELEASE_NAME 命令更新相关的配置. 这时就会创建一个新的版本.&lt;/p&gt;
&lt;p&gt;使用 helm list 可以查看当前部署的 release, 这时候我们可以看到部署的版本变成了 2 (最初是1).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-&amp;gt; % helm ls
NAME    REVISION        UPDATED                         STATUS          CHART           NAMESPACE
mysql   1               Sat Oct  6 15:44:25 2018        DEPLOYED        mysql-0.3.0     default
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果当前的更新有误, 可以回退到之前的版本, 语法是 helm rollback [RELEASE] [REVISION]&lt;/p&gt;
&lt;h2&gt;管理 repo&lt;/h2&gt;
&lt;p&gt;helm repo list 列出当前添加的 repo&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ helm repo list
NAME            URL
stable          https://kubernetes-charts.storage.googleapis.com
&lt;span class="nb"&gt;local&lt;/span&gt;           http://localhost:8879/charts
mumoshu         https://mumoshu.github.io/charts
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;添加新的 repo&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ helm repo add dev https://example.com/dev-charts
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;参考文献&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;https://docs.helm.sh/&lt;/li&gt;
&lt;li&gt;https://ezmo.me/2017/09/24/helm-quick-toturial/&lt;/li&gt;
&lt;li&gt;https://help.aliyun.com/document_detail/58587.html&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sat, 06 Oct 2018 02:52:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-10-06:/posts/kubernetes-chu-tan-shi-yong-helm-bu-shu-fu-wu.html</guid><category>架构</category><category>后端</category><category>计算机</category></item><item><title>kubernetes 初探——部署有状态服务</title><link>/posts/kubernetes-chu-tan-bu-shu-you-zhuang-tai-fu-wu.html</link><description>&lt;p&gt;为了部署我们自己的应用, 首先需要把基础设施部署上去, 其中数据库就占了大头. 有人说数据库等应用不是和容器化部署, 但是也有人认为所有的应用都适合容器化部署. 在这里我们不讨论这些观点，仅以部署 MySQL 为例说明一下如何在 K8S 上部署有状态服务。&lt;/p&gt;
&lt;h1&gt;相关概念&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;PersistentVolume(PV) 是集群之中的一块网络存储。跟 Node 一样，也是集群的资源。PV 跟 Volume 类似，不过会有独立于 Pod 的生命周期。这一 API 对象包含了存储的实现细节，例如 NFS、iSCSI 或者其他的云提供商的存储系统。&lt;/li&gt;
&lt;li&gt;PersistentVolumeClaim (PVC) 是用户的一个请求。他跟 Pod 类似。Pod 消费 Node 的资源，PVC 消费 PV 的资源。Pod 能够申请特定的资源（CPU 和 内存）；Claim 能够请求特定的尺寸和访问模式（例如可以加载一个读写，以及多个只读实例）&lt;/li&gt;
&lt;li&gt;Stateful Set. Deployment 是无状态的服务，而 StatefulSets 旨在与有状态的应用及分布式系统一起使用。&lt;/li&gt;
&lt;li&gt;ConfigMap 用来保存非密码的配置. configmap 可以以配置文件或者环境变量等方式挂在到 pod 中&lt;/li&gt;
&lt;li&gt;Secret 用来保存密码等私密数据&lt;/li&gt;
&lt;li&gt;Init Container 用于初始化的容器. 有点类似于 docker build 的过程&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;动态 PV vs 静态 PV&lt;/h1&gt;
&lt;h1&gt;使用 Deployment PVC 还是 Stateful Set&lt;/h1&gt;
&lt;p&gt;可以看出我们即可以使用普通的 Deployment + PVC 来部署 MySQL, 也可以使用 Stateful Set 来部署, 那么哪种方式更好呢?&lt;/p&gt;
&lt;p&gt;个人理解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于需要使用挂载一定资源的，使用 PVC 就好了，甚至只需要只读挂载就好。&lt;/li&gt;
&lt;li&gt;对于强状态依赖的服务，比如数据库，肯定要使用 PVC&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Stack Overflow 上的一个问题[2]也很值得参考. &lt;/p&gt;
&lt;h1&gt;MySQL 主从集群&lt;/h1&gt;
&lt;p&gt;本文中我们要部署一个一主多从的 MySQL 集群. 关于一主多从的优点不是本文的重点, 这里就不多说了, 可以参考下面:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;扩容解决方案：在多个slave之间扩展负载以提高性能。在这种模式下，所有的写入和更新操作都必须在主服务器上进行。然而，读取操作通过slave镜像。该模型可以提高写入操作的性能，同时，也能够通过增加slave的节点数量，从而显著地提升读取速度。&lt;/li&gt;
&lt;li&gt;数据安全：数据从master被复制到slave，并且slave可以暂停复制过程。因此，可以在不损坏master的情况下，在slave上运行备份服务。&lt;/li&gt;
&lt;li&gt;分析：现场数据可以在master上创建，而对信息的分析可以在slave进行，而不影响master的性能。&lt;/li&gt;
&lt;li&gt;远程数据分发：可以使用复制为远程站点创建本地数据的副本，而不必一直通过访问master。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://blog.csdn.net/sweatOtt/article/details/81092484"&gt;使用 PVC 和 Deployment 部署单实例 MySQL 集群&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;https://stackoverflow.com/questions/41732819/why-statefulsets-cant-a-stateless-pod-use-persistent-volumes&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kubernetes.io/docs/tasks/run-application/run-single-instance-stateful-application/"&gt;使用普通 Deployment 部署单节点 mysql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;https://kubernetes.io/cn/docs/tutorials/stateful-application/basic-stateful-set/&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cnblogs.com/zhenyuyaodidiao/p/6594410.html"&gt;如何使用 ConfigMap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kubernetes.io/cn/docs/concepts/configuration/secret/"&gt;Secret 文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;https://stackoverflow.com/questions/41583672/kubernetes-deployments-vs-statefulsets&lt;/li&gt;
&lt;li&gt;&lt;a href="https://yq.aliyun.com/articles/640212"&gt;阿里云挂载 OSS Volume&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;https://jimmysong.io/posts/kubernetes-persistent-volume/&lt;/li&gt;
&lt;li&gt;https://kubernetes.io/docs/concepts/storage/volumes/&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Fri, 05 Oct 2018 08:02:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-10-05:/posts/kubernetes-chu-tan-bu-shu-you-zhuang-tai-fu-wu.html</guid><category>架构</category><category>后端</category><category>计算机</category></item><item><title>kubernetes 初探——部署无状态应用</title><link>/posts/kubernetes-chu-tan-bu-shu-wu-zhuang-tai-ying-yong.html</link><description>&lt;p&gt;kubernetes 架构图&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://ws2.sinaimg.cn/large/006tNbRwly1fvxa7izqb8j30mb0gcmzk.jpg"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Master. 用于控制整个集群部署的机器, 为了高可用, 可以使用多台，一般至少三台为宜。&lt;/li&gt;
&lt;li&gt;Node. 工作节点, 用于部署服务. 一台机器可以既是 Master 也是 Worker，当然最好 Master 不要做 Worker。&lt;/li&gt;
&lt;li&gt;Pod. k8s 部署的最小单元, 一个 Pod 中可能包含多个 container. Pod 随时可能挂掉，也可能被替换。&lt;/li&gt;
&lt;li&gt;Label. Pod 的标签, 可以通过这些标签（组合）来选择对应的 Pod。&lt;/li&gt;
&lt;li&gt;Replica Set. 作为一个高可用的系统, 每个服务一般来说可能有多个 Pod. Replication Set 用来创建并保证有足够的 Pod 副本。RS 的名字总是 &lt;Deployment的名字&gt;-&lt;pod template的hash值&gt; 格式的。&lt;/li&gt;
&lt;li&gt;Deployment. 用户一般来说不会直接创建 Pod, 而是创建一个 Deployment 来部署服务. (在老版本中是创建 RC)&lt;/li&gt;
&lt;li&gt;Namespace. 命名空间, 默认情况下会有 kube-system 和 default 两个命名空间, kube-system 存放的是 k8s 系统的 pod 等资源, 而用户部署的资源会在 default 命名空间中.&lt;/li&gt;
&lt;li&gt;PersistendVolume. 如果把 Node 理解为抽象的 CPU 和内存资源，那么 PV 就可以理解为抽象的硬盘资源。我们通过 Pod 来使用 Node，因此我们也不直接使用 PV，而是通过 PersistentVolumeClaim 来使用 PV。&lt;/li&gt;
&lt;li&gt;PersistentVolumeClaim. 存储声明，用来声明需要使用的存储资源。&lt;/li&gt;
&lt;li&gt;Stateful Set. Deployment 对应的部署语义上没有状态的，而StatefulSet会充分运用 PV 和 PVC 实现 Pod 重启之间的状态保持。典型应用场景是数据库。&lt;/li&gt;
&lt;li&gt;Label 和 Selector. K8S 中的资源全部都通过 Label 来标识的选择。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;deployment&lt;/h1&gt;
&lt;p&gt;deployment 是使用 k8s 部署服务直接操作的概念。其他的概念往往都是&lt;strong&gt;通过 deployment 来间接使用&lt;/strong&gt;的，因此理解 deployment 至关重要。&lt;/p&gt;
&lt;p&gt;一个典型的 deployment 配置文件如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;apiVersion&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;v1&lt;/span&gt;
&lt;span class="n"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Deployment&lt;/span&gt;
&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;
&lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;selector&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;matchLabels&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;
  &lt;span class="n"&gt;replicas&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
  &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;
    &lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;containers&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;
        &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;nginx&lt;/span&gt;
        &lt;span class="n"&gt;ports&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;containerPort&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;deployment 的配置可以发生改变，如果只是 replica 的数目发生了改变，那么这只是一个简单的扩容或者缩容操作，k8s只会简单的打开或者杀死新的 Pod。如果镜像、命令等参数发生了改变，那么 K8S 会把这次操作视为升级，也就是开始一个 RollOut 操作，创建新的 ReplicaSet。在这个过程中，如果 deployment 中的 spec 指定了保留历史 revision 的次数大于零，那么原有的 ReplicaSet 不会被删除，只是会被 Scale 到 0 而已，方便回滚。&lt;/p&gt;
&lt;p&gt;文档：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: a Deployment’s rollout is triggered if and only if the Deployment’s pod template (i.e. .spec.template) is changed, e.g. updating labels or container images of the template. Other updates, such as scaling the Deployment, will not trigger a rollout.&lt;/p&gt;
&lt;p&gt;https://stackoverflow.com/questions/42561791/right-way-to-update-deployments-on-kubernetes&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;服务&lt;/h1&gt;
&lt;h2&gt;相关概念&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Service. 如果一个 Deployment 对外（pod 外）提供服务的话，可以暴露为 Service。它是服务的抽象, 通过 kube-proxy 和 DNS 等提供负载均衡给后端 RC 定义的 Pod。&lt;/li&gt;
&lt;li&gt;clusterIP. 服务暴露在集群内部的一个虚拟 IP，声明周期和服务相同&lt;/li&gt;
&lt;li&gt;nodePort. 暴露在 Node 上的服务端口，不建议在生产环境使用。&lt;/li&gt;
&lt;li&gt;Ingress Controller. Service 只是对集群内部暴露了服务，ingress controller 用于把 Service 再对外暴露。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果一个 deployment 需要对集群内部或者是外部提供服务的话，可以使用 service。&lt;/p&gt;
&lt;p&gt;这时将创建一个 clusterIP，需要特别注意的是，这个 clusterIP 也是虚拟的，并没有和任何 pod 绑定，而是绑定到了服务上，可以理解为绑定到了这个服务对应的内部负载均衡上，并且是不变的。即使你的 RC 中指定了多个副本，那么也只有这一个 clusterIP，pod 的创建和销毁也都不会影响到 clusterIP。&lt;/p&gt;
&lt;h1&gt;kubectl 使用&lt;/h1&gt;
&lt;h2&gt;kubectl get&lt;/h2&gt;
&lt;p&gt;常用参数 &lt;code&gt;-o wide&lt;/code&gt; 用来现实更详细信息. 用来获取集群的各种信息:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;kubectl get pod&lt;/code&gt; 显示所有 pod 信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kubectl get deployment&lt;/code&gt; 显示所有部署信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kubectl get node&lt;/code&gt; 显示所有节点信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;kubectl create &amp;amp; apply&lt;/h2&gt;
&lt;p&gt;用来创建 pod, 部署等. 一般情况下都是使用 &lt;code&gt;-f&lt;/code&gt; 参数来制定配置文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kubectl create -f file.yml
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;和 kubectl create 还有一个类似的概念，kubectl apply 也可以用于创建资源。这两个的区别有以下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kubectl create 是过程性的，重点在于“创建”这个操作；而 kubectl apply 是声明性的，重点在于达成“应用”这个结果&lt;/li&gt;
&lt;li&gt;kubectl create 在创建重复资源的时候会报错，而 kubectl apply 可以用于更新。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;kubectl run&lt;/h2&gt;
&lt;p&gt;类似于 docker run, 但是由 kubernetes 接管, 直接运行在集群上. 比如运行 hello world&lt;/p&gt;
&lt;h2&gt;kubectl delete&lt;/h2&gt;
&lt;p&gt;用来删除节点上的 pod, deployment 等信息&lt;/p&gt;
&lt;h2&gt;kubectl logs&lt;/h2&gt;
&lt;p&gt;类似于 docker logs, 用来显示打印到 stdout 的日志&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/41325087/in-kubernetes-what-is-the-difference-between-a-pod-and-a-deployment"&gt;deployment 和 pod 的区别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dockone.io/article/932"&gt;Kubernetes 基础概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jianshu.com/p/1bf9a46efe7a"&gt;客户端和服务端服务发现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.kubernetes.org.cn/683.html"&gt;kubernetes 命令表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.csdn.net/liumiaocn/article/details/73913597"&gt;Kubernetes之kubectl常用命令使用指南:1:创建和删除&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.csdn.net/xingwangc2014/article/details/51204224"&gt;Kubernetes之kubectl常用命令&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.csdn.net/u010209217/article/details/78782353"&gt;Kubernetes基本概念以及术语&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/47369351/kubectl-apply-vs-kubectl-create"&gt;kubectl create 和 apply 的区别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;https://stackoverflow.com/questions/42561791/right-way-to-update-deployments-on-kubernetes&lt;/li&gt;
&lt;li&gt;https://kubernetes.io/docs/concepts/workloads/controllers/deployment/&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.csdn.net/phantom_111/article/details/79427144"&gt;K8S YAML 文件基础&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/google-cloud/kubernetes-nodeport-vs-loadbalancer-vs-ingress-when-should-i-use-what-922f010849e0"&gt;NodePort/LB/Ingress 三种方式的对比&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;https://kubernetes.io/docs/tasks/access-application-cluster/service-access-application-cluster/&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Thu, 04 Oct 2018 17:45:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-10-04:/posts/kubernetes-chu-tan-bu-shu-wu-zhuang-tai-ying-yong.html</guid><category>架构</category><category>后端</category><category>计算机</category></item><item><title>kubernetes 初探——部署集群</title><link>/posts/kubernetes-chu-tan-bu-shu-ji-qun.html</link><description>&lt;p&gt;随着 docker cloud 的关闭，容器的编排工具之争似乎已经结束了，Docker Swarm 上算是完了，Kubernetes 笑到了最后。然而 k8s 的组件众多，因此部署起来也很麻烦。为此，网上有不少的网上有不少的部署教程和脚本，包括但不限于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kubesaz&lt;/li&gt;
&lt;li&gt;minikube&lt;/li&gt;
&lt;li&gt;kubespray&lt;/li&gt;
&lt;li&gt;rke&lt;/li&gt;
&lt;li&gt;kubernetes: the hard way&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有的出于教学目的的单机版本，有的是可以在生产环境部署的版本。研究了一番，发现 rke 这个工具应该是最简单的了。不过 rke 还不太稳定，目前看来，kubespray 声明了可以在生产环境使用&lt;/p&gt;
&lt;p&gt;本文基于 ubuntu 16.04. CentOS 上好多默认设置都需要修改，因此建议大家基于 Ubuntu 部署 k8s。&lt;/p&gt;
&lt;h1&gt;使用 kubespray 安装 k8s&lt;/h1&gt;
&lt;p&gt;(零) 假设我们要在三台机器上安装, 另外一台机器作为控制节点. 其中每台都作为工作节点, 两台作为 master 节点.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;IP&lt;/th&gt;
&lt;th&gt;角色&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;10.4.17.165&lt;/td&gt;
&lt;td&gt;控制节点, 不参与 k8s 集群&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10.4.17.167&lt;/td&gt;
&lt;td&gt;master, node&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10.4.17.168&lt;/td&gt;
&lt;td&gt;master, node&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10.4.17.169&lt;/td&gt;
&lt;td&gt;node&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;(一) 下载 kubespray 安装包, 这里我们使用最新版(2018.10), 可能需要安装 python3, 如果没有安装的话&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;VERSION=2.7.0

# download kubespray
wget https://github.com/kubernetes-incubator/kubespray/archive/v&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;VERSION&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;.tar.gz
tar xzf v&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;VERSION&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;.tar.gz

# install dependencies
pip3 install -r kubespray-&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;VERSION&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(二) 生成部署的 hosts.ini&lt;/p&gt;
&lt;p&gt;kubespray 中有一个脚本叫做 inventory_builder 用来生成部署的 hosts.ini&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd kubespray-v&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;VERSION&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
cp -r inventory/sample inventory/mycluster
declare -a IPS=(10.4.17.167 10.4.17.168 10.4.17.169)
CONFIG_FILE=inventory/mycluster/hosts.ini python3 contrib/inventory_builder/inventory.py &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;IPS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;生成之后, 可以查看生成的文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat inventory/mycluster/host.ini

[k8s-cluster:children]
kube-master·▸   ·
kube-node·▸ ·

[all]
node1 ▸  ansible_host=10.4.17.167 ip=10.4.17.167
node2 ▸  ansible_host=10.4.17.168 ip=10.4.17.168
node3 ▸  ansible_host=10.4.17.169 ip=10.4.17.169

[kube-master]
node1·▸ ·
node2·▸ ·

[kube-node]
node1·▸ ·
node2·▸ ·
node3·▸ ·

[etcd]
node1·▸ ·
node2·▸ ·
node3·▸ ·

[calico-rr]

[vault]
node1·▸ ·
node2·▸ ·
node3·▸ ·
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(三) 修改一些配置&lt;/p&gt;
&lt;p&gt;代理:&lt;/p&gt;
&lt;p&gt;由于众所周知的原因, k8s 依赖的 gcr.io 在中国大陆范围内无法访问, 我们可以使用代理访问, 关于如何搭建代理超出了本文的范围.
假设我们的代理是 http://proxy.com:10086, 修改 &lt;code&gt;inventory/mycluster/group_vars/all/all.yml&lt;/code&gt;  文件, 设置 http_proxy 和 https_proxy 两个变量.&lt;/p&gt;
&lt;p&gt;下载 kubectl 到本机:&lt;/p&gt;
&lt;p&gt;设置 kubectl_localhost 和 kubeconfig_localhost 两个变量为 true. 安装完成后会在本机安装 kubectl, 并且可以使用 inventory/mycluster/artifacts/admin.conf 使用 kubectl.&lt;/p&gt;
&lt;p&gt;(四) 部署&lt;/p&gt;
&lt;p&gt;这里我们需要使用 tiger 用户, 这个用户需要满足如下条件:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以无密码远程登录&lt;/li&gt;
&lt;li&gt;在远程主机上具有无密码 sudo 权限&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ansible-playbook -i inventory/mycluster/hosts.ini cluster.yml --become --user tiger -v
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;大概过十几分钟就部署好了&lt;/p&gt;
&lt;p&gt;(五) 验证&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd inventory/mycluster/artifacts
./kubectl.sh get nodes


NAME      STATUS    ROLES         AGE       VERSION
node1     Ready     master,node   1d        v1.11.3
node2     Ready     master,node   1d        v1.11.3
node3     Ready     node          1d        v1.11.3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://news.ycombinator.com/item?id=16665130"&gt;HN 上关于 Docker Cloud 关闭的讨论&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.itmuch.com/docker/kubernetes-deploy-by-kubespray/"&gt;使用Kubespray部署生产可用的Kubernetes集群&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sun, 30 Sep 2018 04:58:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-09-30:/posts/kubernetes-chu-tan-bu-shu-ji-qun.html</guid><category>架构</category><category>后端</category><category>计算机</category></item><item><title>requests cookies 为空的一个坑</title><link>/posts/requests-cookies-wei-kong-de-yi-ge-keng.html</link><description>&lt;p&gt;有时候，requests 返回的 cookies 会为空，原因是链接发生了 301/302 跳转，而 cookies 是跟着第一个响应返回的，第二个响应没有返回 Set-Cookie header。所以直接读取 r.cookies 是空的，而在 session.cookies 中是有数据的。&lt;/p&gt;
&lt;p&gt;解决方法是直接读 s.cookies。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;s = requests.Session()
r = s.get(&amp;#39;http://httpbin.org/cookies/set?foo=bar&amp;#39;)
cookies = requests.utils.dict_from_cookiejar(s.cookies)
s.cookies.clear()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;不过需要注意的是如果在多线程环境中使用 session 需要注意锁的问题，建议把 session 设置成 thread local 的类型。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Thu, 27 Sep 2018 19:10:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-09-27:/posts/requests-cookies-wei-kong-de-yi-ge-keng.html</guid><category>Python</category><category>编程语言</category><category>计算机</category><category>爬虫</category></item><item><title>influxdb+grafana+telegraf 监控系统搭建</title><link>/posts/influxdbgrafanatelegraf-jian-kong-xi-tong-da-jian.html</link><description>&lt;p&gt;本文基于 ubuntu 18.04&lt;/p&gt;
&lt;h1&gt;要不要用 docker？&lt;/h1&gt;
&lt;p&gt;这是一个哲学问题，用不用其实都有各自的好处。不过在这里我倾向于不用。因为 influxdb 和 grafana 都有好多的状态，而且不是都可以写到 mysql 中的，所以既然还得 mount 出来，何苦用 docker 呢？telegraf 需要采集系统的相关信息，更不适合放在 docker 里面。&lt;/p&gt;
&lt;h1&gt;搭建过程&lt;/h1&gt;
&lt;h2&gt;influxdb &amp;amp;&amp;amp; telegraf&lt;/h2&gt;
&lt;p&gt;因为这两个都是一家的产品，所以安装步骤都是一样的。按照&lt;a href="https://docs.influxdata.com/influxdb/v1.6/introduction/installation/"&gt;官网&lt;/a&gt;给的安装步骤，其实很简单的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -sL https://repos.influxdata.com/influxdb.key | sudo apt-key add -
source /etc/lsb-release
echo &amp;quot;deb https://repos.influxdata.com/&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;DISTRIB_ID&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;DISTRIB_CODENAME&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; stable&amp;quot; | sudo tee /etc/apt/sources.list.d/influxdb.list

sudo apt-get update &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt-get install influxdb telegraf
sudo systemctl start influxdb telegraf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们暂时就不配置了，直接使用默认配置。可以通过 &lt;code&gt;systemctl status influxdb&lt;/code&gt; 来查看状态&lt;/p&gt;
&lt;h2&gt;grafana&lt;/h2&gt;
&lt;p&gt;同样参考&lt;a href="http://docs.grafana.org/installation/debian/"&gt;官网&lt;/a&gt;的教程。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;VERSION=5.1.4
wget https://s3-us-west-2.amazonaws.com/grafana-releases/release/grafana_&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;VERSION&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;_amd64.deb
apt-get install -y adduser libfontconfig
dpkg -i grafana_&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;VERSION&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;_amd64.deb

sudo /bin/systemctl daemon-reload
sudo /bin/systemctl enable grafana-server
sudo /bin/systemctl start grafana-server
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后就 ok 啦，打开 http://ip:3000 就能访问 grafana 的界面了，默认用户名和密码是 admin。如果是在阿里云等云上面，注意要在安全组里面开一下 3000 端口。&lt;/p&gt;
&lt;h1&gt;配置&lt;/h1&gt;
&lt;h2&gt;配置 telegraf 的插件&lt;/h2&gt;
&lt;h2&gt;配置 grafana 的 datasource&lt;/h2&gt;
&lt;p&gt;未完待续&lt;/p&gt;
&lt;h1&gt;参考资料&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;https://blog.csdn.net/w958660278/article/details/80484486&lt;/li&gt;
&lt;li&gt;https://juejin.im/post/5b4568c851882519790c72f3&lt;/li&gt;
&lt;li&gt;https://grafana.com/dashboards/928&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Thu, 20 Sep 2018 19:05:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-09-20:/posts/influxdbgrafanatelegraf-jian-kong-xi-tong-da-jian.html</guid><category>后端</category><category>计算机</category></item><item><title>监控系统选型</title><link>/posts/jian-kong-xi-tong-xuan-xing.html</link><description>&lt;p&gt;现代的监控系统一般都有如下几部分组成：&lt;/p&gt;
&lt;p&gt;时序数据库 + 前端显示 + 报警系统 + 指标收集&lt;/p&gt;
&lt;p&gt;一般需要实现的功能:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;度量数据收集和可视化&lt;/li&gt;
&lt;li&gt;收集尽可能多的性能和状态数据&lt;/li&gt;
&lt;li&gt;图形化做有意义的展示&lt;/li&gt;
&lt;li&gt;如果发现可疑问题,可以关联其他图表找到原因&lt;/li&gt;
&lt;li&gt;错误检测&lt;/li&gt;
&lt;li&gt;按需告警, 触发条件越宽松则告警应该越少&lt;/li&gt;
&lt;li&gt;避免误报&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从监控的层次划分的话,一般包含三层监控:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基础层: 主机的CPU,内存,网络及IO等&lt;/li&gt;
&lt;li&gt;中间层: 应用运行的中间件层, Nginx, Tomcat, MySQL, Redis&lt;/li&gt;
&lt;li&gt;应用层: 服务端及客户端性能数据,如API访问次数和响应时间等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现代的监控越来越关注应用层和其他层数据的整合能力, 具有快速找到系统瓶颈, 方便扩容或代码优化.&lt;/p&gt;
&lt;h1&gt;时序数据库的选择&lt;/h1&gt;
&lt;p&gt;监控数据往往都带有时间戳，其实就是一种典型时间序列数据，而这方面已经有很多专门的存储系统，如 opentsdb，influxdb，prometheus 等。相比 mysql 这样的传统数据库，这类系统在存储、查询上针对时间序列数据都做了特别的优化。&lt;/p&gt;
&lt;p&gt;其中 opentsdb 基于 hadoop 生态系统，考虑到搭建的复杂度，暂时不考虑了。influxdb 和 prometheus 都是 Golang 编写的，直接一个二进制文件就可以运行。两者的区别有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;prometheus 对于保存长时间的数据有一些问题，influxdb 似乎没有问题&lt;/li&gt;
&lt;li&gt;另外 influxdb 可以直接写入，而 prometheus 是基于拉(pull)模式的，也就是说程序不能直接写入 prometheus，而是需要由 prometheus 去定期拉监控数据，太反人类了。&lt;/li&gt;
&lt;li&gt;influxdb 的查询类似 SQL，而 prometheus 的查询语法更加简洁，但是有学习成本，各有千秋吧&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以选用 influxdb了。&lt;/p&gt;
&lt;h1&gt;前端显示&lt;/h1&gt;
&lt;p&gt;唯一的标准自然是越漂亮越好，所以我们选择 grafana。&lt;/p&gt;
&lt;p&gt;当然另一需要考虑的是编写查询界面不要过于复杂，这方面 grafana 只需要拖拽空间和勾勾选选就可以了，显然不成问题。&lt;/p&gt;
&lt;h1&gt;报警系统&lt;/h1&gt;
&lt;p&gt;grafan 自带了一些报警，但是只能根据阈值报警，显然不能满足我们的需求。我们这里选择了 bosun，是 Stack Overflow 开源的一款监控系统。通过简单的几个语句就可以编写复杂的报警条件。&lt;/p&gt;
&lt;h1&gt;指标收集&lt;/h1&gt;
&lt;p&gt;按照前面的分析，对于应用层，也就是我们自己的代码，可以随意地添加代码打点，这里不再赘述。对于系统的 metrics 的收集，可以使用 influxdb 公司钦定的 telegraf。telegraf 也有一些不同的插件，可以很好地支持 mysql、redis 等的监控数据收集。&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://grafana.com/blog/2016/01/05/logs-and-metrics-and-graphs-oh-my/"&gt;Logs and Metrics and Graphs, Oh my!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gaott.info/prometheus-vs-influxdb/"&gt;Prometheus 和 influxdb 对比&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dbaplus.cn/news-72-1462-1.html"&gt;360基于Prometheus的在线服务监控实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.yunweipai.com/archives/20983.html"&gt;虎牙直播运维负责人张观石：基于时序数据库的直播业务监控实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://xoyo.space/2017/04/new-monitor-architecture/"&gt;监控系统选型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.csdn.net/lslxdx/article/details/79454916"&gt;openTSDB/Bosun报警语法 介绍/学习笔记&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 17 Sep 2018 23:16:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-09-17:/posts/jian-kong-xi-tong-xuan-xing.html</guid><category>后端</category><category>计算机</category></item><item><title>为什么不使用 scrapy？</title><link>/posts/wei-shi-yao-bu-shi-yong-scrapy.html</link><description>&lt;p&gt;最近面了几家公司，每当我提到头条的爬虫都是自己写的时候，对方一个下意识的问题就是“为什么不使用开源的 scrapy？”。实际上我在头条的 lead 就是 scrapy 的 contributor，而他自己也不用自己的框架，显然说明 scrapy 不适合大型项目，那么具体问题在哪儿呢？今天终于有时间了，详细写写这个问题。&lt;/p&gt;
&lt;h1&gt;爬虫并不需要一个框架&lt;/h1&gt;
&lt;p&gt;Web 服务器是一个爬虫可以抽象出来的是各种组件。而 scrapy 太简陋了，比如说去重，直接用的是内存中的一个集合。如果要依赖 scrapy 写一个大型的爬虫，几乎每个组件都要自己实现，那有何必用 scrapy 呢？&lt;/p&gt;
&lt;h1&gt;scrapy 不是完整的爬虫框架&lt;/h1&gt;
&lt;p&gt;一个完整的爬虫至少需要两部分，fetcher 和 frontier。其中 fetcher 用于下载网页，而 frontier 用于调度。scrapy 重点实现的是 fetcher 部分，也就是下载部分。&lt;/p&gt;
&lt;h1&gt;scrapy 依赖 twisted&lt;/h1&gt;
&lt;p&gt;这一点导致 scrapy 深入后曲线非常地陡峭，要想了解一些内部的机理，必须对 twisted 比较明了。而 twisted 正如它的名字一样，是非常扭曲的一些概念，虽然性能非常好，但是要理解起来是要花上不少时间的。&lt;/p&gt;
&lt;h1&gt;scrapy 适合的领域&lt;/h1&gt;
&lt;p&gt;scrapy 主要是和一次性地从指定的站点爬取一些数据&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://kaito-kidd.com/2016/11/01/scrapy-code-analyze-architecture/"&gt;scrapy 源码解读&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 05 Sep 2018 19:50:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-09-05:/posts/wei-shi-yao-bu-shi-yong-scrapy.html</guid><category>计算机</category><category>爬虫</category></item><item><title>rabbitmq 教程</title><link>/posts/rabbitmq-jiao-cheng.html</link><description>&lt;p&gt;更新：弃坑了，rabbitmq 在我这里总是崩溃，实在没法正常使用&lt;/p&gt;
&lt;p&gt;评估了几款 Message Queue，发现还是 rabbitmq 比较简单一些，各种特性也支持地很好。网上好多教程说“rabbitmq 非常重量级，适合企业应用开发”，这些话可以说是人云亦云，瞎扯了。实际上 rabbitmq 采用 erlang 开发，不光性能强大，而且从操作和运维上来说都是非常轻量级的。&lt;/p&gt;
&lt;h1&gt;基础概念&lt;/h1&gt;
&lt;p&gt;rabbitmq 实现的是 AMQP 0.9.1 协议，其中重要概念有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;producer：生产者，生产消息&lt;/li&gt;
&lt;li&gt;consumer：消费者，消费消息&lt;/li&gt;
&lt;li&gt;routing-key: 每个消息中决定消息如何分发的参数&lt;/li&gt;
&lt;li&gt;exchange：类似路由，消息实际发送给 exchange，可以指定几种不同的分发算法，然后用 routing-key 作为参数计算出该发送到哪个队列中，一个exchange 可以和一个或者多个 queue 绑定，exchange 有如下几种分发算法&lt;/li&gt;
&lt;li&gt;direct，直接按照 routing-key 和 queue 名字匹配&lt;/li&gt;
&lt;li&gt;fan-out，发送到所有绑定的 queue 中&lt;/li&gt;
&lt;li&gt;topic，利用 routing-key 和 queue 的名字模式匹配&lt;/li&gt;
&lt;li&gt;queue：缓冲消息，需要和 exchange 绑定&lt;/li&gt;
&lt;li&gt;binding：指的是 exchange 和 queue 之间的绑定关系&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;安装&lt;/h1&gt;
&lt;p&gt;Ubuntu:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install rabbitmq-server
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Python 客户端 pika&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install pika
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;基础使用&lt;/h1&gt;
&lt;p&gt;和其他一些队列不一样的是，rabbitmq 的队列需要显式创建，不能直接发消息过去生成。可以使用 &lt;code&gt;sudo rabbitmqctl list_queues&lt;/code&gt; 命令查看已有的队列。&lt;/p&gt;
&lt;p&gt;下面是实现一个生产者，多个消费者的关系，如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://www.rabbitmq.com/img/tutorials/prefetch-count.png"&gt;&lt;/p&gt;
&lt;p&gt;生产者&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pika&lt;/span&gt;

&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BlockingConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConnectionParameters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queue_declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;durable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 声明一个队列，rabbitmq 中的队列必须首先创建才能使用&lt;/span&gt;

&lt;span class="c1"&gt;# 发送消息需要指明发送到的 exchange，留空表示默认 exchange&lt;/span&gt;
&lt;span class="c1"&gt;# 默认的 exchange 会根据 routing-key 把消息发到对应的队列中&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basic_publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exchange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;routing_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# 消息体&lt;/span&gt;
                      &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BasicProperties&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                         &lt;span class="n"&gt;delivery_mode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# AMQP 定义的，其中 1 代表不要持久化，2 代表需要持久化&lt;/span&gt;
                      &lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; [x] Sent &amp;#39;Hello World!&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 最后关闭链接&lt;/span&gt;
&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;消费者&lt;/p&gt;
&lt;p&gt;消费者通过注册处理函数，来消费消息，可以同时使用多个消费者消费同一个队列。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pika&lt;/span&gt;

&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BlockingConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConnectionParameters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queue_declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;durable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; [x] Received &lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basic_ack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delivery_tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delivery_tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basic_qos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefetch_count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 最多有一个消息没有 ack&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basic_consume&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;no_ack&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 默认情况加就是 False，也就是需要 ack&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; [*] Waiting for messages. To exit press CTRL+C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_consuming&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;可以直接使用多个消费者来消费同一个队列，默认情况下 rabbitmq 采用了 round robin 的算法，也就是消息会依次发送给每一个消费者。&lt;/p&gt;
&lt;p&gt;如果没有 ack 的话，rabbitmq 的内存最终可能会占满&lt;/p&gt;
&lt;h1&gt;使用其他的 exchange&lt;/h1&gt;
&lt;p&gt;rabbitmq 中默认的 exchange 是 &lt;code&gt;direct&lt;/code&gt; exchange，也就是直接把收到的消息放到 routing key 对应的队列中。rabbitmq 还支持不少其他的类型，可以看文章开始的讨论。&lt;/p&gt;
&lt;p&gt;下面的例子通过使用一个 fanout 类型的 exchange 来实现消息发送给所有消费者。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://www.rabbitmq.com/img/tutorials/python-three-overall.png"&gt;&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pika&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BlockingConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConnectionParameters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# 声明一个 fanout 类型的 exchange，名字为 logs&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exchange_declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exchange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;logs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="n"&gt;exchange_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fanout&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;info: Hello World!&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basic_publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exchange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;logs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;routing_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; [x] Sent &lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;消费者&lt;/p&gt;
&lt;p&gt;Exchange 需要和 queue 绑定才会发送消息，否则会直接丢掉。
queue 需要和 exchange 绑定之后才能够接收到消息，而所有的 queue 默认已经是和默认 exchange 绑定的，所以在上一个例子中并没有使用绑定。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pika&lt;/span&gt;

&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BlockingConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pika&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConnectionParameters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exchange_declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exchange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;logs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="n"&gt;exchange_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fanout&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 声明一个临时的私有 queue&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queue_declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exclusive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;queue_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;

&lt;span class="c1"&gt;# 绑定 queue 到刚刚声明的 exchange&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queue_bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exchange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;logs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;queue_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; [*] Waiting for logs. To exit press CTRL+C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; [x] &lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basic_consume&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;queue_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;no_ack&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_consuming&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h1&gt;常见问题&lt;/h1&gt;
&lt;h2&gt;在一个循环中发送消息，为什么有时候会提示 Channel Closed?&lt;/h2&gt;
&lt;p&gt;使用 BlockingConnection 需要手动管理心跳，如果超过心跳时间就会被关闭链接。常见的错误包括使用了 time.sleep 导致长时间没有 publish 消息，从而链接被关闭。&lt;/p&gt;
&lt;p&gt;可以通过单独开一个心跳线程的方法，或者使用 &lt;a href="https://github.com/pika/pika/commit/df6a31630c530559cc61df14c1f23813b870d80a"&gt;connction.sleep&lt;/a&gt;。当然使用 connction.sleep 无法避免本身操作时长超过了心跳时间的情况。&lt;/p&gt;
&lt;h1&gt;channel 和 connection 的区别？&lt;/h1&gt;
&lt;p&gt;Connection 表示的是到 rabbitmq broker 的一个物理连接，一般一个程序使用一个链接，或者使用一个连接池，可以使用心跳来维护一个链接，理论上应该在多个线程之间分享，很遗憾 python 的客户端 pika 并不是线程安全的。&lt;/p&gt;
&lt;p&gt;而channel 则应该是短时效的，在每个线程内部创建，不是线程安全的。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;https://stackoverflow.com/questions/18418936/rabbitmq-and-relationship-between-channel-and-connection&lt;/li&gt;
&lt;li&gt;https://www.rabbitmq.com/tutorials/amqp-concepts.html&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;如果客户端重启，之前的匿名队列会被删除吗？如果没有别删除，还能连接上之前的匿名队列吗？如果连不上是不是消息就都丢了？&lt;/h2&gt;
&lt;p&gt;To be answered&lt;/p&gt;
&lt;h1&gt;UI管理工具&lt;/h1&gt;
&lt;p&gt;在向队列中发消息的过程中，尤其是在学习或者排查错误的时候，可以通过 rabbitmq 的管理工具来查看当前消息队列中的消息。&lt;/p&gt;
&lt;p&gt;首先，激活管理工具插件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rabbitmq-plugins enable rabbitmq_management
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后添加用户&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rabbitmqctl add_user username password
rabbitmqctl set_user_tags username administrator
rabbitmqctl set_permissions -p / username &amp;quot;.*&amp;quot; &amp;quot;.*&amp;quot; &amp;quot;.*&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后可以打开：http://server-name:15672/ 查看，使用刚刚设置的密码登录&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://ws1.sinaimg.cn/large/0069RVTdly1fu228vp43hj31kw0v9jyg.jpg"&gt;&lt;/p&gt;
&lt;h1&gt;参考：&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;http://www.rabbitmq.com/management.html&lt;/li&gt;
&lt;li&gt;https://www.rabbitmq.com/tutorials/tutorial-three-python.html&lt;/li&gt;
&lt;li&gt;https://github.com/pika/pika/issues/196&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 07 Aug 2018 17:10:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-08-07:/posts/rabbitmq-jiao-cheng.html</guid><category>后端</category><category>计算机</category></item><item><title>mysql 基础知识(3) - 创建修改表和权限</title><link>/posts/mysql-ji-chu-zhi-shi-3-chuang-jian-xiu-gai-biao-he-quan-xian.html</link><description>&lt;h2&gt;创建数据库&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CREATE DATABASE db_name
    [[DEFAULT] CHARACTER SET charset_name]
    [[DEFAULT] COLLATE collation_name]

ALTER DATABASE db_name
    [[DEFAULT] CHARACTER SET charset_name]
    [[DEFAULT] COLLATE collation_name]
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;创建表?&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CREATE TABLE table_name (
    field_name type is_null default options,
    ...
    PRIMAR KEY (id),
    INDEX/KEY index_name (field_name),
) ENGINE=InnoDB;
 
// 注意：KEY is normally a synonym for INDEX
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;设定 auto_increment&lt;/p&gt;
&lt;p&gt;注意 mysql 的关键字是 auto_increment, 而 sqlite 的是 autoincrement&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CREATE TABLE(...) AUTO_INCREMENT=xxx;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更改已经存在的表&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ALTER TABLE SET AUTO_INCREMENT=xxx;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;数据类型&lt;/h2&gt;
&lt;h3&gt;字符串&lt;/h3&gt;
&lt;p&gt;字符串分两种，定长和变长，MySQL处理定长数据比变长数据快得多。CHAR属于定长类型，VARCHAR和TEXT属于变长类型。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CHAR的长度为1-255，默认为1，使用CHAR(n)指定长度&lt;/li&gt;
&lt;li&gt;VARCHAR为0-255，使用VARCHAR(n)指定长度&lt;/li&gt;
&lt;li&gt;TEXT为65536，MEDIUMTEXT为16k，LONGTEXT为4GB&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="https://ws3.sinaimg.cn/large/006tNc79ly1ft17mebw0kj31900n6wkx.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;数字&lt;/h3&gt;
&lt;p&gt;注意数字后面跟的数字，例如INT(5)，并不是限制数字的存储长度，而是限制数字的展示长度（显示时填充0）！可以使用UNSIGNED指定为非负值，默认为signed&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://ws4.sinaimg.cn/large/006tNc79ly1ft17lhmrv7j30wk0fswh3.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;日期&lt;/h3&gt;
&lt;p&gt;使用DATETIME，不要使用TIMESTAMP，防止2038年溢出&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://ws4.sinaimg.cn/large/006tNc79ly1ft17luawbtj312w09kabw.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;tips&lt;/h3&gt;
&lt;h4&gt;创建 modify_time/update_time 字段时使用自动更新时间&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;`modify_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;设计表要注意每个字段的正交性，不要出现一个字段表示“xx且xx”的状态。&lt;/h4&gt;
&lt;h2&gt;更新表&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rename table &amp;#39;old_name&amp;#39; to &amp;#39;new_name&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;添加一列，其中的 COLUMN 关键字是 optional 的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ALTER TABLE table_name ADD COLUMN field_name type;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更新某个字段的数据类型&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Alter TABLE `tableName` MODIFY COLUMN `ColumnName` datatype(length);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;比如说：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Alter TABLE `tbl_users` MODIFY COLUMN `dup` VARCHAR(120);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重命名一列&lt;/p&gt;
&lt;p&gt;需要注意的是数据类型也需要带上&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;alter table `user` change `name` `first_name` varchar(128) default null;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;添加不同类型的索引&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ALTER TABLE table_name ADD INDEX index_name (column_list)

ALTER TABLE table_name ADD UNIQUE index_name (column_list)

ALTER TABLE table_name ADD PRIMARY KEY index_name (column_list)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;需要注意的是 mysql 索引的最大长度是 255，也就是在 VARCHAR(255) 以上的列是不能添加索引的，一个改进方法就是另外添加一列存储这一列的 hash 值。&lt;/p&gt;
&lt;h2&gt;删除字段&lt;/h2&gt;
&lt;p&gt;删除索引&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;alter table TABLENAME drop index xxxx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;------------------之前笔记的分割线------------------------
 
 &lt;/p&gt;
&lt;h2&gt;组合索引&lt;/h2&gt;
&lt;p&gt;如果有一个组合索引(col_a,col_b,col_c)
 
下面的情况都会用到这个索引：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;col_a = &amp;quot;some value&amp;quot;;
col_a = &amp;quot;some value&amp;quot; and col_b = &amp;quot;some value&amp;quot;;
col_a = &amp;quot;some value&amp;quot; and col_b = &amp;quot;some value&amp;quot; and col_c = &amp;quot;some value&amp;quot;;
col_b = &amp;quot;some value&amp;quot; and col_a = &amp;quot;some value&amp;quot; and col_c = &amp;quot;some value&amp;quot;;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对于最后一条语句，mysql会自动优化成第三条的样子
 
下面的情况就不会用到索引：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;col_b = &amp;quot;aaaaaa&amp;quot;;
col_b = &amp;quot;aaaa&amp;quot; and col_c = &amp;quot;cccccc&amp;quot;;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 07 Aug 2018 15:47:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-08-07:/posts/mysql-ji-chu-zhi-shi-3-chuang-jian-xiu-gai-biao-he-quan-xian.html</guid><category>数据库</category><category>计算机</category></item><item><title>网络协议概述</title><link>/posts/wang-luo-xie-yi-gai-shu.html</link><description>&lt;p&gt;网络每层的头部基本上就是添加上本层的地址，还有一些校验和控制位&lt;/p&gt;
&lt;p&gt;运输层的 MAC 地址是点到点的，没传递一次就会把发送者和接受者用 ARP 转换，替换为经过的路由器的MAC地址。而 IP 层的地址和端口号是端到端，从发送到结束始终不变。除非经过上层协议改变了地址和端口号，比如代理服务器或者 NAPT 路由器。&lt;/p&gt;
&lt;p&gt;交换机没有任何地址，只有端口的概念。内部有一个转发表，记录了物理端口和MAC的对应关系，通过自主学习来建立。每台主机上都有自己的高速 ARP 地址缓存和路由表。可以通过 &lt;code&gt;ip n&lt;/code&gt; 和 &lt;code&gt;ip r&lt;/code&gt; 命令查看。&lt;/p&gt;
&lt;p&gt;VLAN 可以理解为逻辑上将一台交换机分割成数台虚拟交换机，且这些虚拟交换机互不相通。Vlan 是广播域，而通常两个广播域之间由路由器相连接，广播域之间来往的数据帧通过路由器中继。因此 Vlan间的通信也需要路由器（或者三层交换机）提供中继服务，即“Vlan间路由”。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Thu, 02 Aug 2018 17:30:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-08-02:/posts/wang-luo-xie-yi-gai-shu.html</guid><category>计算机</category><category>网络</category></item><item><title>图解一致性哈希</title><link>/posts/tu-jie-yi-zhi-xing-ha-xi.html</link><description>&lt;h1&gt;起源&lt;/h1&gt;
&lt;p&gt;比如你有 N 个 cache 服务器（后面简称 cache ），那么如何将一个对象 object 映射到 N 个 cache 上呢，你很可能会采用类似下面的通用方法计算 object 的 hash 值，然后均匀的映射到到 N 个 cache ；&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;hash(object) % N
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一切都运行正常，再考虑如下的两种情况；&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;一个 cache 服务器 m down 掉了（在实际应用中必须要考虑这种情况），这样所有映射到 cache m 的对象都会失效，怎么办，需要把 cache m 从 cache 中移除，这时候 cache 是 N-1 台，映射公式变成了 &lt;code&gt;hash(object) % (N-1)&lt;/code&gt; ；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;由于访问加重，需要添加 cache ，这时候 cache 是 N+1 台，映射公式变成了 &lt;code&gt;hash(object) % (N+1)&lt;/code&gt; ；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;1 和 2 意味着什么？这意味着突然之间几乎所有的 cache 都失效了。对于服务器而言，这是一场灾难，洪水般的访问都会直接冲向后台服务器；&lt;/p&gt;
&lt;p&gt;再来考虑第三个问题，由于硬件能力越来越强，你可能想让后面添加的节点多做点活，显然上面的 hash 算法也做不到。&lt;/p&gt;
&lt;p&gt;有什么方法可以改变这个状况呢，这就是 consistent hashing...&lt;/p&gt;
&lt;h1&gt;一致性哈希&lt;/h1&gt;
&lt;p&gt;一致性哈希把哈希值想象成一个环，比如说在 0 ~ 2^32-1 这个范围内，然后将节点（名字、IP等）求哈希之后分不到环上。当有访问请求时，把请求信息求哈希之后，寻找小于该哈希值的下一个节点。&lt;/p&gt;
&lt;p&gt;当有节点宕机的时候，请求会依次查找下一个节点，从而不让所有节点的缓存都失效。&lt;/p&gt;
&lt;p&gt;当加入新节点的时候，只会影响一个区间内的请求，也不会影响其他区间。&lt;/p&gt;
&lt;p&gt;如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://ws1.sinaimg.cn/large/006tKfTcly1ftvggxvlwfj315o0djq52.jpg"&gt;&lt;/p&gt;
&lt;h1&gt;虚拟节点&lt;/h1&gt;
&lt;p&gt;以上虽然解决了大部分问题，但是还有三个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;节点有可能在分布不均匀。&lt;/li&gt;
&lt;li&gt;当一个节点因为负载过重宕机以后，所有请求会落到下一台主机，这样就有可能使下一台主机也宕机，这就是雪崩问题。&lt;/li&gt;
&lt;li&gt;不同主机处理能力不同如何配置不同的量。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这时候可以引入虚拟节点。原始的一致性哈希中，每个节点通过哈希之后在环上占有一个位置，可以通过对每个节点多次计算哈希来获得过个虚拟节点。&lt;/p&gt;
&lt;p&gt;比如说，本来我们通过节点的 IP 来计算哈希&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;hash(&amp;#39;10.1.1.1&amp;#39;)  =&amp;gt; n1
hash(&amp;#39;10.1.1.2&amp;#39;)  =&amp;gt; n2
hash(&amp;#39;10.1.1.3&amp;#39;)  =&amp;gt; n3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在引入两倍的虚拟节点之后&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;hash(&amp;#39;10.1.1.1-1&amp;#39;)  =&amp;gt; n1-1
hash(&amp;#39;10.1.1.1-2&amp;#39;)  =&amp;gt; n1-2
hash(&amp;#39;10.1.1.2-1&amp;#39;)  =&amp;gt; n2-1
hash(&amp;#39;10.1.1.2-2&amp;#39;)  =&amp;gt; n2-2
hash(&amp;#39;10.1.1.3-1&amp;#39;)  =&amp;gt; n3-1
hash(&amp;#39;10.1.1.3-2&amp;#39;)  =&amp;gt; n3-2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如图所示&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://ws2.sinaimg.cn/large/006tKfTcly1ftvggbzovij315o0en40x.jpg"&gt;&lt;/p&gt;
&lt;p&gt;引入虚拟节点之后：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;平衡性得到了直接改善&lt;/li&gt;
&lt;li&gt;主机是交替出现的，所以当一个节点宕机后，所有流量会随机分配给剩余节点&lt;/li&gt;
&lt;li&gt;可以给处理能力强的节点配置更多地虚拟节点。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最后，一致性哈希可以用跳表或者平衡二叉树来实现&lt;/p&gt;
&lt;p&gt;参考文档：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;https://blog.csdn.net/MBuger/article/details/76189561&lt;/li&gt;
&lt;li&gt;https://www.cnblogs.com/23lalala/p/3588553.html&lt;/li&gt;
&lt;li&gt;https://crossoverjie.top/2018/01/08/Consistent-Hash/&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 01 Aug 2018 05:43:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-08-01:/posts/tu-jie-yi-zhi-xing-ha-xi.html</guid><category>算法</category><category>计算机</category></item><item><title>蛤？什么是 raft 协议？</title><link>/posts/ha-shi-yao-shi-raft-xie-yi.html</link><description>&lt;p&gt;Raft 协议是一个分布式的一致性协议，主要通过 Leader Election 和 Log Replication 两个步骤来实现高可用的一致性状态存储。&lt;/p&gt;
&lt;p&gt;这篇文章并不是 Raft 协议的一个完整介绍，只是其中核心概念的一个总结概括，要完全理解所有细节还是得看论文。&lt;/p&gt;
&lt;h1&gt;Leader 选举&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;每个节点有三种状态：follower、candidate、leader。&lt;/li&gt;
&lt;li&gt;作为 leader 有任期(term)的概念，根据基本法必须选举上台。Term 是一个自增的数字。&lt;/li&gt;
&lt;li&gt;作为 leader 要不断发送心跳给 follower，告诉他们一律不得经商。&lt;/li&gt;
&lt;li&gt;所有节点都有一个随机的定时器（150ms~300ms），当 follower 没有收到日志后就会升级为 candidate，term + 1，给自己投一票，并且发送 Request Vote RPC 给所有节点，也就是 apply for professor 啦。&lt;/li&gt;
&lt;li&gt;节点收到 Request Vote 后，如果自己还没有投票，而且比自己在的任期大，那就说明水平比自己高到不知道哪里去了，就投票出去，否则拒绝。&lt;/li&gt;
&lt;li&gt;如果节点发现自己的票超过了一半，就吟两句诗，认为自己是 leader 了&lt;/li&gt;
&lt;li&gt;新的 leader 上台后，继续发送日志昭告天下，其他的 candidate 自动灰溜溜的变为 follower 了。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;日志复制（Log Replication）&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;所有的请求都发送给 leader，一律由中央负责。&lt;/li&gt;
&lt;li&gt;leader 把收到的请求首先添加到自己的日志当中&lt;/li&gt;
&lt;li&gt;然后发送 Append Entries RPC 给所有的 follower，要求他们也添加这条日志&lt;/li&gt;
&lt;li&gt;当大多数的节点都添加这条日志之后，leader 上这条日志就变为了 commited&lt;/li&gt;
&lt;li&gt;leader 再发送给所有的节点，告诉他们这条日志 commited&lt;/li&gt;
&lt;li&gt;leader 返回给客户端，告诉他请求成功&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;分区容忍&lt;/h2&gt;
&lt;p&gt;如果网络发生了分区，也就是另立中央了，那么 raft 的日志复制机制也可以保证一致性。&lt;/p&gt;
&lt;p&gt;比如下图中，由于中间的网络分区，出现了两个 leader，这之后如果给下面的 leader（Node B）中发送请求，因为它向一个节点中同步日志，所以只能获得两个节点的确认，因此提交失败。而如果向上面的leader 中发送请求，可以向两个节点中同步日志，也就是说一共三个节点都是同步的，那么就提交成功。不会出现两个 leader 分叉的情况。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://ws4.sinaimg.cn/large/006tKfTcly1ftu1lfepqbj30zk0lmmz7.jpg"&gt;&lt;/p&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://thesecretlivesofdata.com/raft/"&gt;Raft 动画演示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.infoq.com/cn/articles/raft-paper"&gt;Raft 论文&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 31 Jul 2018 18:59:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-07-31:/posts/ha-shi-yao-shi-raft-xie-yi.html</guid><category>算法</category><category>计算机</category></item><item><title>LSM 和 sstable</title><link>/posts/lsm-he-sstable.html</link><description>&lt;h1&gt;核心要点&lt;/h1&gt;
&lt;p&gt;lsm 是 bigtable、leveldb、rocksdb 等数据库采用的算法。&lt;/p&gt;
&lt;p&gt;硬盘，尤其是机械硬盘，顺序写入性能远大于随机写入性能，所以 lsm 把大量的随机写入抓换成了顺序写入，从而极大地又花了写入能力。同时查找效率收到了损伤。&lt;/p&gt;
&lt;p&gt;适用于顺序写入多，随机读取少的场景。&lt;/p&gt;
&lt;p&gt;之所以要使用 Immutable Memtable，就是为了避免将 MemTable 中的内容序列化到磁盘中时会阻塞写操作。&lt;/p&gt;
&lt;h2&gt;操作&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;插入&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;写入 WAL，然后操作 memtable。WAL 是顺序读写，而memtable 是跳表，操作都很迅速&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;更新&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;和插入其实是一样的操作&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;删除&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;插入一条特殊的删除日志，在 memtable 中标记删除&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;compaction（压缩）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当 memtable 达到设定的阈值的时候，会写入到 immutable memtable，然后写入到硬盘上的 sstable。当 sstable 的数量达到某个阈值的时候，就合并到下一级的 memtable。需要注意的是只有第一级的memtable可能有重复的键值，其他层都不会有重复的，所以可以多线程 compact。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;读取&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最原始的算法：首先从memtable读，然后从sstable中往高层读取。&lt;/p&gt;
&lt;p&gt;可以采取的优化方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把 sstable 的一些原始信息放到 manifest 中，放在内存中，快速查找&lt;/li&gt;
&lt;li&gt;使用 bloom filter 先过滤一遍，看 key 是否在 LSM 中，然后再查找。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一图胜千言：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://ws3.sinaimg.cn/large/801b780aly1ftt76pvzotj21kw13eh8u.jpg"&gt;&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;http://blog.fatedier.com/2016/06/15/learn-lsm-tree/&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 31 Jul 2018 10:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-07-31:/posts/lsm-he-sstable.html</guid><category>算法</category><category>计算机</category></item><item><title>红黑树</title><link>/posts/hong-hei-shu.html</link><description>&lt;p&gt;红黑树的要求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;节点是红色或黑色。&lt;/li&gt;
&lt;li&gt;根是黑色。&lt;/li&gt;
&lt;li&gt;所有叶子都是黑色（叶子是NIL节点）。&lt;/li&gt;
&lt;li&gt;每个红色节点必须有两个黑色的子节点。（从每个叶子到根的所有路径上不能有两个连续的红色节点。）&lt;/li&gt;
&lt;li&gt;从任一节点到其每个叶子的所有简单路径都包含相同数目的黑色节点。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="https://upload.wikimedia.org/wikipedia/commons/thumb/6/66/Red-black_tree_example.svg/900px-Red-black_tree_example.svg.png"&gt;&lt;/p&gt;
&lt;p&gt;两篇不错的教程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://juejin.im/post/5a27c6946fb9a04509096248"&gt;漫画：什么是红黑树&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91"&gt;维基上的红黑树&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Thu, 26 Jul 2018 18:37:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-07-26:/posts/hong-hei-shu.html</guid><category>算法</category><category>计算机</category></item><item><title>MySQL 性能小技巧和在 Django 中的应用</title><link>/posts/mysql-xing-neng-xiao-ji-qiao-he-zai-django-zhong-de-ying-yong.html</link><description>&lt;h1&gt;1. 拆分影响很多行的语句&lt;/h1&gt;
&lt;p&gt;对于 delete update insert 等语句一定要使用 limit 子句限制影响的行数，避免一次更改特别多的行，造成数据库假死&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;while (1) {
    //每次只做1000条
    mysql_query(&amp;quot;DELETE FROM logs WHERE log_date &amp;lt;= &amp;#39;2009-11-01&amp;#39; LIMIT 1000&amp;quot;);
    if (mysql_affected_rows() == 0) {
        // 没得可删了，退出！
        break;
    }
    // 每次都要休息一会儿
    usleep(50000);
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;2. 垂直分割&lt;/h1&gt;
&lt;p&gt;把不会用作索引的，或者是过长的字段可以考虑使用其他存储引擎，比如 rocksdb 等。&lt;/p&gt;
&lt;h1&gt;3. IPv4 地址可以存为 uint32&lt;/h1&gt;
&lt;p&gt;使用 uint32 存储 IP 地址不光可以节省空间，而且可以按区间查询。&lt;/p&gt;
&lt;h1&gt;4. 避免 select *&lt;/h1&gt;
&lt;p&gt;从数据库里读出越多的数据，那么查询就会变得越慢。并且，如果你的数据库服务器和应用服务器是两台独立的服务器的话，这还会增加网络传输的负载。&lt;/p&gt;
&lt;p&gt;所以，你应该养成一个需要什么就取什么的好的习惯。&lt;/p&gt;
&lt;p&gt;不要使用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SELECT * FROM user WHERE user_id = 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SELECT username FROM user WHERE user_id = 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在 django 中，可以使用 &lt;code&gt;only&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;books = Book.objects.filter(author=&amp;quot;Jim&amp;quot;).only(&amp;#39;book_name&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;5. 当只要一行数据时使用 LIMIT 1&lt;/h1&gt;
&lt;p&gt;当你查询表的有些时候，你已经知道结果只会有一条结果，但因为你可能需要去fetch游标，或是你也许会去检查返回的记录数。&lt;/p&gt;
&lt;p&gt;在这种情况下，加上 LIMIT 1 可以增加性能。这样一样，MySQL数据库引擎会在找到一条数据后停止搜索，而不是继续往后查少下一条符合记录的数据。&lt;/p&gt;
&lt;p&gt;下面的示例，只是为了找一下是否有“中国”的用户，很明显，后面的会比前面的更有效率。（请注意，第一条中是Select *，第二条是Select 1）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SELECT * FROM user WHERE country = &amp;#39;China&amp;#39;
SELECT 1 FROM user WHERE country = &amp;#39;China&amp;#39; LIMIT 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在 Django 中可以使用 &lt;code&gt;[:1]&lt;/code&gt; 来添加 limit 1&lt;/p&gt;
&lt;h1&gt;6. EXPLAIN 你的 SELECT 查询&lt;/h1&gt;
&lt;p&gt;使用 EXPLAIN 关键字可以让你知道MySQL是如何处理你的SQL语句的。这可以帮你分析你的查询语句或是表结构的性能瓶颈。&lt;/p&gt;
&lt;h1&gt;7. 尽量让查询能 fit 进内存中&lt;/h1&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;https://coolshell.cn/articles/1846.html&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 24 Jul 2018 08:11:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-07-24:/posts/mysql-xing-neng-xiao-ji-qiao-he-zai-django-zhong-de-ying-yong.html</guid><category>数据库</category><category>计算机</category></item><item><title>每个程序员都应该知道的延迟数字</title><link>/posts/mei-ge-cheng-xu-yuan-du-ying-gai-zhi-dao-de-yan-chi-shu-zi.html</link><description>&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;动作&lt;/th&gt;
&lt;th&gt;时间&lt;/th&gt;
&lt;th&gt;换算&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;L1 缓存访问&lt;/td&gt;
&lt;td&gt;0.5 ns&lt;/td&gt;
&lt;td&gt;0.5ns&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;分支预测错误&lt;/td&gt;
&lt;td&gt;5 ns&lt;/td&gt;
&lt;td&gt;5ns&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;L2 缓存访问&lt;/td&gt;
&lt;td&gt;7 ns&lt;/td&gt;
&lt;td&gt;7ns&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;互斥锁/解锁&lt;/td&gt;
&lt;td&gt;25 ns&lt;/td&gt;
&lt;td&gt;25ns&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;内存访问&lt;/td&gt;
&lt;td&gt;100 ns&lt;/td&gt;
&lt;td&gt;100ns&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;使用 Zippy压缩 1KiB&lt;/td&gt;
&lt;td&gt;3,000 ns&lt;/td&gt;
&lt;td&gt;3 µs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;通过 1 Gbps 网络发送 2KiB&lt;/td&gt;
&lt;td&gt;20,000 ns&lt;/td&gt;
&lt;td&gt;20 µs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSD 随机读取&lt;/td&gt;
&lt;td&gt;150,000 ns&lt;/td&gt;
&lt;td&gt;150 µs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;内存中连续读取 1 MB&lt;/td&gt;
&lt;td&gt;250,000 ns&lt;/td&gt;
&lt;td&gt;250 µs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;同一个数据中心的来回&lt;/td&gt;
&lt;td&gt;500,000 ns&lt;/td&gt;
&lt;td&gt;0.5 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;从 SSD 上连续读取 1 MB*&lt;/td&gt;
&lt;td&gt;1,000,000 ns&lt;/td&gt;
&lt;td&gt;1 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;机械磁盘寻道&lt;/td&gt;
&lt;td&gt;10,000,000 ns&lt;/td&gt;
&lt;td&gt;10 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;机械磁盘连续读取 1 MB&lt;/td&gt;
&lt;td&gt;20,000,000 ns&lt;/td&gt;
&lt;td&gt;20 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;发送数据包 加州-&amp;gt;荷兰-&amp;gt;加州&lt;/td&gt;
&lt;td&gt;150,000,000 ns&lt;/td&gt;
&lt;td&gt;150 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;假设 ~1GB/sec SSD&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果把这些时长都乘以 10 亿的话:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;动作&lt;/th&gt;
&lt;th&gt;时长&lt;/th&gt;
&lt;th&gt;相当于&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;L1 缓存访问&lt;/td&gt;
&lt;td&gt;0.5 s&lt;/td&gt;
&lt;td&gt;一次心跳 (0.5 s)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;分支预测错误&lt;/td&gt;
&lt;td&gt;5 s&lt;/td&gt;
&lt;td&gt;打个哈欠&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;L2 缓存访问&lt;/td&gt;
&lt;td&gt;7 s&lt;/td&gt;
&lt;td&gt;打个长哈欠&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;互斥锁/解锁&lt;/td&gt;
&lt;td&gt;25 s&lt;/td&gt;
&lt;td&gt;冲一杯咖啡&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;内存访问&lt;/td&gt;
&lt;td&gt;100 s&lt;/td&gt;
&lt;td&gt;刷牙&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;使用 Zippy压缩 1KiB&lt;/td&gt;
&lt;td&gt;50 min&lt;/td&gt;
&lt;td&gt;一集电视剧(包括广告)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;通过 1 Gbps 网络发送 2KiB&lt;/td&gt;
&lt;td&gt;5.5 hr&lt;/td&gt;
&lt;td&gt;从午餐到下午工作结束&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSD 随机读取&lt;/td&gt;
&lt;td&gt;1.7 days&lt;/td&gt;
&lt;td&gt;一个普通的周末&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;内存中连续读取 1 MB&lt;/td&gt;
&lt;td&gt;2.9 days&lt;/td&gt;
&lt;td&gt;一个长周末&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;同一个数据中心的来回&lt;/td&gt;
&lt;td&gt;5.8 days&lt;/td&gt;
&lt;td&gt;一个普通假期&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;从 SSD 上连续读取 1 MB*&lt;/td&gt;
&lt;td&gt;11.6 days&lt;/td&gt;
&lt;td&gt;等快递等了两周&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;机械磁盘寻道&lt;/td&gt;
&lt;td&gt;16.5 weeks&lt;/td&gt;
&lt;td&gt;大学里的一个学期&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;机械磁盘连续读取 1 MB&lt;/td&gt;
&lt;td&gt;7.8 months&lt;/td&gt;
&lt;td&gt;几乎能造个人了&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;上面两个加起来&lt;/td&gt;
&lt;td&gt;1 year&lt;/td&gt;
&lt;td&gt;整整一年&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;发送数据包 加州-&amp;gt;荷兰-&amp;gt;加州&lt;/td&gt;
&lt;td&gt;4.8 years&lt;/td&gt;
&lt;td&gt;快能读个博士了&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;可视化网页：
https://people.eecs.berkeley.edu/~rcs/research/interactive_latency.html&lt;/p&gt;
&lt;h1&gt;这些数字的作用是什么？&lt;/h1&gt;
&lt;p&gt;了解这些时间的量级有助于比较不同的解决方案。通过这些数字，你可以看出来从远程服务器的内存中读一些数据时比直接从硬盘上读取快的。在一般的程序中，这也就意味着使用磁盘存储比使用数据库服务器要慢，因为数据库通常把所有东西都放在内存里了。而且这也说明了为什么在服务全球客户的时候 CDN 至关重要。从北美到欧洲的一个 ping 就要花上 100+ ms，所以从地理上来说，内容应该是分布式部署的。&lt;/p&gt;
&lt;p&gt;The idea is more about knowing the scale of time it takes to help compare different solution. With those number you can see that it's faster to get data in memory from a distant server than to read the same data from disk. In common application that means using disk storage is less efficient that storing it in a database on an other server, since it usually keeps almost everything in memory. It also tells a lot about why CDN are needed if you are serving client worldwide. A ping from North America to Europe will always takes 100+ ms, so having geographically distributed content is a good idea.&lt;/p&gt;
&lt;p&gt;对于互斥锁的开启锁定时间
mutex lock/unlock time is important for anyone writing code that depends on code that is accessing the same data structures at the same time. If you don't know that there is a considerable cost to writing such code, now you do; and this number can quantify it.&lt;/p&gt;
&lt;p&gt;还需要注意顺序读写和批量读写带来的提速&lt;/p&gt;
&lt;h1&gt;常见问题&lt;/h1&gt;
&lt;h2&gt;随着摩尔定律的发展，这些数字会不会不太准确了？&lt;/h2&gt;
&lt;p&gt;首先摩尔定律基本上经失效了。其次，这些数字的重点是他们之间的比例，而不是具体数字。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;https://gist.github.com/hellerbarde/2843375 &lt;/li&gt;
&lt;li&gt;https://softwareengineering.stackexchange.com/questions/312485/how-can-jeff-deans-latency-numbers-every-programmer-should-know-be-accurate-i&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 23 Jul 2018 02:32:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-07-23:/posts/mei-ge-cheng-xu-yuan-du-ying-gai-zhi-dao-de-yan-chi-shu-zi.html</guid><category>计算机</category></item><item><title>Mysql 的 wait_timeout 问题</title><link>/posts/mysql-de-wait_timeout-wen-ti.html</link><description>&lt;p&gt;Mysql 中默认的 wait_timeout 和 interactive_timeout 的值是八小时，也就是一个连接（交互式和非交互式的）只有在 8 小时没有活动之后才会被关闭掉。对于互联网公司来说，这个值实在太大了，一个库可能被很多脚本和服务访问，可能只是一个简短的查询就不需要数据库了，如果每个查询都占据了8小时的时间，那么 mysql 很快连接数就会满了，报出 too many connections 错误。&lt;/p&gt;
&lt;p&gt;mysql 默认的连接数可以修改 max_connections 参数，但是一个服务器能支撑的连接数显然是由硬件决定的。&lt;/p&gt;
&lt;p&gt;设置 wait_timeout 过短可能会造成一些问题，如果在 django 中两次查询的之间时间大于 wait_timeout，就会报 (2006, 'MySQL server has gone away')。django 官方给的建议是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当你的脚本不需要使用数据库的时候，主动关闭连接 &lt;code&gt;from django.db import connection; connection.close()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;增大 wait_timeout 的值&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不过django默认 CONN_MAX_AGE 是 0，也就是在查询数据库之后会立即关闭链接，理论上应该不会报这个错误。但是这样不能复用链接，会造成对数据压力很大。&lt;/p&gt;
&lt;p&gt;CONN_MAX_AGE应该小于数据库本身的最大连接时间wait_timeout，否则应用程序可能会获取到连接超时的数据库连接，这时会出现MySQL server has gone away的报错。&lt;/p&gt;
&lt;p&gt;可以在 settings.py 中动态地获取并填充这个值，然后写到 CONN_MAX_AGE 中&lt;/p&gt;
&lt;p&gt;理论上这样就不会再报错了，但是难免数据库重启或者什么时候会报错，总是使用 close_old_connections 还是很烦。&lt;/p&gt;
&lt;p&gt;有一种思路是在检测到和数据库链接断开的时候，自动重连，但是这样会破坏 django.db.atomic，但是可以实现一种不同的backend。可以参考这两个：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;https://github.com/django/django/pull/2740/commits/38f58aa4d751ad83f1dc76d5b945a1036239584f&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;https://github.com/django/django/pull/2454/commits/36b8bf870cab183b7ad63c0d8e7e8c02e314a053#diff-f8a587a973ef4c3a94d7550a5b85342c&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;还有一种解决思路是使用 connection pooling，我们可以使用 sqlalchemy 的 连接池作为django连接数据库的工具。参考这里：http://menendez.com/blog/mysql-connection-pooling-django-and-sqlalchemy/, 不过这种方法比较 hack。&lt;/p&gt;
&lt;p&gt;参考&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;https://code.djangoproject.com/ticket/21597#no2&lt;/li&gt;
&lt;li&gt;https://github.com/django/django/commit/2ee21d9f0d9eaed0494f3b9cd4b5bc9beffffae5&lt;/li&gt;
&lt;li&gt;https://stackoverflow.com/questions/1125504/django-persistent-database-connection&lt;/li&gt;
&lt;li&gt;django 优化https://blog.csdn.net/u011546806/article/details/45576669&lt;/li&gt;
&lt;li&gt;https://docs.djangoproject.com/en/2.1/ref/databases/#persistent-connections&lt;/li&gt;
&lt;li&gt;如何设置 max_age https://stackoverflow.com/questions/19937257/what-is-a-good-value-for-conn-max-age-in-django&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 23 Jul 2018 02:28:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-07-23:/posts/mysql-de-wait_timeout-wen-ti.html</guid><category>数据库</category><category>Django</category><category>后端</category><category>计算机</category></item><item><title>动态规划（LeetCode 413. Arithmetic Slices）</title><link>/posts/dong-tai-gui-hua-leetcode-413-arithmetic-slices.html</link><description>&lt;h1&gt;LeetCode 413. Arithmetic Slice&lt;/h1&gt;
&lt;p&gt;是一道可以用动态规划解的问题&lt;/p&gt;
&lt;h2&gt;题目&lt;/h2&gt;
&lt;p&gt;给定一个数组，找出其中等差数列的个数。等差数列的定义：3各元素以上，每个元素之间差相等。&lt;/p&gt;
&lt;p&gt;比如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1, 3, 5, 7, 9
7, 7, 7, 7
3, -1, -5, -9
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下面的就不是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1, 1, 2, 5, 7
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;A = [1, 2, 3, 4]

return: 3, for 3 arithmetic slices in A: [1, 2, 3], [2, 3, 4] and [1, 2, 3, 4] itself.
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;解法&lt;/h2&gt;
&lt;p&gt;观察发现，当我们遍历数组的时候，如果能和前一个元素构成等差数列，那么在这个位置可以构成的等差数列的个数就是上一个位置加一，所以的到递推公式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dp[i] = dp[i-1] + 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;借用官方答案里的图片：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://ws4.sinaimg.cn/large/006tNc79ly1ftjiweuvyaj317m0homzj.jpg"&gt;&lt;/p&gt;
&lt;p&gt;所以我们就得到了答案：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Solution&lt;/span&gt;:
    &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;numberOfArithmeticSlices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;        :type A: List[int]&lt;/span&gt;
&lt;span class="s2"&gt;        :rtype: int&lt;/span&gt;
&lt;span class="s2"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="nx"&gt;dp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="nx"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 23 Jul 2018 01:12:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-07-23:/posts/dong-tai-gui-hua-leetcode-413-arithmetic-slices.html</guid><category>算法</category><category>计算机</category></item><item><title>艾宾浩斯记忆曲线</title><link>/posts/ai-bin-hao-si-ji-yi-qu-xian.html</link><description>&lt;p&gt;&lt;img alt="" src="https://ws1.sinaimg.cn/large/006tNc79ly1ftigyvr6ioj30a506974c.jpg"&gt;&lt;/p&gt;
&lt;p&gt;德国著名的心理学家艾宾浩斯告诉我们人的记忆和遗忘是有规律的，记忆的保持在时间上是不同的，有短时的记忆和长时的记忆两种，人们接触到的信息在经过人的学习后，便成为了人的短时的记忆，但是如果不经过及时的复习，这些记住过的东西就会遗忘。并根据实验得出了著名的艾宾浩斯记忆曲线，如下：&lt;/p&gt;
&lt;p&gt;这条曲线告诉我们在记忆的最初阶段遗忘的速度很快，后来就逐渐减慢了，到了相当长的时候后，几乎就不再遗忘了，这就是遗忘的发展规律，即"先快后慢"的原则。观察这条遗忘曲线，你会发现，学得的知识在一天后，如不抓紧复习，就只剩下原来的25%。随着时间的推移，遗忘的速度减慢，遗忘的数量也就减少。&lt;/p&gt;
&lt;p&gt;艾宾浩斯在关于记忆的实验中发现，记住12个无意义音节，平均需要重复16.5次；为了记住36个无意义章节，需重复54次；而记忆六首诗中的480个音节，平均只需要重复8次！这个实验告诉我们，凡是理解了的知识，就能记得迅速、全面而牢固。不然，愣是死记硬背，那也是费力不讨好的。&lt;/p&gt;
&lt;p&gt;分散学习比集中学习优越。如对一个12个音节的音节组集中学习需要育读68次才能达到正确背诵，而分散学习只要35次就够了。&lt;/p&gt;
&lt;p&gt;参考：http://wiki.mbalib.com/wiki/%E8%89%BE%E5%AE%BE%E6%B5%A9%E6%96%AF%E8%AE%B0%E5%BF%86%E9%81%97%E5%BF%98%E6%9B%B2%E7%BA%BF&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sun, 22 Jul 2018 03:16:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-07-22:/posts/ai-bin-hao-si-ji-yi-qu-xian.html</guid><category>反思与总结</category></item><item><title>彭博到底是做什么生意的？</title><link>/posts/peng-bo-dao-di-shi-zuo-shi-yao-sheng-yi-de.html</link><description>&lt;p&gt;一句话：卖彭博终端机&lt;/p&gt;
&lt;p&gt;为什么大家要买彭博终端机呢？界面那么老土&lt;/p&gt;
&lt;p&gt;I think most of your questions can be answered by realizing that Bloomberg was founded in 1981, and they basically got a monopoly in financial data provision because there were no other options in 1981. That is why they have a custom monitor &amp;amp; keyboard: in the days before the IBM PC, everyone had a custom monitor &amp;amp; keyboard, because these things were not standardized. Bloomberg was a technologist &amp;amp; businessman before he was a politician; his business success gave him the money to run for office, his office doesn't force people to pay for Bloomberg.&lt;/p&gt;
&lt;p&gt;The reason they're still a monopoly is because knowing how to navigate a Bloomberg is a critical skill for most finance professionals, and now that they have that skillset, they can be very productive moving around in it. A different (better?) UI would require they re-learn everything, which is not going to happen. And when financial professionals are making half a million a year, paying $24k/year for a terminal so that they can be productive isn't a bad investment.
(Source: have a couple friends at Bloomberg. One is in their UI department, and keeps having his proposals for better UIs shot down for business reasons. Also married a financial professional who had to use a Bloomberg in her days as a bond trader.)&lt;/p&gt;
&lt;p&gt;The best way to think about the Bloomberg terminal is a web browser that connects you to a private network. (Bloomberg actually is the largest known private network.) Once connected, you have access to thousands of "web apps" - which Bloomberg users call "functions". Instead of a URL, you use a short 2 to 5 letter mnemonic code for each function, such as "MSG" for email, or "TOP" for top news. These different functions provide all sorts of various functionality - most of them are of course related to financial information. Functions like "CDSW" are for analyzing credit default swaps, "SDLC" gives you supply chain data for different companies, other functions analyze or curate Twitter, others correlate news events with historical stock data, etc. There are also many non-financial functions as well that reflect the "social network" aspect of the Bloomberg terminal, such as "POSH" which is basically a high-end Craigs list, or "DINE" which is a high-end Yelp.
All-in-all, the Bloomberg Terminal is like a private Internet for financial professionals.&lt;/p&gt;
&lt;p&gt;核心的依赖可能是 bloomberg chat，相当于金融圈的社交网络。&lt;/p&gt;
&lt;p&gt;“I think Facebook is the best comparison,” Ayzerov says. “If Facebook had only one fourth of your friends, you wouldn’t use it. The advantage of Bloomberg is that every financial person has it.”"&lt;/p&gt;
&lt;p&gt;Wow, great comments about Bloomberg. It makes me wonder, is there similar system for Cryptocoins traders?&lt;/p&gt;
&lt;p&gt;Bloomberg would be very hard to dethrone. It's key selling point is all of the data they have access to, which takes forever to setup integration with all of those providers. They continually expand data sources as well so it's not like they are asleep at the wheel.
Finally, Bloomberg chat has strong network effects so even if you had all of the same data, many traders still wouldn't switch to you because they can't communicate with others still on Bloomberg.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It is a all-in-one news source. There are a lot of features that allow you to monitor the news from many different sources in real time.&lt;/li&gt;
&lt;li&gt;It is a social network. The built-in chat and email service is &lt;em&gt;really&lt;/em&gt; basic. But, just about every one working in Finance is on it, with their contact details and resumes. As a trader, you can legally close financial transactions on the Bloomberg chat, as one would over the phone.&lt;/li&gt;
&lt;li&gt;It is a data sharing platform. Banks and other market participants contribute to Bloomberg data by sending information that is normally not visible in the market. For instance FX volatilities are quoted by banks on bloomberg in real time. This information is only available in few places.&lt;/li&gt;
&lt;li&gt;It is an API that allows its users to use its data for custom analytics.&lt;/li&gt;
&lt;li&gt;It is an execution platform, where you can book trades, follow their values and risk when the market moves, etc.&lt;/li&gt;
&lt;li&gt;It is open to 3rd parties: some banks and other data vendors have their own pages on bloomberg (which I never had access to).&lt;/li&gt;
&lt;li&gt;It has many many other stuffs. There is a restaurant review system. There is a classified section. There are things to monitor the weather. It has videos, maps, it's just huge.&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sun, 22 Jul 2018 01:13:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-07-22:/posts/peng-bo-dao-di-shi-zuo-shi-yao-sheng-yi-de.html</guid><category>创业</category><category>运营与产品</category></item><item><title>redis 常见问题</title><link>/posts/redis-chang-jian-wen-ti.html</link><description>&lt;p&gt;主要参考这篇文章：https://mp.weixin.qq.com/s/vS8IMgBIrfGpZYNUwtXrPQ&lt;/p&gt;
&lt;h1&gt;1. 集合操作避免范围过大&lt;/h1&gt;
&lt;p&gt;使用 sortedset、set、list、hash等集合类的O(N)操作时要评估当前元素个数的规模以及将来的增长规模，对于短期就可能变为大集合的key，要预估O(N)操作的元素数量，避免全量操作，可以使用HSCAN、SSCAN、ZSCAN进行渐进操作。集合元素数量过大在使用过程中会影响redis的实际性能，元素个数建议尽量不要超过5000，元素数量过大可考虑拆分成多个key进行处理。&lt;/p&gt;
&lt;h1&gt;2. 合理使用过期时间&lt;/h1&gt;
&lt;p&gt;如果key没有设置超时时间，会导致一直占用内存。对于可以预估使用生命周期的key应当设置合理的过期时间或在最后一次操作时进行清理，避免垃圾数据残留redis。redis 不是垃圾桶。&lt;/p&gt;
&lt;h1&gt;3. 利用批量操作命令&lt;/h1&gt;
&lt;p&gt;假设要给一个集合导入 5000 个元素：&lt;/p&gt;
&lt;p&gt;方案1：直接使用redis的HSET逐个设置&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for _ in 0..5000
    HSET hash, k，v
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;结果：失败。redis ops飙升，同时接口响应超时&lt;/p&gt;
&lt;p&gt;方案2：改用redis的 HMSET一次将所有元素设置到hash中&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;map&amp;lt;k, v&amp;gt; = 50000个元素
HMSET hash map
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;结果：失败。出现redis慢日志&lt;/p&gt;
&lt;p&gt;方案3：依然使用 HMSET，只是每次设置500个，循环100次&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;map_chunk&amp;lt;k, v&amp;gt; = 500个元素
for i in 0..100
    HMSET hash map_chunk[i]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;结果：成功&lt;/p&gt;
&lt;p&gt;MSET/HMSET等都支持一次输入多个key，LPUSH/RPUSH/SADD等命令都支持一次输入多个value,也要注意每次操作数量不要过多,建议控制在500个以内&lt;/p&gt;
&lt;h1&gt;4. 合理设置值的大小&lt;/h1&gt;
&lt;p&gt;String类型尽量控制在10KB以内。虽然redis对单个key可以缓存的对象长度能够支持的很大，但是实际使用场合一定要合理拆分过大的缓存项，1k 基本是redis性能的一个拐点。当缓存项超过10k、100k、1m性能下降会特别明显。关于吞吐量与数据大小的关系可见下面官方网站提供的示意图。&lt;/p&gt;
&lt;p&gt;在局域网环境下只要传输的包不超过一个 MTU（以太网下大约 1500 bytes），那么对于 10、100、1000 bytes不同包大小的处理吞吐能力实际结果差不多。&lt;/p&gt;
&lt;h1&gt;5. 禁用一些命令&lt;/h1&gt;
&lt;p&gt;keys、monitor、flushall、flushdb应当通过redis的rename机制禁掉命令，若没有禁用，开发人员要谨慎使用。其中flushall、flushdb会清空redis数据；keys命令可能会引起慢日志；monitor命令在开启的情况下会降低redis的吞吐量，根据压测结果大概会降低redis50%的吞吐量，越多客户端开启该命令，吞吐量下降会越多。&lt;/p&gt;
&lt;p&gt;keys和monitor在一些必要的情况下还是有助于排查线上问题的，建议可在重命名后在必要情况下由redis相关负责人员在redis备机使用，monitor命令可借助redis-faina等脚本工具进行辅助分析，能更快排查线上ops飙升等问题。&lt;/p&gt;
&lt;h1&gt;6. 避免大量 key 同时过期&lt;/h1&gt;
&lt;p&gt;如果大量的 key 过期时间设置得过于集中，到过期的时间点，redis 可能会出现短暂的卡顿现象。一般需要在时间上加一个随机值，使得过期时间分散一些。&lt;/p&gt;
&lt;h1&gt;7. Redis 如何做持久化&lt;/h1&gt;
&lt;p&gt;bgsave 做镜像全量持久化，aof 做增量持久化。因为 bgsave 会耗费较长时间，不够实时，在停机的时候回导致大量丢失数据，所以需要 aof 来配合使用。在 redis 实例重启时，优先使用 aof 来回复内存状态，如果没有 aof 日志，就会使用 rdb 来恢复。&lt;/p&gt;
&lt;p&gt;如果 aof 文件过大会导致恢复时间过长，不过 redis 会定期做 aof 重写，压缩 aof 文件日志大小。在 redis 4.0 之后还有了混合持久化的功能，将 bgsave 的全量和 aof 的增量做了融合处理，这样既保证了回复的效率有兼容了数据的安全性。&lt;/p&gt;
&lt;p&gt;为了避免断电时后丢失数据，还可以设置 aof 日志的 sync 属性，极端情况下，可以每次写入都执行，不过会对性能有影响，一般每秒一次就可以。&lt;/p&gt;
&lt;h1&gt;8. 保存失败&lt;/h1&gt;
&lt;p&gt;redis 报错：Can't save in background: fork: Cannot allocate memory。&lt;/p&gt;
&lt;p&gt;原因是 redis 在后台保存的时候会直接 fork 一下，然后保存。由于数据库过大，就会 fork 失败，但是实际上由于 copy-on-write 机制的存在，并不会产生问题。所以可以直接更改系统的配置，允许 fork。&lt;/p&gt;
&lt;p&gt;把 &lt;code&gt;/etc/sysctl.conf&lt;/code&gt; 文件修改如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vm.overcommit_memory=1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后重新加载：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sysctl -p /etc/sysctl.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考资料：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;https://stackoverflow.com/questions/11752544/redis-bgsave-failed-because-fork-cannot-allocate-memory&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Fri, 20 Jul 2018 04:03:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-07-20:/posts/redis-chang-jian-wen-ti.html</guid><category>数据库</category><category>计算机</category></item><item><title>大规模字符串的匹配</title><link>/posts/da-gui-mo-zi-fu-chuan-de-pi-pei.html</link><description>&lt;p&gt;问题：假设我们有一组比较长的文本，每一个文本都有几十k左右，还有一些敏感关键词需要删除，大概有几千，然后需要在这些文本中把关键词找出来。&lt;/p&gt;
&lt;h1&gt;方法1：暴力搜索&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="n"&gt;compiled_words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\b&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;my20000words&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;sentence&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sentences&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;compiled_words&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;***&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sentence&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;改进1：把正则组合起来&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pattern = &amp;quot;\b(word1|word2|word3)\b&amp;quot;

for sentence in sentences:
  print(re.sub(pattern, &amp;quot;***&amp;quot;, sentence))
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;改进2：使用 Trie 优化正则&lt;/h1&gt;
&lt;p&gt;对于数组：['foobar', 'foobah', 'fooxar', 'foozap', 'fooza']，使用上面的方法，我们可能会写出正则：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;\b(foobar|foobah|fooxar|foozap|fooza)\b&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但是这并不是最优的正则，应该使用前缀树的思想来合并单词，形成下面的正则：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;r&amp;quot;\bfoo(?:ba[hr]|xar|zap?)\b&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;具体的方法可以看这里：https://stackoverflow.com/a/42789508/1061155&lt;/p&gt;
&lt;h1&gt;改进3：基于集合的搜索&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;delete_banned_words&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matchobj&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;matchobj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;banned_words&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;

&lt;span class="n"&gt;word_pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\w+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;sentence&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sentences&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;sentence&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;word_pattern&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delete_banned_words&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sentence&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：&lt;/p&gt;
&lt;p&gt;https://stackoverflow.com/questions/42742810/speed-up-millions-of-regex-replacements-in-python-3/42789508&lt;/p&gt;
&lt;p&gt;https://medium.freecodecamp.org/regex-was-taking-5-days-flashtext-does-it-in-15-minutes-55f04411025f&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Fri, 20 Jul 2018 02:35:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-07-20:/posts/da-gui-mo-zi-fu-chuan-de-pi-pei.html</guid><category>算法</category><category>计算机</category></item><item><title>Python 中的 GC（垃圾回收）</title><link>/posts/python-zhong-de-gcla-ji-hui-shou.html</link><description>&lt;h1&gt;引用计数（reference counting）&lt;/h1&gt;
&lt;p&gt;CPython 中默认使用的垃圾回收算法是 Reference Counting。也就是对每个元素标记有多少个其他元素引用了它，当引用数降到零的时候就删除。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当对象增加一个引用，比如赋值给变量，属性或者传入一个方法，引用计数执行加1运算。&lt;/li&gt;
&lt;li&gt;当对象减少一个引用，比如变量离开作用域，属性被赋值为另一个对象引用，属性所在的对象被回收或者之前传入参数的方法返回，引用计数执行减1操作。&lt;/li&gt;
&lt;li&gt;当引用计数变为0，代表该对象不被引用，可以标记成垃圾进行回收。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;为了解决循环引用的问题，CPython 使用了 Cyclic GC，遍历所有的环，并且把每一个元素的引用减一，来检测每一个引用环是不是循环应用。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://ws2.sinaimg.cn/large/006tKfTcly1ftg5mu2087j30we0i6gv5.jpg"&gt;&lt;/p&gt;
&lt;h1&gt;标记删除（Mark and Sweep）&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;从某一个已知的还活着的对象开始，便利对象，如果经过了某个对象就认为是活着的&lt;/li&gt;
&lt;li&gt;如果没有被标记的就删除&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;避免了循环引用的问题&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://ws1.sinaimg.cn/large/006tKfTcly1ftf9x2kejlj30wo0ic11s.jpg"&gt;&lt;/p&gt;
&lt;p&gt;实际的处理过程&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://ws4.sinaimg.cn/large/006tKfTcly1ftfa55k2e7j30wi0ick3k.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://ws3.sinaimg.cn/large/006tKfTcly1ftfa6amfmmj30wc0iedr8.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Pluggable
Generational
Incremental&lt;/p&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;https://www.youtube.com/watch?v=iHVs_HkjdmI&lt;/li&gt;
&lt;li&gt;https://droidyue.com/blog/2015/06/05/how-garbage-collector-handles-circular-references/&lt;/li&gt;
&lt;li&gt;https://www.cnblogs.com/Xjng/p/5128269.html&lt;/li&gt;
&lt;li&gt;https://foofish.net/python-gc.html&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Thu, 19 Jul 2018 08:52:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-07-19:/posts/python-zhong-de-gcla-ji-hui-shou.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>在 Python 中优雅地处理 SIGTERM 信号</title><link>/posts/zai-python-zhong-you-ya-di-chu-li-sigterm-xin-hao.html</link><description>&lt;p&gt;昨天写了一个服务，在本地运行很好，使用 Ctrl-C 结束运行之后会清理资源，然后取消注册，然而放到 Docker 中跑之后发现结束之后资源没有释放。查了查发现原来是下面是几个因素造成的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ctrl-C 发送的是 SIGINT 信号，Python 会转化成 KeyboardInterrupt 异常，而我的资源是在 finally 释放资源，所以使用 Ctrl-C 可以优雅地退出&lt;/li&gt;
&lt;li&gt;Python 中对其他的信号（比如 SIGTERM、SIGHUP）都不会处理，而是直接退出&lt;/li&gt;
&lt;li&gt;Docker 在推出的时候默认发送的是 SIGTERM 信号&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以在 docker stop 的时候服务并不能优雅的推出。&lt;/p&gt;
&lt;h1&gt;解决方法&lt;/h1&gt;
&lt;p&gt;使用 atexit 模块是不可以的，atexit 不会处理 SIGTERM。需要使用 signal 模块来，在网上找到了一份源码。这个代码注册了一个 SIGTERM 的 handler，把 SIGTERM 转换成正常的 &lt;code&gt;sys.exit&lt;/code&gt; 调用，当运行 &lt;code&gt;sys.exit&lt;/code&gt; 的时候会运行 finally 子句中的语句。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Author: Giampaolo Rodola&amp;#39; &amp;lt;g.rodola [AT] gmail [DOT] com&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;# License: MIT&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;with_statement&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;contextlib&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;signal&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_sigterm_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;_sigterm_handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__enter_ctx__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;


&lt;span class="nd"&gt;@contextlib.contextmanager&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;A context manager which properly handles SIGTERM and SIGINT&lt;/span&gt;
&lt;span class="sd"&gt;    (KeyboardInterrupt) signals, registering a function which is&lt;/span&gt;
&lt;span class="sd"&gt;    guaranteed to be called after signals are received.&lt;/span&gt;
&lt;span class="sd"&gt;    Also, it makes sure to execute previously registered signal&lt;/span&gt;
&lt;span class="sd"&gt;    handlers as well (if any).&lt;/span&gt;

&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; app = App()&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; with handle_exit(app.stop):&lt;/span&gt;
&lt;span class="sd"&gt;    ...     app.start()&lt;/span&gt;
&lt;span class="sd"&gt;    ...&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;

&lt;span class="sd"&gt;    If append == False raise RuntimeError if there&amp;#39;s already a handler&lt;/span&gt;
&lt;span class="sd"&gt;    registered for SIGTERM, otherwise both new and old handlers are&lt;/span&gt;
&lt;span class="sd"&gt;    executed in this order.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;old_handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGTERM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_sigterm_handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old_handler&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIG_DFL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old_handler&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;_sigterm_handler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;RuntimeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;there is already a handler registered for &amp;quot;&lt;/span&gt;
                               &lt;span class="s2"&gt;&amp;quot;SIGTERM: &lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;old_handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;_sigterm_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;old_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGTERM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_sigterm_handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__enter_ctx__&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;RuntimeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;can&amp;#39;t use nested contexts&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;_sigterm_handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__enter_ctx__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;KeyboardInterrupt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;SystemExit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# code != 0 refers to an application error (e.g. explicit&lt;/span&gt;
        &lt;span class="c1"&gt;# sys.exit(&amp;#39;some error&amp;#39;) call).&lt;/span&gt;
        &lt;span class="c1"&gt;# We don&amp;#39;t want that to pass silently.&lt;/span&gt;
        &lt;span class="c1"&gt;# Nevertheless, the &amp;#39;finally&amp;#39; clause below will always&lt;/span&gt;
        &lt;span class="c1"&gt;# be executed.&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt;
    &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;_sigterm_handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__enter_ctx__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# ===============================================================&lt;/span&gt;
    &lt;span class="c1"&gt;# --- test suite&lt;/span&gt;
    &lt;span class="c1"&gt;# ===============================================================&lt;/span&gt;

    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestOnExit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="c1"&gt;# reset signal handlers&lt;/span&gt;
            &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGTERM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIG_DFL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tearDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="c1"&gt;# make sure we exited the ctx manager&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;handle_exit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="k"&gt;pass&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;callback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
            &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;handle_exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
                &lt;span class="k"&gt;pass&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_kinterrupt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;handle_exit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;KeyboardInterrupt&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_sigterm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;handle_exit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getpid&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGTERM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_sigint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;handle_exit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getpid&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGINT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_sigterm_old&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="c1"&gt;# make sure the old handler gets executed&lt;/span&gt;
            &lt;span class="n"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
            &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGTERM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;old&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;handle_exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;new&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getpid&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGTERM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;old&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;new&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_sigint_old&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="c1"&gt;# make sure the old handler gets executed&lt;/span&gt;
            &lt;span class="n"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
            &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGINT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;old&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;handle_exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;new&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getpid&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGINT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;old&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;new&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_no_append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="c1"&gt;# make sure we can&amp;#39;t use the context manager if there&amp;#39;s&lt;/span&gt;
            &lt;span class="c1"&gt;# already a handler registered for SIGTERM&lt;/span&gt;
            &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGTERM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;handle_exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
                    &lt;span class="k"&gt;pass&lt;/span&gt;
            &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;RuntimeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;pass&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;exception not raised&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_nested_context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;handle_exit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;handle_exit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                        &lt;span class="k"&gt;pass&lt;/span&gt;
            &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;RuntimeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;pass&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;exception not raised&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;docker 退出信号：https://www.ctl.io/developers/blog/post/gracefully-stopping-docker-containers/&lt;/li&gt;
&lt;li&gt;finally 中的语句并不总会执行：https://stackoverflow.com/questions/49262379/does-finally-always-execute-in-python&lt;/li&gt;
&lt;li&gt;Python 不处理 SIGTERM 信号 https://stackoverflow.com/questions/9930576/python-what-is-the-default-handling-of-sigterm&lt;/li&gt;
&lt;li&gt;sys.exit 也会运行 finally 中的语句 https://stackoverflow.com/questions/7709411/why-finally-block-is-executing-after-calling-sys-exit0-in-except-block&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 18 Jul 2018 01:46:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-07-18:/posts/zai-python-zhong-you-ya-di-chu-li-sigterm-xin-hao.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>在阿里云上为内网VPC搭建NAT出口服务器</title><link>/posts/zai-a-li-yun-shang-wei-nei-wang-vpcda-jian-natchu-kou-fu-wu-qi.html</link><description>&lt;p&gt;对于大多数的内部服务来说，我们是不希望他们暴露在公网上的；而且服务之间通过公网通信效率也比较低。阿里云提供了虚拟私网的服务，我们可以把服务都部署在内网。但是与此同时如何让内网的服务器能够上网也就成了问题，毕竟还是经常需要&lt;code&gt;apt-get&lt;/code&gt; 一下。&lt;/p&gt;
&lt;p&gt;首先，不可能每个服务器都绑定一个弹性IP，贵且不说，这样和又把内部服务暴露在了公网。&lt;/p&gt;
&lt;p&gt;其次，阿里云提供了专用的NAT服务器，但是太贵了！！！&lt;/p&gt;
&lt;p&gt;其实 NAT 服务器也很简单啦，就是一个路由转发而已，利用 iptables 可以轻松实现。下面以一个例子来讲解一下。&lt;/p&gt;
&lt;p&gt;首先说一下 NAT 的两种术语：SNAT 和 DNAT。SNAT的意思就是 source NAT，也就是我们访问其他网站，作为 TCP 链接的来源。而 DNAT 就是 destination NAT，也就是我们作为服务器，作为 TCP 链接的重点。在这里我们要实现的是内网上网，而不是内网提供服务，所以我们只需要 SNAT 就好了。&lt;/p&gt;
&lt;p&gt;假设我们有三台服务器，在一个内网中，分别是：10.1.1.1, 10.1.1.2, 10.1.1.3。其中 10.1.1.1 绑定了外网IP可以上网。这里要说明的是：阿里云的弹性 IP 实际上是一个“伪IP”，也就是并没有真的绑定到我们的主机上，而是通过 SNAT 和 DNAT 的方式来模拟了绑定IP的行为。可以通过 &lt;code&gt;ip addr show&lt;/code&gt; 命令验证一下，并没用弹性 IP 的任何信息。&lt;/p&gt;
&lt;p&gt;阿里云内网必须建立一个虚拟交换机来连接各个主机，在后台我们可以配置这个主机的路由表。为了实现让 10.1.1.1 作为出口的功能，我们配置交换机的路由表，添加如下一行：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://ws2.sinaimg.cn/large/006tNc79ly1ftbtme2354j319m0eo3zv.jpg"&gt;&lt;/p&gt;
&lt;p&gt;把所有的流量都转发到 10.1.1.1&lt;/p&gt;
&lt;p&gt;然后，在 10.1.1.1 上执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo 1 &amp;gt; /proc/sys/net/ipv4/ip_forward   # 打开转发功能

# 所有来自10.0.0.0/8 的流量通过 eth0 发出
iptables -t nat -A POSTROUTING -s 10.0.0.0/8 -o eth0 -j MASQUERADE

iptables -A FORWARD -d 10.0.0.0/8 -j ACCEPT # 有人说需要这两句，但是亲测这两句不需要，但是也不知道什么意思
iptables -A FORWARD -s 10.0.0.0/8 -j ACCEPT
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这时候在 10.1.1.2 上就可以上网了&lt;/p&gt;
&lt;p&gt;说在最后：自己搭建DNAT/SNAT只能单机，无法做到高可用，因为阿里云不给我们提供VIP。如果你考虑构建高可用的私有云，还是直接购买阿里云的负载均衡+NAT网关吧，它们分别对应DNAT和SNAT，但是可靠性更高。&lt;/p&gt;
&lt;p&gt;参考：https://yuerblog.cc/2017/03/25/vpc-in-aliyun/&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 16 Jul 2018 08:14:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-07-16:/posts/zai-a-li-yun-shang-wei-nei-wang-vpcda-jian-natchu-kou-fu-wu-qi.html</guid><category>后端</category><category>计算机</category></item><item><title>redis 中如何给集合中的元素设置 TTL</title><link>/posts/redis-zhong-ru-he-gei-ji-he-zhong-de-yuan-su-she-zhi-ttl.html</link><description>&lt;p&gt;我们知道在 redis 中可以给每个 key 设置过期时间（TTL），但是没法为每个集合中的每一个元素设置过期时间，可以使用zset来实现这个效果。&lt;/p&gt;
&lt;p&gt;直接上代码吧，Python 版的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;RedisSet&lt;/span&gt;:

    &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;StrictRedis&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ttl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;把过期时间作为&lt;/span&gt; &lt;span class="nx"&gt;score&lt;/span&gt; &lt;span class="err"&gt;添加到&lt;/span&gt; &lt;span class="nx"&gt;zset&lt;/span&gt; &lt;span class="err"&gt;中&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;zadd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;ttl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;删除已经过期的元素&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;zremrangebyscore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;+inf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;getall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;只读取还没有过期的元素&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;zrangebyscore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-inf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考：https://github.com/antirez/redis/issues/135&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 16 Jul 2018 07:54:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-07-16:/posts/redis-zhong-ru-he-gei-ji-he-zhong-de-yuan-su-she-zhi-ttl.html</guid><category>数据库</category><category>计算机</category></item><item><title>一篇简单的 Python gRPC 教程</title><link>/posts/yi-pian-jian-dan-de-python-grpc-jiao-cheng.html</link><description>&lt;h1&gt;安装&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install grpcio grpcio-tools protobuf googleapis-common-protos
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;IDL&lt;/h1&gt;
&lt;p&gt;grpc 使用 protobuf 来定义接口。按照 protobuf 的 &lt;a href="https://developers.google.com/protocol-buffers/docs/style"&gt;Style Guide&lt;/a&gt; 的要求，service 和其中的方法都应该使用 CamelCase。&lt;/p&gt;
&lt;p&gt;service 关键字定义一个服务，相当于一个接口。把下面的文件保存为 helloworld.proto&lt;/p&gt;
&lt;p&gt;需要注意的是，grpc 中的方法只能接受一个参数，返回一个参数。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// The greeter service definition.
service Greeter {
  // Sends a greeting
  rpc SayHello (HelloRequest) returns (HelloReply) {}
}

// The request message containing the user&amp;#39;s name.
message HelloRequest {
  string name = 1;
}

// The response message containing the greetings
message HelloResponse {
  string message = 1;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;生成 rpc 代码&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python -m grpc_tools.protoc  --python_out=. --grpc_python_out=. helloworld.proto
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;生成了两个文件:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;helloworld_pb2，包含了 protobuf 中结构的定义&lt;/li&gt;
&lt;li&gt;helloworld_pb2_grpc, 包含了 protobuf grpc 接口的定义&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;实现 rpc 服务&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;current.futures&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ThreadPoolExecutor&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;helloworld_pb2&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HelloRepsonse&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;helloworld_pb2_grpc&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;GreeterServicer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;add_GreeterServicer_to_server&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Greeter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GreeterServicer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;SayHello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HelloResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;!&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;SayHelloAgain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HelloResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello again, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;!&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;serve&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;grpc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;futures&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ThreadPoolExecutor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_workers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;add_GreeterServicer_to_server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Greeter&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_insecure_port&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;[::]:50051&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_ONE_DAY_IN_SECONDS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;KeyboardInterrupt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;客户端调用&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;grpc&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;helloworld_pb2&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HelloRequest&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;helloworld_pb2_grpc&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;GreeterStub&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# NOTE(gRPC Python Team): .close() is possible on a channel and should be&lt;/span&gt;
    &lt;span class="c1"&gt;# used in circumstances in which the with statement does not fit the needs&lt;/span&gt;
    &lt;span class="c1"&gt;# of the code.&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;grpc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insecure_channel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;localhost:50051&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;stub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GreeterStub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stub&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SayHello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HelloRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;you&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Greeter client received: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;高级话题&lt;/h1&gt;
&lt;p&gt;stream&lt;/p&gt;
&lt;p&gt;未完待续&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;[A simplified guide to gRPC in Python](&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sun, 15 Jul 2018 05:22:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-07-15:/posts/yi-pian-jian-dan-de-python-grpc-jiao-cheng.html</guid><category>后端</category><category>计算机</category></item><item><title>Go语言读写文件相关函数对比</title><link>/posts/goyu-yan-du-xie-wen-jian-xiang-guan-han-shu-dui-bi.html</link><description>&lt;h1&gt;文件 IO&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;io.Reader&lt;/code&gt; 和 &lt;code&gt;io.Writer&lt;/code&gt;。这两个是两个特别重要的 interface。一般来说凡是可以抽象为输入的 IO 操作都会使用 io.Reader。凡是可以抽象为输出的 IO 操作都会使用 io.Writer。&lt;/p&gt;
&lt;h1&gt;io/ioutil&lt;/h1&gt;
&lt;p&gt;对于配置文件等等比较小的常规文件，一般来说我们可以使用 io/ioutil 包中的辅助函数操作就好了，比较快捷方便。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;函数签名&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;func NopCloser(r io.Reader) io.ReadCloser&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;把 io.Reader 包装成一个 io.ReadWriter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;func ReadAll(r io.Reader) ([]byte, error)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;读取所有字符，成功的话 err == nil&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;func ReadDir(dirname string) ([]os.FileInfo, error)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;读取当前目录的所有文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;func ReadFile(filename string) ([]byte, error)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;读取文件的所有内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;func TempDir(dir, prefix string) (name string, err error)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;创建临时目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;func TempFile(dir, prefix string) (f *os.File, err error)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;创建临时文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;func WriteFile(filename string, data []byte, perm os.FileMode) error&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;写入文件&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;对于比较大的文件，直接使用 &lt;code&gt;ioutil.ReadFile&lt;/code&gt; 读到内存里显然是不现实的，这时候应该使用 &lt;code&gt;os&lt;/code&gt; 模块中的函数。&lt;/p&gt;
&lt;h2&gt;文件操作&lt;/h2&gt;
&lt;p&gt;其他语言中一般统一通过 open(filename, rw) 这个函数来打开文件，而 golang 中有所
不同，一般来说是通过 os.Open(filename) 打开文件用于读取，使用 os.Create(filename) 
打开文件用于写入。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sun, 15 Jul 2018 05:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-07-15:/posts/goyu-yan-du-xie-wen-jian-xiang-guan-han-shu-dui-bi.html</guid><category>golang</category><category>编程语言</category><category>计算机</category></item><item><title>Go语言处理 CSV 文件</title><link>/posts/goyu-yan-chu-li-csv-wen-jian.html</link><description>&lt;p&gt;在 Go 语言中可以使用 &lt;code&gt;encoding/csv&lt;/code&gt; 包来处理 csv 文件。&lt;/p&gt;
&lt;p&gt;csv 包中主要有两个 struct，Reader 和 Writer。Reader 从一个 io.Reader
中读取每一行的内容，同时提供了一些设置的选项。Writer 用来写入 csv 文件。&lt;/p&gt;
&lt;h1&gt;Reader&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;r := csv.NewReader(strings.NewReader(in))

for {
    record, err := r.Read()
    if err == io.EOF {
        break
    }
    if err != nil {
        log.Fatal(err)
    }

    fmt.Println(record)
}
&lt;/pre&gt;&lt;/div&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;函数签名&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;func NewReader(r io.Reader) *Reader&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;func (r *Reader) Read() (record []string, err error)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回 []string 类型数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;func (r *Reader) ReadAll() (records [][]string, err error)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;直接返回所有数据&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1&gt;Writer&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;records := [][]string{
    {&amp;quot;first_name&amp;quot;, &amp;quot;last_name&amp;quot;, &amp;quot;username&amp;quot;},
    {&amp;quot;Rob&amp;quot;, &amp;quot;Pike&amp;quot;, &amp;quot;rob&amp;quot;},
    {&amp;quot;Ken&amp;quot;, &amp;quot;Thompson&amp;quot;, &amp;quot;ken&amp;quot;},
    {&amp;quot;Robert&amp;quot;, &amp;quot;Griesemer&amp;quot;, &amp;quot;gri&amp;quot;},
}

w := csv.NewWriter(os.Stdout)

for _, record := range records {
    if err := w.Write(record); err != nil {
        log.Fatalln(&amp;quot;error writing record to csv:&amp;quot;, err)
    }
}

// Write any buffered data to the underlying writer (standard output).
w.Flush()

if err := w.Error(); err != nil {
    log.Fatal(err)
}
&lt;/pre&gt;&lt;/div&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;函数签名&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;func NewWriter(w io.Writer) *Writer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;func (w *Writer) Error() error&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;func (w *Writer) Flush()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;func (w *Writer) Write(record []string) error&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;func (w *Writer) WriteAll(records [][]string) error&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sun, 15 Jul 2018 04:59:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-07-15:/posts/goyu-yan-chu-li-csv-wen-jian.html</guid><category>golang</category><category>编程语言</category><category>计算机</category></item><item><title>知乎移动端接口分析</title><link>/posts/zhi-hu-yi-dong-duan-jie-kou-fen-xi.html</link><description>&lt;p&gt;最近想注册一些知乎的机器人玩玩儿，比如给自己点赞之类的，通过抓包分析，获得了完整注册登录流程。&lt;/p&gt;
&lt;h1&gt;抓包&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1 POST https://api.zhihu.com/auth/digits
      ← 401 application/json 97b 246ms
2 GET https://api.zhihu.com/captcha
     ← 200 application/json 22b 233ms
3 PUT https://api.zhihu.com/captcha
     ← 202 application/json 5.46k 323ms
4 POST https://api.zhihu.com/captcha
      ← 201 application/json 16b 295ms
5 POST https://api.zhihu.com/sms/digits
      ← 201 application/json 16b 353ms
6 POST https://api.zhihu.com/validate/digits
      ← 201 application/json 16b 409ms
7 POST https://api.zhihu.com/validate/register_form
      ← 200 application/json 16b 279ms
8 POST https://api.zhihu.com/register
      ← 201 application/json 761b 529ms
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;逐行分析一下每个包:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;这个请求发送了 &lt;code&gt;username: +86155xxxxxxxx&lt;/code&gt; 请求，然后返回了 &lt;code&gt;缺少验证码票据&lt;/code&gt;，应该是表示缺少验证码。&lt;/li&gt;
&lt;li&gt;应该不是请求验证码，而是请求是否需要验证码，返回了&lt;code&gt;"show_captcha": false&lt;/code&gt;，虽然表示的是不需要验证码，但是还是弹出了验证码，奇怪。&lt;/li&gt;
&lt;li&gt;注意这个请求是 PUT，POST 参数&lt;code&gt;height: 60, width: 240&lt;/code&gt;。然后返回了验证码：&lt;code&gt;{"img_base64": ...}&lt;/code&gt;, base64 解码后就是验证码&lt;/li&gt;
&lt;li&gt;这一步 POST 正确的 captcha 并通过验证，参数是：&lt;code&gt;input_text: nxa8&lt;/code&gt;, 返回是：&lt;code&gt;{ "success": true }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;这一步请求发送短信验证码，POST 参数是：&lt;code&gt;phone_no: +86155xxxxxxxx&lt;/code&gt;, 发挥是：&lt;code&gt;{ "success": true }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;提交验证码，POST 参数是: &lt;code&gt;phone_no: +86155xxxxxxxx, digits: xxxxxx&lt;/code&gt;， 返回是：&lt;code&gt;{ "success": true }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;填写用户信息，POST 参数是：&lt;code&gt;phone_no: +86155xxxxxxxx, gender: 0, fullname: XXX&lt;/code&gt;,返回是：&lt;code&gt;{ "success": true }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;上一步注册了用户，这一步是向知乎请求新的 access token。&lt;/p&gt;
&lt;p&gt;请求 POST 参数：
&lt;code&gt;digits:        865405
fullname:      Lucindai
phone_no:      +8615568995304
register_type: phone_digits&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;返回数据如下：
&lt;code&gt;{
"access_token": "...",
"cookie": { },
"expires_in": 2592000,
"lock_in": 1800,
"old_id": 155681178,
"refresh_token": "...",
"token_type": "bearer",
"uid": "...",
"unlock_ticket": "...",
"user_id":...
}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其中的 refresh token 和 access token 都是 OAuth2 中的参数，可以用于使用 OAuth2 访问知乎的 API。可以使用 zhihu_oauth 这个库来访问知乎。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;知乎的 API 还需要在 header 中设定一些特殊参数，可以参考 zhihu_oauth 中的参数&lt;/p&gt;
&lt;p&gt;再注册成功之后还应该设定密码，这样之后就可以使用密码登录了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;PUT https://api.zhihu.com/account/password
new_password=xxxxxx
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sun, 15 Jul 2018 04:58:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-07-15:/posts/zhi-hu-yi-dong-duan-jie-kou-fen-xi.html</guid><category>计算机</category><category>爬虫</category></item><item><title>炒股记</title><link>/posts/chao-gu-ji.html</link><description>&lt;p&gt;老婆总是念叨着要炒股，经过一番科学分析，刚开始还赚了几千。不过因为听信了塑料姐妹花的传言，买了几只传说要疯长的股票，把赚进来的全都赔了回去。天天看着被套牢很烦，然后她把账户给了我。&lt;/p&gt;
&lt;p&gt;这个故事告诉我们，不要相信所谓的内部消息，要自己分析才好。&lt;/p&gt;
&lt;p&gt;A 股没有什么互联网企业。&lt;/p&gt;
&lt;p&gt;A 股的白色家电股票不错，包括了格力、美的、海尔。其中格力因为没有分红导致股票暴跌，应该很快就会恢复原来的价格。美的收购了德国的工业机器人公司，长期看好。&lt;/p&gt;
&lt;p&gt;京东方A 作为政府扶持的液晶面板公司，应该业绩不会很差。&lt;/p&gt;
&lt;p&gt;紫光的 RAM 生产线不知道何时才能下线，应该时刻关注相关新闻&lt;/p&gt;
&lt;p&gt;海天酱油作为行业的龙头，近几年发展一直不错，看好。&lt;/p&gt;
&lt;p&gt;汽车板块也值得关注。&lt;/p&gt;
&lt;p&gt;之前一直觉得像是"XX要搞AI，为了提升股价"这种新闻都感觉很假，但是现在发现的确是这样的，对于不了解行业的小白来说，站上这些名词的确好像显得公司有前途，所以小白活该被套啊。这也提醒我们，不要碰自己不了解或者没有研究过的行业。&lt;/p&gt;
&lt;p&gt;要买长期看好的股票，这样如果上涨的话当然最好，即使短暂下跌，也可以有解套的机会。&lt;/p&gt;
&lt;p&gt;2018-11-28 更新&lt;/p&gt;
&lt;p&gt;狗日的贸易战啊，你妹的川普&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sun, 15 Jul 2018 04:43:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-07-15:/posts/chao-gu-ji.html</guid><category>生活</category></item><item><title>OAuth2 协议详解</title><link>/posts/oauth2-xie-yi-xiang-jie.html</link><description>&lt;p&gt;今天有个项目需要用到 OAuth2 来处理一些东西，然而中文互联网有时候真是很难找到像样的文档，搜索 “OAuth 教程” 的到排名前两位的&lt;a href="https://aaronparecki.com/oauth-2-simplified/"&gt;教&lt;/a&gt;&lt;a href="https://aaronparecki.com/oauth-2-simplified/"&gt;程&lt;/a&gt;都是翻译自一个英文教程，翻译质量奇差无比就不说了，这个英文教程本身就是有问题的，无奈只好搜索 “OAuth tutorial” 才找到几个看得过去的英文教程，总结一下放在这里，算是为中文互联网引入一些正确的知识。&lt;/p&gt;
&lt;p&gt;看到 OAuth2 这个词，一般人肯定会想，是不是还有个 OAuth 1 协议呢？是的，有 OAuth 1 协议，但是因为协议搞得太复杂了，所以没人用，市面上的基本都是根据 OAuth 2 来的。既然实际只有一个 OAuth，以下就简称 OAuth 了。&lt;/p&gt;
&lt;h1&gt;为什么要使用 OAuth —— 一个例子&lt;/h1&gt;
&lt;p&gt;大家最熟悉的例子就是第三方登录了。假设有个论坛叫做“91论坛”你没有注册过，也懒得填写邮箱，然后验证邮箱注册，那么这时候可以使用 QQ 登录，当然国外可能是 Facebook。那么问题来了，当你点击 “用 QQ 登录” 这个按钮的时候，论坛怎么安全地知道你使用的是哪个 QQ 号呢？会有下面几个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果你随便输入一个 QQ 号，然后91论坛就信任了，那么你就可以伪造任意的 QQ 用户了，所以论坛需要去向 QQ 验证你是否是你提供的 QQ 号的所有者。&lt;/li&gt;
&lt;li&gt;你可以提供给论坛你的 QQ 号和密码，这样论坛使用你的 QQ 号和密码测试一下能否登录就可以了，但是这样论坛就有了你QQ号的所有权限，如果论坛偷偷在你的 QQ 空间发推广消息呢？所以你不希望直接把 QQ 号和密码都告诉论坛。&lt;/li&gt;
&lt;li&gt;现在陷入了两难境界，论坛无法信任你只提供 QQ 号，你也不能信任论坛拿走你的账户密码。如果这时候能让 QQ 作为中间人只提供给论坛部分信息就好了，OAuth 就是用来做这个的。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;OAuth2&lt;/h1&gt;
&lt;p&gt;简单来说，方案如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;91 论坛在QQ上注册一个app&lt;/li&gt;
&lt;li&gt;用户在QQ上登录，通过跳转，把一个一次性授权码给 91 论坛&lt;/li&gt;
&lt;li&gt;论坛利用这个授权码获得 access token，然后利用这个 token 读取用户信息&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;具体解决方案如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;91论坛的开发者在 QQ 处申请一个开发者账户，获得一个开发者标识，并提供了一个回调接口：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{
    'client_id': 91bbs,
    'client_secret': 123456,
    'callback': "http://91bbs.com/login_callback"
}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你在91论坛上点击用 QQ 登录，然后页面跳转到 QQ 域(qq.com)下，这样你可以安全的输入 QQ 密码，而不用被91论坛知道。&lt;/p&gt;
&lt;p&gt;用 QQ 登录对应的地址：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://api.qq.com/v1/auth?
response_type=code&amp;amp;
client_id=91bbs&amp;amp;
callback=http://91bbs.com/login_callback&amp;amp;
scope=read&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;注意其中标识了论坛在上一步 client_id。在这个页面上可能写着你是否授权XX论坛访问你的个人信息等等。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;response_type 表示授权的类型，后面会讲到&lt;/li&gt;
&lt;li&gt;client_id 向 QQ 表明是要登录91论坛这个网站&lt;/li&gt;
&lt;li&gt;callback 指明了下一步QQ要回调91论坛的地址&lt;/li&gt;
&lt;li&gt;scope 指定了当前授权的权限范围&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;登录QQ后，点击授权通过，然后 QQ 会把你重定向到 redirect_uri 对应的页面，并附加参数 code=xxx，这个是一个临时的一次性授权码。&lt;/p&gt;
&lt;p&gt;重定向到的页面：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;http://91bbs.com/login_callback&amp;amp;code=xxxxxx&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;访问这个页面，就会把这个 code 传递给91论坛，但是91论坛有了这个 code 还不能直接向 QQ 询问关于你的具体信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;91论坛使用这个 code 向 QQ 申请一个 access token，使用这个 access token 就可以获取你的 QQ 号等信息，具体获得什么信息，是在第二步的 scope 页面指定的。&lt;/p&gt;
&lt;p&gt;访问：
&lt;code&gt;POST https://api.qq.com/v1/token
grant_type=authorization_code&amp;amp;
code=AUTH_CODE_HERE&amp;amp;
redirect_uri=REDIRECT_URI&amp;amp;
client_id=CLIENT_ID&amp;amp;
client_secret=CLIENT_SECRET&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;注意其中的参数：
1. grant_type 指定了授权的类型，这里我们使用上一步获得的 authorization code 来获取 access token，所以grant type 就是 authorization code
2. code 就是上一步获得的 authorization code
3. 其他参数和上一步类似&lt;/p&gt;
&lt;p&gt;QQ 返回给 91 论坛的信息：
&lt;code&gt;{
    "access_token":"ACCESS_TOKEN",
    "token_type":"bearer",
    "expires_in":2592000,
    "refresh_token":"REFRESH_TOKEN",
    "scope":"read",
}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;因为这个 access token 可以随时用来访问你的信息，所以设定了过期时间，这样即使泄露了攻击的时间窗口也不会很长。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;91论坛使用 access token 访问你的信息。access token 通常是放在 &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization"&gt;Authorization&lt;/a&gt; 这个 header 中。&lt;/p&gt;
&lt;p&gt;比如使用 curl 来表示这个访问：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;curl -H 'Authorization: Bearer 1.1Zgwxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx=' \
'http://api.qq.com/v1/user/123456'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果 token 正确无误的话，QQ 服务器会返回相应的信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;论坛根据从 QQ 服务器得到的消息，从而知道你真的是 QQ 为 123456 的用户，然后为你创建账户。以后你需要登录也可以重复上面的流程，证明你的确是 QQ 123456 的用户就可以了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;OAuth 中的术语&lt;/h1&gt;
&lt;p&gt;在上面的过程中，一共出现了四中角色：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第三方程序，也就是 91论坛&lt;/li&gt;
&lt;li&gt;资源所有人，也就是用户&lt;/li&gt;
&lt;li&gt;授权服务器，也就是 QQ&lt;/li&gt;
&lt;li&gt;资源服务器，还是 QQ&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其中资源指的就是用户的 QQ 信息，而授权服务器和资源服务器在复杂的结构中往往是分开的。&lt;/p&gt;
&lt;h1&gt;其他的授权类型&lt;/h1&gt;
&lt;p&gt;除了上面说过授权类型之外，还有一些微小差异的授权类型，比如 implict 授权，这里不再赘述。&lt;/p&gt;
&lt;p&gt;除此之外，还可以直接使用账户密码获得 access token，方法比较简单，一般用于官方客户端直接登录：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;POST https://api.authorization-server.com/token
  grant_type=password&amp;amp;
  username=USERNAME&amp;amp;
  password=PASSWORD&amp;amp;
  client_id=CLIENT_ID
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当 access token 过期后，还可以使用 refresh token 刷新，获得新的有效的 access token，而不需要用户再次登录。虽然 refresh token 没有过期时间，或者过期时间远比 access token 长，但是因为使用次数少，所以也是相对比较安全的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;POST https://cloud.digitalocean.com/v1/oauth/token?
grant_type=refresh_token&amp;amp;
client_id=CLIENT_ID&amp;amp;
client_secret=CLIENT_SECRET&amp;amp;
refresh_token=REFRESH_TOKEN
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;参考&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://aaronparecki.com/oauth-2-simplified/"&gt;OAuth2 Simplified&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2"&gt;Introduction to OAuth2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@bantic/more-oauth-2-0-surprises-the-refresh-token-1831d71f4af6"&gt;Refresh token&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sun, 15 Jul 2018 04:41:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-07-15:/posts/oauth2-xie-yi-xiang-jie.html</guid><category>HTTP</category><category>计算机</category><category>网络</category></item><item><title>消息队列：从一脸懵逼到 Kafka</title><link>/posts/xiao-xi-dui-lie-cong-yi-lian-meng-bi-dao-kafka.html</link><description>&lt;p&gt;消息队列是分布式系统中分离解耦、削峰填谷、横向扩展的一个利器。而其中尤其以 kafka 为代表，在性能等各方面都很出众。&lt;/p&gt;
&lt;p&gt;Kafka 使用 ZK 作为协调器，原生支持集群。每条消息有一个 &lt;key, value, timestamp&gt; 组成。&lt;/p&gt;
&lt;p&gt;每个 partition 可以有多台机器，其中的 leader 负责所有读写，而 follower 复制 leader 的所有操作。如果 leader 挂了， follower 就会顶上去。生产者既可以使用 RR 这些算法来往不同的 partition 发东西，做负载均衡，也可以按照某些业务规则，发到指定的 partition。&lt;/p&gt;
&lt;p&gt;消息队列有两种模型，Queue 和 PubSub。Kafka 通过 Consumer Group 这个概念很好地解决了这个问题&lt;/p&gt;
&lt;h1&gt;术语&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Term&lt;/th&gt;
&lt;th&gt;Explain&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Broker&lt;/td&gt;
&lt;td&gt;Kafka 集群中的机器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Topic&lt;/td&gt;
&lt;td&gt;不同的消息队列&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Partition&lt;/td&gt;
&lt;td&gt;每个 topic 被分成不同的分区&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Producer&lt;/td&gt;
&lt;td&gt;生产者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Consumer&lt;/td&gt;
&lt;td&gt;消费者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Consumer Group&lt;/td&gt;
&lt;td&gt;消费组，每个消费组对于同一条消息，只消费一次&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1&gt;Basics&lt;/h1&gt;
&lt;p&gt;Kafka 非常强大，基本实现了一个后端工程师对消息队列的所有幻想。excat once 语义、消息是基本有序的、可以回放消息（rewind）。唯一的一个致命缺点是：部署实在太复杂了，不光是要依赖 zookeeper，而且还有其他负载的部署步骤。另外 kafka 对内存的需求不小，官方建议不要小于 32G，不过对于企业来说这也不是什么问题。&lt;/p&gt;
&lt;p&gt;虽然 kafka 本身能够做到 exactly once 语义，&lt;/p&gt;
&lt;p&gt;Like many publish-subscribe messaging systems, Kafka maintains feeds of messages
in topics. Producers write data to topics and consumers read from topics. Since
Kafka is a distributed system, topics are partitioned and replicated across
multiple nodes.[1]&lt;/p&gt;
&lt;p&gt;What makes Kafka unique is that Kafka treats each topic partition as a log (an
ordered set of messages). Messages are stored as file in each partition and new
messages are appended to the file, which is very fast op for hard disk(even
faster than RAM access).&lt;/p&gt;
&lt;p&gt;Kafka retains all messages for a set amount of time, and consumers are
responsible to track their location in each log. Consequently, Kafka can support
a large number of consumers and retain large amounts of data with very little
overhead. Thus, consumers can rewind to a old message, which is very useful in
practice.&lt;/p&gt;
&lt;p&gt;There is no message ids in kafka, message is identified by offset. messages are
appended to each partition. Hard dist appendation can be veri fast, even faster
than RAM access, which is why kafka&lt;/p&gt;
&lt;p&gt;messages with the same key are sent to the same partition&lt;/p&gt;
&lt;h1&gt;Consumer Group&lt;/h1&gt;
&lt;p&gt;kafka implements broadcast and unicast by Consumer Group. If one message is
consumed by only one consumer, then it's a unicast, otherwise, it's a broadcast.&lt;/p&gt;
&lt;p&gt;offsets in one partition are stored in ZooKeeper. each Consumer Group has its
own offset. Consumer Group are globally in Kafka, not constrained to one topic.
by default, a consumer is in the default group.&lt;/p&gt;
&lt;p&gt;each message can be consumed only once for one consumer group.&lt;/p&gt;
&lt;p&gt;messages in partitions are not equally distributed to each consumer, they are
just simply fixed to one consumer. which is easy to implement and more
efficient.&lt;/p&gt;
&lt;h1&gt;Python 客户端&lt;/h1&gt;
&lt;p&gt;使用 confluent-python-kafka。性能最好，而且是官方客户端。Kafka-python 这个库可能丢消息。&lt;/p&gt;
&lt;h1&gt;管理工具&lt;/h1&gt;
&lt;p&gt;使用命令行管理 Kafka 功能最全面也最强大，但是因为命令不常用，所以也要经常查文档。而图形界面虽然不是很高效，但是对于偶尔使用来说，还是最方便的。&lt;/p&gt;
&lt;h1&gt;Q&amp;amp;A&lt;/h1&gt;
&lt;h2&gt;kafka 中可以有成千上万的 topic 吗？&lt;/h2&gt;
&lt;p&gt;不可以。因为 leader 选举的一些限制，上万都不可能。最好的方式实在 topic 中分 partition。分 partition 又是静态的。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;https://stackoverflow.com/questions/32950503/can-i-have-100s-of-thousands-of-topics-in-a-kafka-cluser&lt;/li&gt;
&lt;li&gt;https://grokbase.com/t/kafka/users/133v60ng6v/limit-on-number-of-kafka-topic&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Kafka 为什么这么快？&lt;/h2&gt;
&lt;p&gt;硬盘顺序读写可以达到 600 MiB/s 的速度，而随机读写只有 100 KiB/s，也就是说 6000 倍的差距。甚至于顺序读写比内存访问还要快。&lt;/p&gt;
&lt;p&gt;使用 sendfile 可以使数据直接从 page cache 发送到网卡，避免了拷贝到用户空间的开销。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;https://kafka.apache.org/documentation/#design_filesystem&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;push vs pull&lt;/h2&gt;
&lt;p&gt;Push 指的是 broker 向消费端推送消息，而 pull 指的是消费者主动从 Consumer 中拉取消息。Kafka 采用了 pull 模型。如果消费者处理不过来了就堆在 Kafka 中，当处理能力跟上来了再主动追上就好了。&lt;/p&gt;
&lt;h1&gt;其他&lt;/h1&gt;
&lt;h2&gt;nsq&lt;/h2&gt;
&lt;p&gt;topic: 发布消息的管道，第一次向某个topic发消息就会创建它.
channel: 消费消息的管道，一个 topic 可以对应几个 channel，每份消息都会复制到每个channel 中
message：消息&lt;/p&gt;
&lt;p&gt;nsq 建议 co-location 的部署，也就是在每个发送nsq消息的机器上部署一个 nsqd&lt;/p&gt;
&lt;h2&gt;nsq 的缺点&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;消息不是 exact once，可能有重复消息&lt;/li&gt;
&lt;li&gt;消息不能保证顺序&lt;/li&gt;
&lt;li&gt;消息可能丢，没有硬盘持久化&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;redis stream&lt;/h2&gt;
&lt;p&gt;redis stream 看起来很好，但是实际上用处却不大。redis stream 虽然模仿了 kafka 的消息模型，但是 kafka 的强势在于消息堆积能力，而 redis stream 把消息放在内存里，也没有很好的 replica 机制。&lt;/p&gt;
&lt;h1&gt;Reference:&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;https://segment.com/blog/scaling-nsq/&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.cloudera.com/blog/2014/09/apache-kafka-for-beginners/"&gt;Apache Kafka for beginners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;http://lihaoquan.me/2016/6/20/using-nsq.html&lt;/li&gt;
&lt;li&gt;Kafka Tutorial https://www.tutorialspoint.com/apache_kafka/apache_kafka_basic_operations.htm&lt;/li&gt;
&lt;li&gt;http://www.infoq.com/cn/news/2015/02/nsq-distributed-message-platform&lt;/li&gt;
&lt;li&gt;https://danielmiessler.com/blog/data-processing-using-the-unix-philosophy/&lt;/li&gt;
&lt;li&gt;http://www.confluent.io/blog/apache-kafka-samza-and-the-unix-philosophy-of-distributed-data&lt;/li&gt;
&lt;li&gt;http://sookocheff.com/post/kafka/kafka-in-a-nutshell/&lt;/li&gt;
&lt;li&gt;https://www.infoq.cn/article/2017/09/kafka-python-confluent-kafka&lt;/li&gt;
&lt;li&gt;https://www.confluent.io/blog/introduction-to-apache-kafka-for-python-programmers/&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;TO READ&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;https://stackoverflow.com/questions/49276785/monitoring-ui-for-apache-kafka-kafka-manager-vs-kafka-monitor/49292872&lt;/li&gt;
&lt;li&gt;https://kafka.apache.org/quickstart&lt;/li&gt;
&lt;li&gt;https://cwiki.apache.org/confluence/display/KAFKA/Ecosystem&lt;/li&gt;
&lt;li&gt;https://zhuanlan.zhihu.com/p/37016944&lt;/li&gt;
&lt;li&gt;https://www.confluent.io/blog/introduction-to-apache-kafka-for-python-programmers/&lt;/li&gt;
&lt;li&gt;https://github.com/confluentinc/confluent-kafka-python/tree/master/examples&lt;/li&gt;
&lt;li&gt;https://docs.confluent.io/current/clients/confluent-kafka-python/&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sun, 15 Jul 2018 04:35:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-07-15:/posts/xiao-xi-dui-lie-cong-yi-lian-meng-bi-dao-kafka.html</guid><category>后端</category><category>计算机</category></item><item><title>如何破解被 JS 加密的数据</title><link>/posts/ru-he-po-jie-bei-js-jia-mi-de-shu-ju.html</link><description>&lt;p&gt;由于网页和JavaScript都是明文的，导致很多API接口都直接暴露在爬虫的眼里，所以好多
网站选择使用混淆后的 JavaScript 来加密接口。其中有分为两大类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过 JavaScript 计算一个参数或者 Cookie 作为接口的签名验证&lt;/li&gt;
&lt;li&gt;返回的数据是加密的，需要使用 JavaScript 解密&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不过总的来说，这两种加密的破解思路都是一样的。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;找到相关的网络请求。如果找不到，清空缓存，尝试触发&lt;/li&gt;
&lt;li&gt;打断点找到相关代码，可以是 ajax 断点或者 js 断点。或者直接看网络请求的
   initiator&lt;/li&gt;
&lt;li&gt;逐层分析，找到加密函数&lt;/li&gt;
&lt;li&gt;使用 node 执行js代码获得数据&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;具体步骤&lt;/h1&gt;
&lt;p&gt;有空了再写。。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://cuiqingcai.com/5024.html"&gt;中国天气质量网返回结果加密的破解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zhuanlan.zhihu.com/p/32139007"&gt;破解 Google 翻译的token&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jhao104/spider/tree/master/PyV8%E7%A0%B4%E8%A7%A3JS%E5%8A%A0%E5%AF%86Cookie"&gt;JavaScript 生成 Cookie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://liehu.tass.com.cn/archives/1016"&gt;常见加密算法&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sun, 15 Jul 2018 04:32:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-07-15:/posts/ru-he-po-jie-bei-js-jia-mi-de-shu-ju.html</guid><category>计算机</category><category>爬虫</category></item><item><title>市面上的一些 RSS 工具</title><link>/posts/shi-mian-shang-de-yi-xie-rss-gong-ju.html</link><description>&lt;p&gt;YN: 总的来说，RSS 是一个小众的工具，也不会大众化，所以适合高端用户，付费使用。
另外对于 RSS 来说，阅读一些娱乐化的东西没有任何意义，但是对于比如说使用印象笔记的用户，用处还是很大的。可以作为生产力工具&lt;/p&gt;
&lt;p&gt;phantomjscloud 还有这种网站。。&lt;/p&gt;
&lt;p&gt;现有的一些工具&lt;/p&gt;
&lt;h2&gt;生成 RSS 的工具&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/huginn/huginn"&gt;huginn&lt;/a&gt;. 类似 ifttt，中文社区也有，而且有&lt;a href="http://git.huginn.cn/docs/Huginn%E7%AE%80%E4%BB%8B.html"&gt;中文
文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://feed43.com/"&gt;feed43&lt;/a&gt;. 老牌的生成 RSS 的工具，最近界面做了改动，但是生成
RSS 需要网页源码中自己取找出模式，对于普通用户来说非常难用，对于程序员来说又很鸡
肋。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://feedity.com/"&gt;feedity&lt;/a&gt;. 提供一个可视化的界面用来选择元素，然后构建RSS，
不过生成的 RSS 是有广告的。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fivefilters.org/content-only/"&gt;fivefilters&lt;/a&gt;. 提供摘要转全文 RSS 的方法&lt;/p&gt;
&lt;p&gt;&lt;a href="https://feedex.net/"&gt;feedex&lt;/a&gt;. 有一个全文RSS 转换工具。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://feedsoso.com/about.html"&gt;feedsoso&lt;/a&gt;. 一个国产的 RSS 转全文的工具，2011年
的，不知道还能不能用了。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://kindle4rss.com/"&gt;kindle4rss&lt;/a&gt; 把rss转换成全文推送到kindle.cn邮箱中。&lt;/p&gt;
&lt;h2&gt;原生支持rss 的网站&lt;/h2&gt;
&lt;p&gt;reddit&lt;/p&gt;
&lt;h2&gt;特定网站转化为 RSS&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://diygod.me/neteasecloudmusic2rss/"&gt;网易云音乐&lt;/a&gt;，来自 diygod，有源码&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/DIYgod/bilibili2RSS"&gt;B站&lt;/a&gt;，同样来自 diygod。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://tumblr2rss.obstack.net/"&gt;tumblr&lt;/a&gt;. tumblr feed 的rss。tumblr 的博客本身
是提供rss的。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pullfeed.co/"&gt;GitHub pull requests&lt;/a&gt; 把 GitHub 的pull requests提供为rss&lt;/p&gt;
&lt;p&gt;&lt;a href="http://emails2rss.appspot.com/"&gt;邮件转rss&lt;/a&gt; 把邮件转为rss。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://rss.lilydjwg.me/"&gt;知乎转rss&lt;/a&gt;知乎专栏转为rss&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mte90.net/en/2014/06/google-groups-in-rss-feed/"&gt;Google Groups 转rss&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://jianshu.milkythinking.com/"&gt;简书专栏转rss&lt;/a&gt;貌似已经失效了&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.v2ex.com/t/132853"&gt;v2ex&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://api.izgq.net/weibo/"&gt;weibo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;twitter, hacker news, instagram 等等。&lt;/p&gt;
&lt;h2&gt;评测文章&lt;/h2&gt;
&lt;p&gt;豆瓣网友的总结，再次证明了豆瓣的 SEO 是做的多么的好。https://www.douban.com/note/522518464/&lt;/p&gt;
&lt;p&gt;appinn 也是一个很好的推广渠道&lt;/p&gt;
&lt;p&gt;一款 iOS 上的 RSS 阅读工具的评测&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sun, 15 Jul 2018 04:30:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-07-15:/posts/shi-mian-shang-de-yi-xie-rss-gong-ju.html</guid><category>创业</category><category>开始做的项目</category></item><item><title>序列化协议的选择 json vs msgpack vs thrift vs protobuf</title><link>/posts/xu-lie-hua-xie-yi-de-xuan-ze-json-vs-msgpack-vs-thrift-vs-protobuf.html</link><description>&lt;p&gt;当我们的程序需要保存一些对象到硬盘上供下次运行时使用，或者需要和其他程序交换数据
的时候，需要把对象用某种方式编程二进制字符串然后保存到硬盘上或者发送出去，这种方
法我们一般称作序列化。序列化有很多不同的方法, 一般考虑三个方面：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;速度，序列化和反序列化的速度越快越好&lt;/li&gt;
&lt;li&gt;体积，序列化之后的文件体积越小越好&lt;/li&gt;
&lt;li&gt;跨语言，序列化能够支持的语言越多越好&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面考察几种序列化的方法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;语言内置的序列化。比如 Python 的 pickle，显然这种协议只能在一种语言内部使用，
   而且对于Python来说，甚至不同版本的 pickle 协议都是不兼容的。&lt;/li&gt;
&lt;li&gt;json / xml。这两个都可以把对象序列化成人类可读的字符串的形式，但是序列化后之
   后体积都变大不少，而且性能也不好，适合于简单的场景。另外一点就是 json 不能定
   义 schema（接口规范），&lt;em&gt;在大型项目中 schema 是必须的&lt;/em&gt;。&lt;/li&gt;
&lt;li&gt;msgpack 序列化之后的体积也比较紧致，但是同样不能定义 schema。&lt;/li&gt;
&lt;li&gt;专门的序列化库。比如 protobuf/thrift。这些库都支持多个语言，需要预先定义
   schema, 并且把对象序列化成二进制的模式，性能也都不错，所以我们重点关注一下。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;考虑到需要定义接口规范，所以我们只考虑 thrift 和 protobuf 两种&lt;/p&gt;
&lt;p&gt;Thrift 的缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不支持 uint64。&lt;/li&gt;
&lt;li&gt;查过一些文档之后，发现 thrift 的性能差于 pb。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以先淘汰了 thrift。我们选择 protobuf&lt;/p&gt;
&lt;h2&gt;编译步骤放在哪里？&lt;/h2&gt;
&lt;p&gt;protobuf 和 thrift 两个的用法都是先定义 IDL（接口）文件，然后由编译器编译生成对应的语言
的代码。对于 C++ 这样的编译语言来说问题不大，我们可以把 IDL 编译的过程放到
makefile 里面去，但是对于 Python 这种没有编译的动态语言就尴尬了。具体来说，IDL
文件是需要提交到代码仓库的，但是生成的 Python 代码需不需要呢?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不提交，在运行之前多一个编译步骤，不过可以把编译这一步写到 dockerfile 里面&lt;/li&gt;
&lt;li&gt;提交，这样会造成提交的代码冗余，相当于把二进制文件提交到了仓库&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以我还是倾向于只向代码库中提交 &lt;code&gt;*.proto&lt;/code&gt; 或者 &lt;code&gt;*.thrift&lt;/code&gt; 源文件，而不提交编译过后的文件。&lt;/p&gt;
&lt;h1&gt;Protobuf&lt;/h1&gt;
&lt;h2&gt;基本语法&lt;/h2&gt;
&lt;p&gt;protobuf 现在有两个主流版本，显然 proto2 要被逐渐废弃，本文使用的是 proto3。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;syntax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;proto3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;myproject/other_protos.proto&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="n"&gt;SearchRequest&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;int32&lt;/span&gt; &lt;span class="n"&gt;page_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;int32&lt;/span&gt; &lt;span class="n"&gt;result_per_page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;enum&lt;/span&gt; &lt;span class="n"&gt;Corpus&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;UNIVERSAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;WEB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;IMAGES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;LOCAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;NEWS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;PRODUCTS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;VIDEO&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;Corpus&lt;/span&gt; &lt;span class="n"&gt;corpus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="n"&gt;SearchResponse&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;repeated&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;repeated&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;snippets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的结构和 C 语言的 struct 定义很像。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;message 关键字用于声明一个结构，后面加结构的名字&lt;/li&gt;
&lt;li&gt;protobuf 3 不支持默认值。&lt;/li&gt;
&lt;li&gt;类型。protobuf 中定义的标量类型有 double/float/int32(64)/uint32(64)/bool/string/bytes.
   其中 bytes 用来表示任意的二进制字符串&lt;/li&gt;
&lt;li&gt;序号，每个字段后面的数字表示的是序号。protobuf 用这个序号来进行高效编码，需要
   注意的是，如果要增添字段不能复用已有的序号。&lt;/li&gt;
&lt;li&gt;枚举。可以使用 enum 关键字定义枚举。枚举可以定义在 message 的外面或者里面&lt;/li&gt;
&lt;li&gt;在一个文件中可以定义多个 message。像是 enum 一样，message 也可以嵌套在另一个
   message中。比如可以把上面的 Result 嵌套在 SearchResponse 中。不过这时候再引用
   Result，需要使用 SearchResponse.Result&lt;/li&gt;
&lt;li&gt;message 中可以使用另一个 message 作为类型。&lt;/li&gt;
&lt;li&gt;使用 import 语句来引入其他的 proto 文件。这样就可以直接使用引入&lt;/li&gt;
&lt;li&gt;package 语句用来声明定义的 message 所处的命名空间（namespace)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;编译&lt;/h2&gt;
&lt;h3&gt;在 Python 中使用&lt;/h3&gt;
&lt;p&gt;ParseFromString: 从字符串中解析protobuf对象. 虽然这个方法名字中包含了string，但是实际上使用的是 bytes。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;r = SearchResponse()
r.ParseFromString(data)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;SerializeToString: 序列化成字符串。同样使用 bytes。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;data = r.SerializeToString()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;属性可以直接访问和设置，如果属性名或者类型出错会抛出异常。&lt;/p&gt;
&lt;p&gt;repeated 类型的基础类型属性可以像一个数组一样访问，map 类型可以像字典一样访问。但是赋值必须通过 append 和 extend 赋值，而不能直接赋值.&lt;/p&gt;
&lt;p&gt;repeated 类型的 message 类型不能使用 append，而必须使用 add 或者 extend 方法。这样可以确保 message 类型被拷贝进去。&lt;/p&gt;
&lt;h1&gt;REF&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;https://tech.meituan.com/serialization_vs_deserialization.html&lt;/li&gt;
&lt;li&gt;https://my.oschina.net/fir01/blog/468123&lt;/li&gt;
&lt;li&gt;http://colobu.com/2015/01/07/Protobuf-language-guide/&lt;/li&gt;
&lt;li&gt;https://developers.google.com/protocol-buffers/docs/pythontutorial&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.csdn.net/losophy/article/details/17006573"&gt;在 Python 中使用 ProtoBuf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;https://developers.google.com/protocol-buffers/docs/reference/python-generated&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sat, 14 Jul 2018 19:45:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-07-14:/posts/xu-lie-hua-xie-yi-de-xuan-ze-json-vs-msgpack-vs-thrift-vs-protobuf.html</guid><category>后端</category><category>计算机</category></item><item><title>互联网创业的方向</title><link>/posts/hu-lian-wang-chuang-ye-de-fang-xiang.html</link><description>&lt;p&gt;主要考虑团队和航道大小，如果难以看清航道，则看有无国外明显对标，如果国外有对标，也要注意区分国内外外部环境（比如 fb 和人人）&lt;/p&gt;
&lt;p&gt;制度性的腐败在于其合法性，通过对某些行业设立准入门槛，合法地把牌照输送给自己的利益相关方，比如互联网支付牌照等。&lt;/p&gt;
&lt;h1&gt;To C&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;共享经济&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;共享单车 ❌&lt;/li&gt;
&lt;li&gt;共享充电宝 ❌&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;O2O&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;美团&lt;/li&gt;
&lt;li&gt;58&lt;/li&gt;
&lt;li&gt;外卖&lt;ul&gt;
&lt;li&gt;美团外卖&lt;/li&gt;
&lt;li&gt;饿了么&lt;/li&gt;
&lt;li&gt;滴滴外卖 ❌已据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AI&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Face++&lt;/li&gt;
&lt;li&gt;商汤&lt;/li&gt;
&lt;li&gt;第四范式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;VR ❌不看好&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;互联网金融&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;区块链 ❌（全是骗子）&lt;/li&gt;
&lt;li&gt;P2P ❌（全是骗子）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基本都是骗子&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;电商&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;综合电商&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C2C 淘宝&lt;/li&gt;
&lt;li&gt;B2C 京东&lt;/li&gt;
&lt;li&gt;微信电商&lt;ul&gt;
&lt;li&gt;拼多多&lt;/li&gt;
&lt;li&gt;趣店&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;女性购物社区&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;小红书&lt;/li&gt;
&lt;li&gt;聚美优品&lt;/li&gt;
&lt;li&gt;美丽说&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生鲜&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二手 ❌成本太高，不看好&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;咸鱼&lt;/li&gt;
&lt;li&gt;转转&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二手车&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;人人车&lt;/li&gt;
&lt;li&gt;瓜子&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在线医疗&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;社区&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;春雨医生&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;女性社区&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大姨妈&lt;/li&gt;
&lt;li&gt;美柚&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内容社区&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网络文学 ❌（市场太小）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;房产&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;二手房&lt;ul&gt;
&lt;li&gt;链家&lt;/li&gt;
&lt;li&gt;贝壳&lt;/li&gt;
&lt;li&gt;诸葛找房&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;租房&lt;ul&gt;
&lt;li&gt;蘑菇租房&lt;/li&gt;
&lt;li&gt;豆瓣租房&lt;/li&gt;
&lt;li&gt;58&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;公寓管理&lt;ul&gt;
&lt;li&gt;水滴管家&lt;/li&gt;
&lt;li&gt;寓小二&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在线教育&lt;/p&gt;
&lt;p&gt;在线教育应该增长很快，但是新东方、好未来、沪江都老牌公司已经发展多年，很难再有大的突破。重点关注有全新模式的新公司。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;猿题库&lt;/li&gt;
&lt;li&gt;vipkid&lt;/li&gt;
&lt;li&gt;沪江网&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;知识付费 ❌ 全都是智商税&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;泛视频&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;长视频&lt;/li&gt;
&lt;li&gt;短视频&lt;/li&gt;
&lt;li&gt;直播&lt;ul&gt;
&lt;li&gt;秀场直播&lt;/li&gt;
&lt;li&gt;游戏直播&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在线音乐&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;社交&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;熟人社交&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;微信&lt;/li&gt;
&lt;li&gt;QQ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;陌生人社交&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;陌陌&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;相亲 ❌（全是骗子）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;社区、论坛&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;贴吧&lt;/li&gt;
&lt;li&gt;豆瓣&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内容分发&lt;/p&gt;
&lt;p&gt;赢利点一般为网络广告&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;搜索&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;百度&lt;/li&gt;
&lt;li&gt;搜狗&lt;/li&gt;
&lt;li&gt;360&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;推荐&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;头条&lt;/li&gt;
&lt;li&gt;趣头条&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;问答&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;知乎&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;硬件、物联网&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无人机&lt;/li&gt;
&lt;li&gt;平衡车&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;To B&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;互联网基础设施&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公有云&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;行业电商&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;找钢网&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;企业信息查询&lt;ul&gt;
&lt;li&gt;企查查&lt;/li&gt;
&lt;li&gt;天眼查&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;征信&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.76hui.com/info/news/413"&gt;企乐汇&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;出海&lt;/h1&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 11 Jul 2018 14:19:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-07-11:/posts/hu-lian-wang-chuang-ye-de-fang-xiang.html</guid><category>创业</category></item><item><title>Get 和 Post 方法的选择和URL的设计</title><link>/posts/get-he-post-fang-fa-de-xuan-ze-he-urlde-she-ji.html</link><description>&lt;p&gt;HTTP 中常用的方法有 GET/POST/PUT/DELETE 等，在设计API或者表单的时候我们需要选择合适的方法。一般有两种方案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;只使用 GET 和 POST，GET 主要用来读取数据，POST 用来创建或者更新数据。&lt;/li&gt;
&lt;li&gt;RESTful的方法，GET/POST/PUT/DELETE 分别用来增删改查。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;URL 的设计&lt;/h1&gt;
&lt;p&gt;为了探讨两种方案，首先我们来看一下 URL 的设计。URL 是 Universal Resource Locator 的缩写，也就是一个 URL 表示的是唯一的一个资源，所以这个资源的 id 或者说主键应该是放在 URL 路径中的。&lt;/p&gt;
&lt;p&gt;比如一个好的设计：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http://example.com/post/1234
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;不好的设计&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http://example.com/post?id=1234
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;而控制这个资源展示方式的其他字段可以作为参数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http://exmaple.com/post/1234?lang=zh&amp;amp;utm_source=google
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;HTTP 方法的含义&lt;/h1&gt;
&lt;p&gt;好多人对于 http 方法的理解是 GET 是参数在url里，而POST是参数在 body 里面，这样理解是不对的。&lt;/p&gt;
&lt;p&gt;在上述的两种方案中，GET 都是用来读取资源的，一般来说不要对资源进行任何更新操作，也就是没有副作用。比如说&lt;/p&gt;
&lt;p&gt;不好的设计：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;GET http://example.com/post/1234?action=delete
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的设计意图通过GET操作来删除一个资源，这样非常不好。比如说如果浏览器具有预缓存页面的功能，那么预先读取这个链接的时候就把对应的资源删掉了。&lt;/p&gt;
&lt;p&gt;一般来说，GET 方法还要求幂等性，也就是无论多少次操作，最终结果和操作一次都是一样的。GET 操作的参数受到 url 长度的限制，当参数超过 1k 的时候，可以使用 POST 代替。不过这时候你首先应该想一下这么多参数是不是都有用，是不是设计有问题。&lt;/p&gt;
&lt;p&gt;POST 方法可以用来创建资源，比如说：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;POST http://example.com/post/

content=xxxxxxx&amp;amp;author=xxxx&amp;amp;date=xxxx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;POST 操作具有副作用，也就是说会更改服务器上的状态。另外 POST 操作一般不是幂等的，每次 POST 操作都应该创建一个新的资源。&lt;/p&gt;
&lt;p&gt;PUT 操作用来更新资源，也是幂等的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;PUT http://example.com/post/1234

content=yyyyyy
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;DELETE 用来删除资源，值得注意的是，根据规范 DELETE 方法不能带有 body。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DELETE http://example.com/post/1234
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 10 Jul 2018 08:59:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-07-10:/posts/get-he-post-fang-fa-de-xuan-ze-he-urlde-she-ji.html</guid><category>HTTP</category><category>计算机</category><category>网络</category></item><item><title>父进程退出后如何退出子进程</title><link>/posts/fu-jin-cheng-tui-chu-hou-ru-he-tui-chu-zi-jin-cheng.html</link><description>&lt;p&gt;我们知道当子进程推出的时候，父进程会收到 SIGCHLD 信号，从而可以采取相应的操作。但是当父进程退出的时候，系统会把子进程的父进程更改为pid=0的 init 进程，而且子进程不会收到任何信号。而我们经常想在父进程退出的时候，让子进程也推出。在 Python 中可以有如下几种做法。&lt;/p&gt;
&lt;h1&gt;设置子进程为 daemon&lt;/h1&gt;
&lt;p&gt;这里的 daemon 和系统的守护进程没有任何关系，是 quit_when_parent_dies 的意思。也就是当父进程退出的时候，会自动尝试关闭 daemon=True 的子进程。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;p = multiprocessing.Process(target=foo)
p.daemon = True
p.start()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.daemon"&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;在子进程中设置 PDEATHSIG&lt;/h1&gt;
&lt;p&gt;在 Linux 中，进程可以要求内核在父进程退出的时候给自己发信号。使用系统调用 prctl。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;prctl(PR_SET_PDEATHSIG, SIGHUP);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在 Python中也有&lt;a href="https://github.com/seveas/python-prctl"&gt;对应的包 python-prctl&lt;/a&gt;，可以在&lt;strong&gt;子进程&lt;/strong&gt;中这样使用，这样在父进程挂掉的时候，子进程就会收到 SIGHUP 信号：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# apt-get install build-essential libcap-dev&lt;/span&gt;
&lt;span class="c1"&gt;# pip install python-prctl&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;signal&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;prctl&lt;/span&gt;

&lt;span class="n"&gt;prctl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_pdeathsig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGHUP&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;缺点：只支持 linux&lt;/p&gt;
&lt;h1&gt;父进程在终止的时候回收子进程&lt;/h1&gt;
&lt;p&gt;可以使用 atexit.register 在主进程中注册代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# pip install psutil&lt;/span&gt;


&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;psutil&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;atexit&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;signal&lt;/span&gt;

&lt;span class="nd"&gt;@atexit.register&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;kill_children&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;quitting, press Ctrl-C to force quit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;current_process&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;children&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recursive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Child pid is {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGTERM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用 atexit 在&lt;a href="http://yifei.me/note/558"&gt;收到 SIGTERM 的时候并不能触发&lt;/a&gt;，所以最好使用 signal 注册到主进程对应的信号上。&lt;/p&gt;
&lt;p&gt;缺点是当使用 kill -9 或者使用 os._exit 的时候不会调用这些函数。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 09 Jul 2018 03:52:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-07-09:/posts/fu-jin-cheng-tui-chu-hou-ru-he-tui-chu-zi-jin-cheng.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>后端工具和算法集</title><link>/posts/hou-duan-gong-ju-he-suan-fa-ji.html</link><description>&lt;p&gt;总结一下后端常用的工具和蕴含的算法&lt;/p&gt;
&lt;p&gt;TODO: 应该把 GitHub 5000 star 以上的项目都看一下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;前端&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;框架&lt;ul&gt;
&lt;li&gt;vue&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据库&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mysql(btree)&lt;/li&gt;
&lt;li&gt;postgresql&lt;/li&gt;
&lt;li&gt;redis&lt;/li&gt;
&lt;li&gt;pika/rocksdb/leveldb&lt;/li&gt;
&lt;li&gt;elasticsearch&lt;/li&gt;
&lt;li&gt;mongodb&lt;/li&gt;
&lt;li&gt;memcache 功能是redis的子集，现在用得比较少了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;消息队列&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kafka&lt;/li&gt;
&lt;li&gt;redis stream&lt;/li&gt;
&lt;li&gt;rabbitmq&lt;ul&gt;
&lt;li&gt;amqp 协议&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RPC 和序列化&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;protobuf/grpc&lt;/li&gt;
&lt;li&gt;thrift&lt;/li&gt;
&lt;li&gt;msgpack&lt;/li&gt;
&lt;li&gt;envoy&lt;ul&gt;
&lt;li&gt;service mesh 的思想&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;负载均衡&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;四层和七层负载均衡的区别&lt;/li&gt;
&lt;li&gt;nginx&lt;/li&gt;
&lt;li&gt;LVS&lt;/li&gt;
&lt;li&gt;一致性哈希&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;部署和容器化&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;docker&lt;ul&gt;
&lt;li&gt;cgroups&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;kubernetes&lt;ul&gt;
&lt;li&gt;borg 论文&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CI&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;jenkins&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;web 框架&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;django(MVC 模式)&lt;/li&gt;
&lt;li&gt;flask&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;日志收集&lt;/p&gt;
&lt;p&gt;分布式系统中需要日志可能分布在不同的机器上，要想查找一条错误日志，可能需要 ssh 到不同的机器上，非常浪费时间和精力。可以把日志收集到一个统一的存储中，方便检索查看&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;filebeat&lt;/li&gt;
&lt;li&gt;sentry&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;监控&lt;/p&gt;
&lt;p&gt;时序数据库&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- OpenTSDB
- influxdb
- prometheus
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;前端面板&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- grafana
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;高并发厂家服务&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计数服务&lt;ul&gt;
&lt;li&gt;&lt;a href="http://zhuanlan.51cto.com/art/201706/542217.htm"&gt;计数系统架构实践一次搞定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.cydu.net/weidesign/2012/09/09/weibo-counter-service-design-2/"&gt;微博计数器的设计&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://instagram-engineering.com/storing-hundreds-of-millions-of-simple-key-value-pairs-in-redis-1091ae80f74c"&gt;instagram 使用 redis 计数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;限流服务&lt;ul&gt;
&lt;li&gt;token bucket&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;搜索引擎相关&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;simhash&lt;/li&gt;
&lt;li&gt;tf-idf&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;统一登录&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CAS，&lt;a href="https://blog.csdn.net/csdnxingyuntian/article/details/54970102"&gt;了解CAS协议&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;kerbos&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;操作系统&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内存换页算法&lt;ul&gt;
&lt;li&gt;OPT&lt;/li&gt;
&lt;li&gt;FIFO&lt;/li&gt;
&lt;li&gt;LRU&lt;/li&gt;
&lt;li&gt;CLOCK&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;限流&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;锁&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分布式锁&lt;/li&gt;
&lt;li&gt;自旋锁&lt;/li&gt;
&lt;li&gt;乐观锁、悲观锁&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sat, 30 Jun 2018 08:16:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-06-30:/posts/hou-duan-gong-ju-he-suan-fa-ji.html</guid><category>后端</category><category>计算机</category></item><item><title>软件工程中的 “3” 的规则</title><link>/posts/ruan-jian-gong-cheng-zhong-de-3-de-gui-ze.html</link><description>&lt;p&gt;我注意到了一个神奇的软件工程法则：在你正确地解决问题之前，你至少需要3个例子。&lt;/p&gt;
&lt;p&gt;具体说来是这样的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不要试图在两个类之间共享代码，至少等到你有三个类的时候。&lt;/li&gt;
&lt;li&gt;解决问题的前两次尝试一定会失败，因为你还没完全理解这个问题。第三次才行&lt;/li&gt;
&lt;li&gt;任何想要早期就能设计好的尝试都会导致对于巧合情形的过度拟合。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;你在说什么？请给个例子&lt;/h1&gt;
&lt;p&gt;比如说你在实现一个类，从银行抓取数据。下面是一个非常傻瓜的版本，但是应该说明了问题：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ChaseScraper&lt;/span&gt;:
    &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;scrape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;sessions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://chase.com/rest/login.aspx&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_password&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="nx"&gt;sessions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://chase.com/rest/download_current_statement.aspx&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在你想添加第二个类 CitiBankScraper 来实现相同的接口，但是改变了一些实现细节。实际上假设CitiBank只是有一个不同的 url 和表单元素名称而已。让我们来添加一个新的爬虫：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CitibankScraper&lt;/span&gt;:
    &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;scrape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;sessions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://citibank.com/cgi-bin/login.pl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="s1"&gt;&amp;#39;pass&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_password&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="nx"&gt;sessions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://citibank.com/cgi-bin/download-stmt.pl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;因为经过了多年DRY原则的教育，这时候我们发现这两个类的代码几乎是重复的！我们应该重构一下，把所有的重复代码都放到一个基类中。在这里，我们需要Inserve of Control 模式，让基类来控制逻辑。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;BaseScraper&lt;/span&gt;:
    &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;scrape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;sessions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_LOGIN_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;self._USERNAME_FORM_KEY&lt;/span&gt;: &lt;span class="kt"&gt;self._username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="nx"&gt;self._PASSWORD_FORM_KEY&lt;/span&gt;: &lt;span class="kt"&gt;self._password&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="nx"&gt;sessions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_STATEMENT_URL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ChaseScraper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BaseScraper&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;_LOGIN_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://chase.com/rest/login.aspx&amp;#39;&lt;/span&gt;
    &lt;span class="nx"&gt;_STATEMENT_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://chase.com/rest/download_current_statement.aspx&amp;#39;&lt;/span&gt;
    &lt;span class="nx"&gt;_USERNAME_FORM_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;
    &lt;span class="nx"&gt;_PASSWORD_FORM_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;


&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CitibankScraper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BaseScraper&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;_LOGIN_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://citibank.com/cgi-bin/login.pl&amp;#39;&lt;/span&gt;
    &lt;span class="nx"&gt;_STATEMENT_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://citibank.com/cgi-bin/download-stmt.pl&amp;#39;&lt;/span&gt;
    &lt;span class="nx"&gt;_USERNAME_FORM_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;
    &lt;span class="nx"&gt;_PASSWORD_FORM_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pass&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这应该让我们删掉了不少代码。这已经是最简单的方法之一了。所以问题在哪里呢？（出去我们实现继承的方法不好之外）&lt;/p&gt;
&lt;p&gt;问题是我们过度拟合了！过度拟合是什么意思呢？我们正在抽象出并不能很好泛化的模式！&lt;/p&gt;
&lt;p&gt;&lt;img alt="facepalm" src="https://erikbern.com/assets/facepalm.jpg"&gt;&lt;/p&gt;
&lt;p&gt;为了验证这一点，假设我们又需要从第三个银行抓取数据。也许它需要如下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;他需要两步验证&lt;/li&gt;
&lt;li&gt;密码是使用 JSON 传递的&lt;/li&gt;
&lt;li&gt;登录使用了POST而不是GET&lt;/li&gt;
&lt;li&gt;需要同时访问多个页面&lt;/li&gt;
&lt;li&gt;要访问的url是根据当前日期动态生成的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;…… 或者随便什么东西，有1000中方式让我们的代码不能工作。我希望你已经感觉到问题所在了。我们以为我们通过前两个爬虫发现了一个模式！然鹅悲剧的是，我们的爬虫根本不能泛化到第三个银行（或者更多，第n个）。也就是说，我们过拟合了。&lt;/p&gt;
&lt;h1&gt;过拟合到底是什么意思？&lt;/h1&gt;
&lt;p&gt;过拟合指的是我们在数据发现了一个模式，但是这个模式并不能很好地泛化。当我们在写代码的时候，我们经常对于优化代码重复非常警觉，我们会发现一些偶然出现的模式，但是如果我们查看整个程序的话，我们知道这些模式可能并不能很好地代表整个程序的模式。所以当我们实现了两个银行的爬虫之后，我们以为我们发现了一个广泛的模式，实际上并不是。&lt;/p&gt;
&lt;p&gt;注意到，代码重复并不总是一件坏事。工程师们通常过分关注减少重复代码，但是也应该注意区分偶然的代码重复和系统性的代码重复之间的区别。&lt;/p&gt;
&lt;p&gt;因此，让我来引入第一个 “3” 之规则。如果你只有两个类或者对象，不要过分关注代码重复。当你在三个不同的地方看到同一个模式的时候在考虑如何重构。&lt;/p&gt;
&lt;h1&gt;“3” 之规则应用到架构上&lt;/h1&gt;
&lt;p&gt;同样的推理可以应用到系统设计上，但是会得出一个非常不同的结论。当你从头构建一个新的系统的时候，你不知道他最终会被如何使用，不要被假设所限制。在第一代和第二代产品上，我们认为需要的限制可能真的是需要的，但是当实现第三代产品的时候，我们会发现假设是完全错误的，并最终实现正确的版本。&lt;/p&gt;
&lt;p&gt;比如说，Luigi就是解决问题的第三次尝试。前两个尝试解决了错误的问题，并且为错误的方向做了优化。比如第一个版本依赖于在 XML 中设计依赖图。但是很显然这是非常不友好的，因为你一般县要在代码里生成依赖图比较好。而且，在前两次设计中看起来很有用的一些新设计，比如任务解耦输出，最终只给一些非常少见的例子添加了支持，但是有添加了不少复杂度。&lt;/p&gt;
&lt;p&gt;第一个版本中看起来很奇怪的问题可能在后来是很重要的问题，反过来也是。&lt;/p&gt;
&lt;p&gt;I was reminded of this when we built an email ingestion system at Better. The first attempt failed because we built it in a poor way (basically shoehorning it into a CRUD request). The second one had a solid microservice design but failed for usability reasons (we built a product that no one really asked for). We’re halfway through the third attempt and I’m having a good feeling about it.&lt;/p&gt;
&lt;p&gt;这个故事告诉了我们第二个 “3” 之规则——在系统设计上，直到第三次你才能够做对。&lt;/p&gt;
&lt;p&gt;更重要的是，如果你的第一版有一些奇怪的位置问题，不要假设你需要搞定他们。走捷径。绕开奇怪的问题。估计你也不会运行这个系统很长时间——总有一天他会坏的。第二个版本大多数时候也是坏的。第三个版本值得你把它雕琢到完美。&lt;/p&gt;
&lt;p&gt;&lt;img alt="three cupcakes" src="https://erikbern.com/assets/three-cupcakes.jpg"&gt;&lt;/p&gt;
&lt;p&gt;原文：https://erikbern.com/amp/2017/08/29/the-software-engineering-rule-of-3.html&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sat, 23 Jun 2018 02:48:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-06-23:/posts/ruan-jian-gong-cheng-zhong-de-3-de-gui-ze.html</guid><category>架构</category><category>后端</category><category>计算机</category></item><item><title>Python 中如何压缩文件</title><link>/posts/python-zhong-ru-he-ya-suo-wen-jian.html</link><description>&lt;p&gt;basic usage&lt;/p&gt;
&lt;p&gt;import gzip/bz2
with gzip.open('file.gz', 'rt') as f:
    text = f.read()&lt;/p&gt;
&lt;p&gt;NOTE: the default mode is binary.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Fri, 22 Jun 2018 14:02:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-06-22:/posts/python-zhong-ru-he-ya-suo-wen-jian.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>curio 的 http 库 asks 代码解析</title><link>/posts/curio-de-http-ku-asks-dai-ma-jie-xi.html</link><description>&lt;p&gt;asks 是 Python 的异步框架 curio 中的 一个 http 库。&lt;/p&gt;
&lt;h1&gt;&lt;strong&gt;init&lt;/strong&gt;.py&lt;/h1&gt;
&lt;p&gt;init 函数，初始化 curio 或者 trio 库&lt;/p&gt;
&lt;h1&gt;auth.py&lt;/h1&gt;
&lt;p&gt;auth 相关函数&lt;/p&gt;
&lt;h1&gt;base_funcs.py&lt;/h1&gt;
&lt;p&gt;asks.request 函数，创建一个session，然后做请求，之后再丢弃掉这个session&lt;/p&gt;
&lt;h1&gt;cookie_utils.py&lt;/h1&gt;
&lt;h2&gt;CookieTracker类&lt;/h2&gt;
&lt;p&gt;对外的方法主要有两个 get_additional_cookies 用于获取域名对应的cookie，_store_cookies 用于添加cookie&lt;/p&gt;
&lt;p&gt;errors.py 抛出的异常的类&lt;/p&gt;
&lt;h1&gt;req_structs.py&lt;/h1&gt;
&lt;h2&gt;SocketQ&lt;/h2&gt;
&lt;p&gt;这是一个 socket 的连接池。&lt;/p&gt;
&lt;p&gt;使用一个deque作为存储，实际上相当于又模拟了一个字典{netloc =&amp;gt; socket}（思考：为什么不使用OrderedDict呢？）
是deque的子类。index返回指定hostloc对应的index。pull弹出指定index的socket。__contains__遍历看是否包含对应的socket&lt;/p&gt;
&lt;p&gt;CaseIncesitiveDict 对大小写不敏感的词典&lt;/p&gt;
&lt;h1&gt;request.py&lt;/h1&gt;
&lt;h2&gt;Request 类&lt;/h2&gt;
&lt;p&gt;make_request 方法。hconnection定义和使用的地方相距太远了。cookie的生成应该使用join。之后调用_request_io 发送请求&lt;/p&gt;
&lt;p&gt;_request_io 调用 首先掉用_send, 然后调用_catch_response&lt;/p&gt;
&lt;p&gt;_catch_response 调用recv_event&lt;/p&gt;
&lt;p&gt;_recv_event 不断调用 _async_lib.recv(self.sock, 10000) 从而不断产生数据，知道读完为之&lt;/p&gt;
&lt;h2&gt;session 类&lt;/h2&gt;
&lt;p&gt;request 调用 grab_connection 获取一个socket，然后把这个socket交给Request对象
grab_connection 调用 checkout_connection 获得一个socket或者，调用make_connection产生一个新的socket，注意其中有一个奇怪的 await sleep(0)，可能意思是把循环交回给event loop&lt;/p&gt;
&lt;p&gt;make_connection 调用_connect 方法，并把host和port作为属性写到socket上&lt;/p&gt;
&lt;p&gt;session 中有两个SocketQ的类，conn_pool, checked_out_sockets 分别用来保存已连接未使用的socket和正在使用中的socket&lt;/p&gt;
&lt;p&gt;Asks 的连接池&lt;/p&gt;
&lt;p&gt;如果使用代理的话&lt;/p&gt;
&lt;h1&gt;curio 的网络通信&lt;/h1&gt;
&lt;p&gt;首先，需要引入curio.socket 而不是使用内置的socket
TCP通信，使用sock.bind/listen/accept等建立服务器，使用recv和sendall发送接收消息
UDP通信，使用recvfrom和sendto函数通信&lt;/p&gt;
&lt;p&gt;作为客户端使用curio.open_connection 打开到服务器的链接，其中ssl=True打开的是HTTPS连接诶&lt;/p&gt;
&lt;p&gt;对于其他要使用ssl的情况，应该使用curio.ssl而不是标准库的ssl&lt;/p&gt;
&lt;p&gt;curio.network.&lt;/p&gt;
&lt;p&gt;ssl.wrap_socket 不支持server_hostname sslcontext.wrap_socket 支持&lt;/p&gt;
&lt;p&gt;不要把 proxies 传递给request 对象&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Fri, 22 Jun 2018 10:23:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-06-22:/posts/curio-de-http-ku-asks-dai-ma-jie-xi.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>Python 操作 ssh</title><link>/posts/python-cao-zuo-ssh.html</link><description>&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;paramiko&lt;/span&gt;
&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;server ip&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;
&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;some useful command&amp;#39;&lt;/span&gt; 
&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;paramiko&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SSHClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_missing_host_key_policy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;paramiko&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AutoAddPolicy&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;outlines&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outlines&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Fri, 22 Jun 2018 10:21:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-06-22:/posts/python-cao-zuo-ssh.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>Python 转义 html 实体字符</title><link>/posts/python-zhuan-yi-html-shi-ti-zi-fu.html</link><description>&lt;p&gt;在网页中经常出现 &lt;code&gt;&amp;amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;amp;amp;&lt;/code&gt;, &lt;code&gt;&amp;amp;0x0026;&lt;/code&gt; 这些特殊字符，这是 html 实体字符转义，用于防止 XSS 攻击。Python3 标准库中包含了 html.entities 模块，可以用于转义和反转义这些字符。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;html.entities.entitydefs 中包含了名称到符号的映射：比如{&amp;#39;amp&amp;#39;: &amp;#39;&amp;amp;&amp;#39;}
html.entities.name2codepoint 中包含了名称到数字的映射：比如 {&amp;#39;amp&amp;#39;: 0x0026}
html.entities.codepoint2name 中包含了数字到名称的映射：比如 {0x0026: &amp;#39;amp&amp;#39;}
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Fri, 22 Jun 2018 10:21:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-06-22:/posts/python-zhuan-yi-html-shi-ti-zi-fu.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>Python 中的 queue 模块</title><link>/posts/python-zhong-de-queue-mo-kuai.html</link><description>&lt;p&gt;在Python中多进程或者多线程之间通信可以使用队列，标准库中实现了一个线程安全的库 queue.Queue，和进程安全的库 multiprocessing.Queue&lt;/p&gt;
&lt;p&gt;There are 3 kind of queues: `Queue LifoQueue HeapQueue&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;q = Queue(size)

get(block=True) return a object
get_nowait()
put(item, block=True) put a object 

qsize()
empty()
full()

task_done() # indicate one item process finished raise ValueError
join() # wait until all item processed

Queue.Empty
Queue.Full
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;How to iterate a queue?&lt;/p&gt;
&lt;p&gt;by using &lt;code&gt;iter(q, None)&lt;/code&gt;, note that you have to put a sentinel value manually&lt;/p&gt;
&lt;p&gt;Queue vs multiprocessing.Queue&lt;/p&gt;
&lt;p&gt;despite their similar api, their implementation is completely different&lt;/p&gt;
&lt;p&gt;http://stackoverflow.com/questions/925100&lt;/p&gt;
&lt;p&gt;如果在一个线程使用了异步代码，那么所有的操作都必须使用异步操作，但是并不是所有的操作都需要或者能够使用异步操作。&lt;/p&gt;
&lt;p&gt;在异步线程和同步线程之间分享数据需要使用一个共用的queue&lt;/p&gt;
&lt;p&gt;如果需要把异步操作分布式不熟使用，在异步的事件循环之间分享数据也需要使用一个queue&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Fri, 22 Jun 2018 09:20:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-06-22:/posts/python-zhong-de-queue-mo-kuai.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>阅读《Python hitchhiker》笔记</title><link>/posts/yue-du-python-hitchhiker-bi-ji.html</link><description>&lt;p&gt;Package&lt;/p&gt;
&lt;p&gt;A file modu.py in the directory pack/ is imported with the statement import pack.modu. This statement will look for an &lt;strong&gt;init&lt;/strong&gt;.py file in pack, execute all of its top-level statements. Then it will look for a file named pack/modu.py and execute all of its top-level statements. After these operations, any variable, function, or class defined in modu.py is available in the pack.modu namespace.&lt;/p&gt;
&lt;p&gt;A commonly seen issue is to add too much code to &lt;strong&gt;init&lt;/strong&gt;.py files. When the project complexity grows, there may be sub-packages and sub-sub-packages in a deep directory structure. In this case, importing a single item from a sub-sub-package will require executing all &lt;strong&gt;init&lt;/strong&gt;.pyfiles met while traversing the tree.&lt;/p&gt;
&lt;p&gt;This and other issues led to the idea that using stateless functions is a better programming paradigm.
Another way to say the same thing is to suggest using functions and procedures with as few implicit contexts and side-effects as possible. A function’s implicit context is made up of any of the global variables or items in the persistence layer that are accessed from within the function. Side-effects are the changes that a function makes to its implicit context. If a function saves or deletes data in a global variable or in the persistence layer, it is said to have a side-effect.&lt;/p&gt;
&lt;p&gt;Pure functions&lt;/p&gt;
&lt;p&gt;• Pure functions are deterministic: given a fixed input, the output will always be the same.
• Pure functions are much easier to change or replace if they need to be refactored or optimized.
• Pure functions are easier to test with unit-tests: There is less need for complex context setup and data cleaning afterwards.
• Pure functions are easier to manipulate, decorate, and pass around.&lt;/p&gt;
&lt;p&gt;However, it may be a good discipline to avoid assigning to a variable more than once, and it helps in grasping the concept of mutable and immutable types.&lt;/p&gt;
&lt;p&gt;A LICENSE file should always be present and specify the license under which the software is made available to the public.
A TODO file or a TODO section in README should list the planned development for the code.
A CHANGELOG file or section in README should compile a short overview of the changes in the code base for the latest versions.
Project Publication
Depending on the project, your documentation might include some or all of the following components:
    • An introduction should show a very short overview of what can be done with the product, using one or two extremely simplified use cases. This is the thirty-second pitch for your project.
    • A tutorial should show some primary use cases in more detail. The reader will follow a step-by-step procedure to set-up a working prototype.
    • An API reference is typically generated from the code (see docstrings). It will list all publicly available interfaces, parameters, and return values.
    • Developer documentation is intended for potential contributors. This can include code convention and general design strategy of the project.&lt;/p&gt;
&lt;p&gt;put project/ tests/ docs/ directory in side the project&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Fri, 22 Jun 2018 09:06:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-06-22:/posts/yue-du-python-hitchhiker-bi-ji.html</guid><category>读书笔记</category></item><item><title>Python functools 中有用的一些函数</title><link>/posts/python-functools-zhong-you-yong-de-yi-xie-han-shu.html</link><description>&lt;p&gt;functools&lt;/p&gt;
&lt;p&gt;partial partial(fn, &lt;em&gt;args, &lt;/em&gt;*kwargs)&lt;/p&gt;
&lt;h1&gt;lru_cache&lt;/h1&gt;
&lt;p&gt;Decorator to wrap a function with a memoizing callable that saves up to the maxsize most recent calls. It can save time when an expensive or I/O bound function is periodically called with the same arguments.
Since a dictionary is used to cache results, the positional and keyword arguments to the function must be hashable.
If maxsize is set to None, the LRU feature is disabled and the cache can grow without bound. The LRU feature performs best when maxsize is a power-of-two.
If typed is set to true, function arguments of different types will be cached separately. For example, f(3) and f(3.0) will be treated as distinct calls with distinct results.
To help measure the effectiveness of the cache and tune the maxsize parameter, the wrapped function is instrumented with a cache_info() function that returns a named tuple showing hits, misses, maxsize and currsize. In a multi-threaded environment, the hits and misses are approximate.
The decorator also provides a cache_clear() function for clearing or invalidating the cache.&lt;/p&gt;
&lt;h1&gt;singledispatch&lt;/h1&gt;
&lt;p&gt;To define a generic function, decorate it with the @singledispatch decorator. Note that the dispatch happens on the type of the first argument, create your function accordingly&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@singledispatch
def fun()
    pass

@fun.register(int)
def fun_int()
    pass
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to get the dispatched func. use fun.dispatch(type)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Fri, 22 Jun 2018 08:59:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-06-22:/posts/python-functools-zhong-you-yong-de-yi-xie-han-shu.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>短视频与机器学习</title><link>/posts/duan-shi-pin-yu-ji-qi-xue-xi.html</link><description>&lt;p&gt;机器学习需要 Ground Truth
modality是什么意思...&lt;/p&gt;
&lt;h1&gt;浅度学习&lt;/h1&gt;
&lt;h2&gt;短视频如何火&lt;/h2&gt;
&lt;p&gt;为什么: 大多数的短视频1天之后都销声匿迹了
数据集: 10个vine用户的follower广度优先, 获得十万种子用户&lt;/p&gt;
&lt;p&gt;大V发布的(social), 声音很好(audio), 美感很好(visual), #hashtag选的好(text)&lt;/p&gt;
&lt;p&gt;从以上四个方面抽取特征.&lt;/p&gt;
&lt;p&gt;social 的影响最大&lt;/p&gt;
&lt;h2&gt;预测地理标签&lt;/h2&gt;
&lt;p&gt;1.2%才有地理标签, 预测是会议室/篮球场/公园等, 最重要的是visual feature&lt;/p&gt;
&lt;h1&gt;深度学习&lt;/h1&gt;
&lt;h2&gt;声音相关&lt;/h2&gt;
&lt;p&gt;freesound 是一个免费的声音库. 从一个标签开始, 抽不同的标签的声音. 查找不同的声音&lt;/p&gt;
&lt;p&gt;深度学习加迁移学习&lt;/p&gt;
&lt;p&gt;alexnet-7是啥&lt;/p&gt;
&lt;h2&gt;sequential and sparse&lt;/h2&gt;
&lt;p&gt;字典学习是啥?&lt;/p&gt;
&lt;p&gt;什么事共空间?&lt;/p&gt;
&lt;h1&gt;未来&lt;/h1&gt;
&lt;p&gt;用户的兴趣是动态的, 但是推荐却是固定的.&lt;/p&gt;
&lt;p&gt;无法搜索没有文字的视频 比如: 可以截一帧然后到google上搜索&lt;/p&gt;
&lt;p&gt;用户的平台对应关系, 利用quora等, 用户自己关注了&lt;/p&gt;
&lt;p&gt;ontology&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Ø 短视频的评论也是文本信息啊
Ø Q: 短视频和长视频的分析区别
Ø A: follow等, 地理属性, 质量低
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Fri, 22 Jun 2018 06:07:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-06-22:/posts/duan-shi-pin-yu-ji-qi-xue-xi.html</guid><category>talks</category></item><item><title>《算法设计与分析基础》笔记</title><link>/posts/suan-fa-she-ji-yu-fen-xi-ji-chu-bi-ji.html</link><description>&lt;p&gt;http://blog.csdn.net/wangyunyun00/article/details/23464359&lt;/p&gt;
&lt;p&gt;差值查找&lt;/p&gt;
&lt;p&gt;折半查找这种查找方式，还是有改进空间的，并不一定是折半的！
mid = （low+high）/ 2, 即 mid = low + 1/2 * (high - low);
改进为 下面的计算机方案（不知道具体过程）：
mid = low + (key - a[low]) / (a[high] - a[low]) * (high - low)，
也就是将上述的比例参数1/2改进了，根据关键字在整个有序表中所处的位置，让mid值的变化更靠近关键字key，这样也就间接地减少了比较次 数。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Fri, 22 Jun 2018 05:46:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-06-22:/posts/suan-fa-she-ji-yu-fen-xi-ji-chu-bi-ji.html</guid><category>读书笔记</category></item><item><title>Andrew Ng 的公开课笔记</title><link>/posts/andrew-ng-de-gong-kai-ke-bi-ji.html</link><description>&lt;p&gt;http://www.johnwittenauer.net/machine-learning-exercises-in-python-part-1/&lt;/p&gt;
&lt;p&gt;Andrew ng 课程的 python 解法&lt;/p&gt;
&lt;p&gt;拟合曲线也是机器学习
ICA independent component analysis 用于解决鸡尾酒宴会问题（分离独立声源）&lt;/p&gt;
&lt;p&gt;梯度下降法
两种
Batch
Random&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Fri, 22 Jun 2018 05:45:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-06-22:/posts/andrew-ng-de-gong-kai-ke-bi-ji.html</guid><category>读书笔记</category></item><item><title>搜索阅读笔记</title><link>/posts/sou-suo-yue-du-bi-ji.html</link><description>&lt;h1&gt;文档评分&lt;/h1&gt;
&lt;h2&gt;索引的类型（参数化索引和域zone索引）&lt;/h2&gt;
&lt;p&gt;对于每个文档来说，除了一个字符串作为正文之外，还有其他的metadata，比如一篇文章就会有 title publish_time author 等等。&lt;/p&gt;
&lt;p&gt;其中 publish_time 这种是有取值范围的，我们称之为参数化索引。而对于title和author这种可以是任意的自有文本，因此我们也可以对它建立倒排。&lt;/p&gt;
&lt;p&gt;在这里建立倒排有两种数据结构，目的都是把 term 和 zone 都标注到倒排上：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把 term 和 zone 合起来作为新的term&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wiliam.abstrct -&amp;gt; [11], [122], [1441]
william.title -&amp;gt; [2], [4], [8]
william.author -&amp;gt; [2], [3], [5]
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;把 zone 和 docID 一起记录&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;william -&amp;gt; [2.title, 2.author], [3.author], [4.title], ...
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;域加权评分&lt;/h3&gt;
&lt;p&gt;对每个域给定一个权重，然后使用每个域有没有出现相关关键词来求和评分&lt;/p&gt;
&lt;h3&gt;权重的设定&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. 专家设定
2. 由人工标注，然后使用机器学习来评分
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Fri, 22 Jun 2018 05:18:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-06-22:/posts/sou-suo-yue-du-bi-ji.html</guid><category>读书笔记</category></item><item><title>APUE 阅读笔记</title><link>/posts/apue-yue-du-bi-ji.html</link><description>&lt;p&gt;使用sysconf来动态地在运行时获取 INT_MAX 等常量地值&lt;/p&gt;
&lt;h1&gt;IO&lt;/h1&gt;
&lt;h2&gt;不带缓冲的IO&lt;/h2&gt;
&lt;p&gt;read write open close lseek 函数&lt;/p&gt;
&lt;h2&gt;stdio&lt;/h2&gt;
&lt;p&gt;标准IO库是围绕stream来的，而read/write 等系统函数则是面向文件描述符。&lt;/p&gt;
&lt;h3&gt;缓冲&lt;/h3&gt;
&lt;p&gt;缓冲分为三种，全缓冲、行缓冲、不缓冲。标准错误是不带缓冲的，标准输入输出等终端设备是行缓冲的，其他是全缓冲的。可以使用 setvbuf  函数更改缓冲类型。使用fflush 函数强制写入。&lt;/p&gt;
&lt;h3&gt;文件操作&lt;/h3&gt;
&lt;p&gt;使用 fopen/freopen/fdopen 来打开文件，使用fclose关闭文件。使用fseek和ftell来定位文件。&lt;/p&gt;
&lt;h3&gt;字符IO&lt;/h3&gt;
&lt;p&gt;使用 getc/fgetc 读取单个文件，使用 putc/fputc 写入单个字符。注意其中getc 可以实现为宏，而fgetc往往实现为函数，这样方便传递指针，两个的功能是完全一样的。
另外还有函数 ungetc 用于回退一个字符到读取的文件中。ungetc 和 putc 的区别在于，一个是回退文件到读模式的文件中，一个是写入到写模式的文件中。&lt;/p&gt;
&lt;h3&gt;行IO&lt;/h3&gt;
&lt;p&gt;千万不要使用gets和puts函数！可能造成缓冲区溢出攻击。
fgets会读入n-1个字符（包括换行），同时把最后一个字符置为null。fputs把一个字符串写出到流中，不包括结尾的null，也不会额外输出换行。&lt;/p&gt;
&lt;h3&gt;二进制IO&lt;/h3&gt;
&lt;p&gt;使用fread和fwrite函数来实现直接从文件中读取一个结构等数据类型。&lt;/p&gt;
&lt;h3&gt;格式化IO&lt;/h3&gt;
&lt;p&gt;printf/dprintf/fprintf/snprintf 函数，注意不要使用sprintf函数，可能造成缓冲区溢出攻击。
还有v开头的函数组用来使用单个参数代替 vargs。使用scanf/fscanf/sscanf读取数据&lt;/p&gt;
&lt;h2&gt;临时文件&lt;/h2&gt;
&lt;p&gt;使用 tmpname/tmpfile 创建临时文件。使用 mkdtemp和mkstemp创建临时目录。不过尽量使用tmpfile和mkstemp，以避免文件被占用。&lt;/p&gt;
&lt;h2&gt;内存文件&lt;/h2&gt;
&lt;p&gt;使用fmemopen来在内存中创建一个临时文件。但是这样创建的文件会自动写入null，不适合于二进制文件。&lt;/p&gt;
&lt;p&gt;可以使用另外两个函数用于创建内存文件，open_memstream 和 open_wmemstream。这两个函数创建的流只能是写打开，但是可以通过直接访问缓冲区来读取文件内容。非常适用于创建临时文件，提升性能。&lt;/p&gt;
&lt;h1&gt;文件与目录&lt;/h1&gt;
&lt;h2&gt;概述&lt;/h2&gt;
&lt;p&gt;来自头文件 sys/stat.h 调用 stat 函数返回 struct stat 结构。
使用S_ISXXX(st.st_mode)宏来判断文件类型，是否是常规文件、目录等。
st_mode中还包含了rwx等权限，使用S_IRUSR, S_IRGRP 等宏测试。&lt;/p&gt;
&lt;h2&gt;suid 和 sgid&lt;/h2&gt;
&lt;p&gt;在st_mode 中分别有两位代表了 st_uid 和 st_gid，分别表示当执行此文件时，将进程的有效用户ID设置为文件所有者的用户ID，可以使用 S_ISUID, S_ISGID 测试。另外可以使用 access 函数测试文件的实际用户ID&lt;/p&gt;
&lt;p&gt;举个例子，比如/usr/bin/passwd程序允许任意用户更改自己的密码，但是/etc/passwd 这个文件又是root所有的，这时候因为/usr/bin/passwd程序设置了set_uid，普通用户运行passwd程序时就拥有了root权限，从而可以更改 /etc/passwd 文件&lt;/p&gt;
&lt;h2&gt;新文件的权限&lt;/h2&gt;
&lt;p&gt;新文件的 uid 设置为进程的有效uid。新文件的组ID可以是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;进程的有效gid&lt;/li&gt;
&lt;li&gt;文件所在目录的gid。如果所在目录设置了 set_gid。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;权限操作&lt;/h2&gt;
&lt;h3&gt;umask&lt;/h3&gt;
&lt;p&gt;使用umask来设定创建文件的默认权限。可以在shell 中使用umask 命令来设定。或者使用 umask 函数：
mode_t umask(mode_t cmask); 注意这个函数是为数不多不反悔错误码的函数。&lt;/p&gt;
&lt;h3&gt;更改文件属性&lt;/h3&gt;
&lt;p&gt;chmod 和 chown&lt;/p&gt;
&lt;h2&gt;黏着位&lt;/h2&gt;
&lt;p&gt;主要用于对目录操作，如果目录设置了黏着位，只有该文件的拥有者或者目录的拥有者才能够删除该文件，比如 /tmp 大家都可以写，但是不能删除别人的文件。&lt;/p&gt;
&lt;h1&gt;系统数据&lt;/h1&gt;
&lt;h1&gt;passwd 文件&lt;/h1&gt;
&lt;p&gt;/etc/passwd 保存了系统中的用户相关信息，虽然这个信息是纯文本的，但是需要使用系统函数来解析，而不是自己解析这个文件。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#include&amp;lt;pwd.h&amp;gt;
struct passwd *getpwuid(uid_t uid);
struct passwd *getpwnam(const char* name);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果需要遍历这个文件的话，使用 getpwdent/setpwent/endpwent 三个函数。ent是entry的缩写。getpwent获得下一个配置项，setpwent返回第一个配置项，endpwent关闭文件。&lt;/p&gt;
&lt;p&gt;现代的操作系统，通常将真实的密码放在 /etc/shadow 文件中，从而避免密码破解。而使用数据结构 struct spwd 来存储相关信息。与之对应，可以使用 getspnam/getspent/setspent/endspent 函数来操作这个文件。&lt;/p&gt;
&lt;h2&gt;group 文件&lt;/h2&gt;
&lt;p&gt;/etc/group 文件保存了系统中的组相关信息。在C中使用 struc group 来代表这个结构。可以使用类似的函数来访问这个文件：getgrpid getgrpnam getgrent/setgrent/endgrent&lt;/p&gt;
&lt;p&gt;现代的unix操作系统中都包含了辅助组，可以使用以下这些函数来访问辅助组信息
getgroups/setgroups/initgroups&lt;/p&gt;
&lt;h2&gt;其他数据库文件&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/hosts/ &amp;lt;netdb.h&amp;gt; hostent | getnameinfo/getaddrinfo
/etc/networks &amp;lt;netdb.h&amp;gt; netent | getnetbyname/getnetbyaddr
/etc/protocols &amp;lt;netdb.h&amp;gt; protoent | getprotobyname/getprotobynumber
/etc/services &amp;lt;netdb.h&amp;gt; servent | getservbyname/get servbyport
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;hostname&lt;/h2&gt;
&lt;p&gt;可以使用uname和gethostname/sethostname来操作相关数据&lt;/p&gt;
&lt;h2&gt;时间和日期&lt;/h2&gt;
&lt;p&gt;time函数返回当前时间戳。另一个多功能的函数是clock_gettime。可以使用clockid来制定不同的功能，当使用clock_gettime(CLOCK_REALTIME, tsp) 时，返回更高精度的时间。后一个参数是timespec类型的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;struct timespec {
    time_t tv_sec;
    long tv_nsec;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;另外需要注意的是 gettimeofday 和 struct timeval 都已经废弃了，建议使用clock_gettime。另外相关的函数还有 clock_settime 和 clock_getres。可以使用gmtime和localtime来定义struct tm，注意在struct tm中没有时区信息。使用mktime可以从struct tm转换到time_t 或者 timespec。注意这里是从本地时间转换。mktime参考TZ变量&lt;/p&gt;
&lt;p&gt;使用strftime和strftime_l来把struct tm 转换为人眼可读的字符串。不同的是，strtime只从TZ环境变量中读取时间信息。而strftime_l则可以通过参数指定。&lt;/p&gt;
&lt;h1&gt;进程管理&lt;/h1&gt;
&lt;p&gt;使用atexit可以注册在程序退出时运行的函数。&lt;/p&gt;
&lt;h2&gt;C程序的内存布局&lt;/h2&gt;
&lt;p&gt;正文段text、全局常量data、未初始化数据段bss、堆、栈、命令行参数和环境变量。地址由低到高。使用malloc/calloc/realloc函数分配内存，使用free函数释放内存。堆从低地址向高地址增长，栈从高地址向低地址增长。&lt;/p&gt;
&lt;h2&gt;环境变量&lt;/h2&gt;
&lt;p&gt;使用全局常量environ访问所有的环境变量，但是当需要访问一个值的时候，使用getenv。使用setenv/putenv/unsetenv等函数更新环境变量。&lt;/p&gt;
&lt;h2&gt;非局部跳转&lt;/h2&gt;
&lt;p&gt;使用 setjmp 设定跳转的位置。在程序正常执行时，setjmp返回0，当发生错误时，调用longjmp，同时设置返回值，这时候会再次返回到setjmp的位置，返回值是刚刚设定的返回值。jmp_buf 一般设定为全局变量&lt;/p&gt;
&lt;h2&gt;资源控制&lt;/h2&gt;
&lt;p&gt;使用 getrlimit/setrlimit 两个函数&lt;/p&gt;
&lt;h1&gt;进程控制&lt;/h1&gt;
&lt;h2&gt;pid相关函数&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;getpid/getppid/getuid/geteuid/getgid/getegid
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;创建子进程&lt;/h2&gt;
&lt;p&gt;fork 创建新的进程，并把父进程的属性都复制一份给子进程，子进程随后可以执行相同的代码（比如web服务器），或者调用exec执行新的程序。&lt;/p&gt;
&lt;p&gt;linux上还有更高级的clone 调用。&lt;/p&gt;
&lt;p&gt;exec 使用文件名和参数列表作为参数，执行一个新的程序。还可以传递环境变量。其中execve是系统调用，而其他函数则是库函数。&lt;/p&gt;
&lt;p&gt;可以使用setuid和setgid来改变进程的uid和gid，但是仅限于实际uid和文件的setuid。&lt;/p&gt;
&lt;p&gt;system函数直接执行一个命令，并返回执行结果。需要注意的是，千万不要在setuid的程序中使用system函数，这样会导致system调用的命令权限过大。&lt;/p&gt;
&lt;p&gt;通过nice函数可以调节进程的nice值，nice值越大，优先级月底&lt;/p&gt;
&lt;h2&gt;进程退出&lt;/h2&gt;
&lt;p&gt;在Unix上，exit是一个库函数，_exit是一个系统调用。所有父进程结束的进程，他们的父进程会变为init进程。父进程有义务处理子进程的现场，对于已经退出，但是父进程还没有处理的进程，称之为僵尸进程，而init进程总会回收他的子进程，避免造成僵尸进程。&lt;/p&gt;
&lt;p&gt;进程退出后，系统会向父进程发送信号，父进程可以在这时候回收进程。可以使用wait/waitpid/waitid 来获取退出的进程的ID，从而进行相应的清理。其中waitid 应该是最好的，但是似乎比较新，文档不多&lt;/p&gt;
&lt;p&gt;信号定义的头文件是 singal.h &lt;/p&gt;
&lt;p&gt;restrict keyword&lt;/p&gt;
&lt;p&gt;restrict says that the pointer is the only thing that accesses the underlying object. It eliminates the potential for pointer aliasing, enabling better optimization by the compiler.
For instance, suppose I have a machine with specialized instructions that can multiply vectors of numbers in memory, and I have the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;void MultiplyArrays(int* dest, int* src1, int* src2, int n) {
    for(int i = 0; i &amp;lt; n; i++) {
        dest[i] = src1[i]*src2[i];
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The compiler needs to properly handle if dest, src1, and src2 overlap, meaning it must do one multiplication at a time, from start to the end. By having restrict, the compiler is free to optimize this code to using the vector instructions.
EDIT: Wikipedia has an entry on restrict, with another example, here.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Fri, 22 Jun 2018 04:50:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-06-22:/posts/apue-yue-du-bi-ji.html</guid><category>读书笔记</category></item><item><title>学习 Startup Engineering</title><link>/posts/xue-xi-startup-engineering.html</link><description>&lt;p&gt;https://gist.github.com/dideler/5796745&lt;/p&gt;
&lt;p&gt;Startups vs. Small Businesses：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A startup is about growth and usually involves new technology and unproven business models.&lt;/li&gt;
&lt;li&gt;A small business, by contrast, does not have ambitions of world domination and is usually geared towards a particular geographical area or limited market where it has some degree of monopoly through virtue of sheer physical presence.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Shift per-unit costs into fixed costs (e.g. via software).
Costly up-front software development can pay off in the long run.&lt;/p&gt;
&lt;p&gt;Pricing is important; to the extent that you are not constrained by competition, you really do want to charge the highest possible price at the beginning to get into the black as soon as possible.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Figure out the precise minimum scope of what you want to create&lt;/li&gt;
&lt;li&gt;Calculate how much money is required to achieve that minimum goal&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;50 美元的定价是比较好&lt;/p&gt;
&lt;p&gt;Measure growth rate per week, but only after you've launched. A good growth rate (during YC) is 5-7% a week. If you can hit 10% a week you're doing exceptionally well. If you can only manage 1%, it's a sign you haven't yet figured out what you're doing.
Focus on just hitting a growth rate every week. This focus reduces the otherwise bewilderingly multifarious problem of starting a startup to a single problem. Use that target growth rate to make all your decisions for you. Having to hit a growth number every week forces founders to act. Nine times out of ten, sitting around strategizing is just a form of procrastination.
Best thing to measure growth rate of is revenue for startups that charge initially, and active users for startups that do not.&lt;/p&gt;
&lt;p&gt;Be aggressive when recruiting new users. Manually and individually recruit your initial users; go out to a coffee shop and have people try your product. Go door-to-door. Have people sign up for your beta in person. The numbers will seem small at first, but don't be fooled by compound growth - it starts slow.&lt;/p&gt;
&lt;p&gt;One advantage of being small: you can provide a level of service no big company can.&lt;/p&gt;
&lt;p&gt;Sometimes the right unscalable trick is to focus on a deliberately narrow market. It's always worth asking if there's a subset of the market in which you can get a critical mass of users quickly.&lt;/p&gt;
&lt;p&gt;TL;DR recruit users manually and give them an overwhelmingly good experience, and founders need to work hard&lt;/p&gt;
&lt;p&gt;YN：我总是想着能够自动化地大规模招募用户，这是错的。在发展到一定阶段以后才需要。&lt;/p&gt;
&lt;p&gt;TL;DR recruit users manually and give them an overwhelmingly good experience, and founders need to work hard&lt;/p&gt;
&lt;p&gt;You want to find a small market to quickly create a monopoly, and then expand. You've found it when people depend on it even when it's still a crappy incomplete product.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Fri, 22 Jun 2018 04:41:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-06-22:/posts/xue-xi-startup-engineering.html</guid><category>读书笔记</category></item><item><title>技术选型的技巧</title><link>/posts/ji-zhu-xuan-xing-de-ji-qiao.html</link><description>&lt;h1&gt;不要魔改原系统&lt;/h1&gt;
&lt;p&gt;所以我们的建议是不要改动原系统，而是要开发辅助系统:监控，报警，负载均衡，管理等。以Redis为例，如果我们想增加集群功能，不要去改动Redis本身的实现，而是增加一个proxy层来实现，Twitter的Twemproxy就是这样做的，而Redis到了3.0后本身提供了集群功能，原有的方案简单切换到Redis3.0即可。详细可参考(http://www.cnblogs.com/gomysql/p/4413922.html)&lt;/p&gt;
&lt;p&gt;如果实在想改到原有系统，怎么办呢？我们的建议是直接给开源项目提需求或者bug，但弊端就是响应比较缓慢，这个就要看业务紧急程度了，如果实在太急那就只能自己改了，不过不是太急，建议做好备份或者应急手段即可。&lt;/p&gt;
&lt;p&gt;所以，如果你有钱有人有时间，投入人力去重复发明完美符合自己业务特点的轮子也是很好的选择！毕竟，土豪们（BAT......等）很多都是这样做的，否则的话我们也就没有那么多好用的开源项目了 :)&lt;/p&gt;
&lt;p&gt;魔改系统的另一个不好是员工的不满。对于员工来说，自然希望能够在简历上写上一些通用的技能，而使用公司内部工具的化，对员工的发展也不利。&lt;/p&gt;
&lt;p&gt;来源：https://book.douban.com/review/6456359/&lt;/p&gt;
&lt;p&gt;突然想起来我们之前一个经验比较丰富的同事告诉我，他学习的方法就是一件事情先找到方法给干掉，先知道怎么用，再系统的看书学习，借此和大家分享。&lt;/p&gt;
&lt;h1&gt;不要选择过于小众的技术&lt;/h1&gt;
&lt;p&gt;如果你是你们新用户最大的用户，那么你遇到的问题将会是最大的&lt;/p&gt;
&lt;p&gt;Maturity = (Blood + Sweat) / Complexity&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Fri, 22 Jun 2018 04:39:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-06-22:/posts/ji-zhu-xuan-xing-de-ji-qiao.html</guid><category>架构</category><category>后端</category><category>计算机</category></item><item><title>mysql 基础知识(8) - 主从复制</title><link>/posts/mysql-ji-chu-zhi-shi-8-zhu-cong-fu-zhi.html</link><description>&lt;p&gt;mysql 有三种主从复制方式&lt;/p&gt;
&lt;p&gt;MySQL传统的高可用解决方案是通过binlog复制来搭建主从或一主多从的数据库集群。主从之间的复制模式支持异步模式(async replication)和半同步模式(semi-sync replication)。无论哪种模式下，都是主库master提供读写事务的能力，而slave只能提供只读事务的能力。在master上执行的更新事务通过binlog复制的方式传送给slave，slave收到后将事务先写入relay log，然后重放事务，即在slave上重新执行一次事务，从而达到主从机事务一致的效果。 &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://ws1.sinaimg.cn/large/006tNc79gy1fsfd8akzrlj30o108at9e.jpg"&gt;&lt;/p&gt;
&lt;p&gt;其他文档：&lt;/p&gt;
&lt;p&gt;http://mysql.taobao.org/monthly/2017/08/01/
http://blog.csdn.net/d6619309/article/details/53691352
http://blog.51cto.com/wangwei007/1893703
https://www.digitalocean.com/community/tutorials/how-to-configure-mysql-group-replication-on-ubuntu-16-04
http://blog.csdn.net/d6619309/article/details/53691352
http://mysql.taobao.org/monthly/2017/08/01/&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 18 Jun 2018 07:30:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-06-18:/posts/mysql-ji-chu-zhi-shi-8-zhu-cong-fu-zhi.html</guid><category>数据库</category><category>计算机</category></item><item><title>使用 Ansible 部署服务</title><link>/posts/shi-yong-ansible-bu-shu-fu-wu.html</link><description>&lt;p&gt;ansible 的操作是幂等的，也就是说可以进行任意次操作而不会造成副作用。ansible 基于 ssh，不需要在目标机器上运行任何特殊的 agent。&lt;/p&gt;
&lt;h1&gt;安装&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pip3 install ansible
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Hosts 文件&lt;/h1&gt;
&lt;p&gt;ansible 使用 &lt;code&gt;hosts&lt;/code&gt; 文件来管理主机，每个Hosts中定义多个 Inventory，可以认为是分组的主机&lt;/p&gt;
&lt;p&gt;默认位置: &lt;code&gt;/etc/ansible/hosts&lt;/code&gt;。可以使用 &lt;code&gt;-i&lt;/code&gt; 来指定 Inventory 文件&lt;/p&gt;
&lt;p&gt;format&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[inventory_name]&lt;/span&gt;
&lt;span class="na"&gt;192.168.0.1&lt;/span&gt;
&lt;span class="c1"&gt;# 或者域名&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果需要改变登录使用的用户名，可以在当前目录的 &lt;code&gt;ansible.cfg&lt;/code&gt; 或者 &lt;code&gt;$HOME/.ansible.cfg&lt;/code&gt; 或者 &lt;code&gt;/etc/ansible/ansible.cfg&lt;/code&gt; 中指定：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[defaults]&lt;/span&gt;
&lt;span class="na"&gt;remote_user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;rabbit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;动态 Inventory&lt;/h2&gt;
&lt;p&gt;see ec2.py&lt;/p&gt;
&lt;h2&gt;Builtin Variables&lt;/h2&gt;
&lt;p&gt;see https://github.com/lorin/ansible-quickref&lt;/p&gt;
&lt;h1&gt;运行命令&lt;/h1&gt;
&lt;p&gt;ansible 使用module来组织命令。&lt;/p&gt;
&lt;h2&gt;选项&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-m  module to run
-s  use sudo
-k  ask for key/password
-u  user
-a  传递给 module 的参数
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;例子&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ansible -i ./hosts all -m ping 
ansible -i ./hosts all -m shell -a &amp;#39;apt-get install nginx&amp;#39;
ansible -i ./hosts all -s -m apt -a &amp;#39;pkg=nginx state=installed update_cache=true&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;响应&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;host | state &amp;gt;&amp;gt; {
    &amp;quot;changed&amp;quot;: false # whether the host is affected by the command
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ansible 内置的 module 有: ping, shell&lt;/p&gt;
&lt;h1&gt;Playbook&lt;/h1&gt;
&lt;p&gt;ansible 可以直接在命令行使用，但是最终需要的命令可能很长，不过最好的方式还是使用 playbook 来把需要运行的命令写成 yaml 文件。就像是 docker 相关的命令可以写成 docker-compose 的配置文件一样。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;- hosts: local&lt;/span&gt;
&lt;span class="x"&gt;  # define variables&lt;/span&gt;
&lt;span class="x"&gt;  vars:&lt;/span&gt;
&lt;span class="x"&gt;   - docroot: /var/www/serversforhackers.com/public&lt;/span&gt;
&lt;span class="x"&gt;  # more options goes here&lt;/span&gt;
&lt;span class="x"&gt;  # ...&lt;/span&gt;

&lt;span class="x"&gt;  # tasks are the basic action unit&lt;/span&gt;
&lt;span class="x"&gt;  tasks:&lt;/span&gt;
&lt;span class="x"&gt;   - name: Add Nginx Repository&lt;/span&gt;
&lt;span class="x"&gt;     # module apt_repository&lt;/span&gt;
&lt;span class="x"&gt;     apt_repository: repo=&amp;#39;ppa:nginx/stable&amp;#39; state=present&lt;/span&gt;
&lt;span class="x"&gt;     # register an event&lt;/span&gt;
&lt;span class="x"&gt;     register: ppastable&lt;/span&gt;

&lt;span class="x"&gt;   - name: Install Nginx&lt;/span&gt;
&lt;span class="x"&gt;     apt: pkg=nginx state=installed update_cache=true&lt;/span&gt;
&lt;span class="x"&gt;     # listen an event, run only it happens&lt;/span&gt;
&lt;span class="x"&gt;     when: ppastable|success&lt;/span&gt;
&lt;span class="x"&gt;     register: nginxinstalled&lt;/span&gt;
&lt;span class="x"&gt;    # notify calles handlers&lt;/span&gt;
&lt;span class="x"&gt;     notify:&lt;/span&gt;
&lt;span class="x"&gt;      - Start Nginx&lt;/span&gt;

&lt;span class="x"&gt;   - name: Create Web Root&lt;/span&gt;
&lt;span class="x"&gt;     when: nginxinstalled|success&lt;/span&gt;
&lt;span class="x"&gt;     file: dest=&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{{&amp;#39;&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt; docroot &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;}}&amp;#39;&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt; mode=775 state=directory owner=www-data group=www-data&lt;/span&gt;
&lt;span class="x"&gt;     notify:&lt;/span&gt;
&lt;span class="x"&gt;      - Reload Nginx&lt;/span&gt;

&lt;span class="x"&gt;  # handlers are like functions, called by `notify`&lt;/span&gt;
&lt;span class="x"&gt;  handlers:&lt;/span&gt;
&lt;span class="x"&gt;   - name: Start Nginx&lt;/span&gt;
&lt;span class="x"&gt;     service: name=nginx state=started&lt;/span&gt;

&lt;span class="x"&gt;    - name: Reload Nginx&lt;/span&gt;
&lt;span class="x"&gt;      service: name=nginx state=reloaded&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;部署 docker&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://yifei.me/note/569"&gt;使用 ansible 部署 docker 镜像&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;REF&lt;/h1&gt;
&lt;p&gt;这篇文章主要参考&lt;a href="https://serversforhackers.com/c/an-ansible2-tutorial"&gt;这里&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 18 Jun 2018 03:16:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-06-18:/posts/shi-yong-ansible-bu-shu-fu-wu.html</guid><category>后端</category><category>计算机</category></item><item><title>tmux cheatsheet</title><link>/posts/tmux-cheatsheet.html</link><description>&lt;p&gt;if you use set mouse off, then you could use system mark and copy, or if you are  in Mac, you could use Option + Mouse Select&lt;/p&gt;
&lt;h1&gt;按键绑定&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;C-b         发送 Ctrl-b 按键
C-z         暂停（suspend） tmux 客户端
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;窗口创建与管理&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;!           把当前分区独立出来作为单独的窗口
&amp;quot;           横向分隔，变成上线两个分区
%           纵向分隔，变成左右两个分区
&amp;amp;           关闭当前窗口（window），也就是所有的分区                    
.           Prompt for an index to move the current window.
c           创建一个新窗口
x           关闭当前分区（pane）
{           Swap the current pane with the previous pane.
}           Swap the current pane with the next pane.
C-o         Rotate the panes in the current window forwards.
M-o         Rotate the panes in the current window backwards.
C-Up, C-Down
C-Left, C-Right
            Resize the current pane in steps of one cell.
M-Up, M-Down
M-Left, M-Right
            Resize the current pane in steps of five cells.
M-1 to M-5  Arrange panes in one of the five preset layouts: even-horizontal, even-vertical, main-horizontal, main-vertical, or tiled.
Space       Arrange the current window in the next preset layout.
M-n         Move to the next window with a bell or activity marker.
M-p         Move to the previous window with a bell or activity marker.
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;copy and paste&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#           List all paste buffers.
-           Delete the most recently copied buffer of text.
=           Choose which buffer to paste interactively from a list.
[           Enter copy mode to copy text or view the history.
]           Paste the most recently copied buffer of text.
Page Up     Enter copy mode and scroll one page up.
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;rename&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$           Rename the current session.
,           Rename the current window.
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;选择窗口&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;#39;           Prompt for a window index to select.
(           Switch the attached client to the previous session.
)           Switch the attached client to the next session.
0 to 9      Select windows 0 to 9.
l           Move to the previously selected window. remapped to \
n           Change to the next window.
o           Select the next pane in the current window.
p           Change to the previous window.
s           Select a new session for the attached client interactively.
w           Choose the current window interactively.
;           Move to the previously active pane.
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;其他&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:           Enter the tmux command prompt.
?           List all key bindings.
D           Choose a client to detach.
L           Switch the attached client back to the last session.        
d           Detach the current client.
f           Prompt to search for text in open windows.
i           Display some information about the current window.
q           Briefly display pane indexes.
r           Force redraw of the attached client.
m           Mark the current pane (see select-pane -m).
M           Clear the marked pane.
t           Show the time
z           Toggle zoom state of the current pane.
           ~           Show previous messages from tmux, if any.

           Up, Down
           Left, Right
                       Change to the pane above, below, to the left, or to the right of the current pane.
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;dtach&lt;/h1&gt;
&lt;p&gt;还有一个类似 tmux 的命令 dtach，不过后来没怎么用了，笔记还是留在这里。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dtach&lt;/code&gt; is used to detach and attach to a session.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dtach&lt;/code&gt; works with a session file, and can detach and attach to a session, but it has no functionality of terminal multiplexing.&lt;/p&gt;
&lt;p&gt;Formula
    dtach [mode] [session_file] [options] [command]&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dtach&lt;/code&gt; modes are &lt;code&gt;-a&lt;/code&gt; attach, &lt;code&gt;-A&lt;/code&gt; attach or create, &lt;code&gt;-c&lt;/code&gt; creates a new session and attach, &lt;code&gt;-n&lt;/code&gt; creates without attach.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 18 Jun 2018 00:54:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-06-18:/posts/tmux-cheatsheet.html</guid><category>小工具</category><category>计算机</category><category>通用工具</category></item><item><title>Python 的内置类型和函数</title><link>/posts/python-de-nei-zhi-lei-xing-he-han-shu.html</link><description>&lt;h1&gt;内置类型&lt;/h1&gt;
&lt;p&gt;Python的内置类型按照类来分，包括了 numerics, sequences, mappings, files, classes, instances 和 exceptions
。对用户自定义类型的实例，如果__nonzero__或者__len__返回是 0 或 False 会被认为是假。&lt;/p&gt;
&lt;h2&gt;注意浅拷贝&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; lists = [[]] * 3
&amp;gt;&amp;gt;&amp;gt; lists
[[], [], []]
&amp;gt;&amp;gt;&amp;gt; lists[0].append(3)
&amp;gt;&amp;gt;&amp;gt; lists
[[3], [3], [3]]
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;字典的一些方法&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;keys()/values()
iterkeys()/itervalues()
items()/iteritems()
update()
get(key, default)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可能会抛出&lt;/p&gt;
&lt;p&gt;read/readline/readlines
write/writelines&lt;/p&gt;
&lt;h2&gt;字符串方法&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;str.capitalize()    首字母大写
center/ljust/rjust(width, filled_char)  扩充并使得原字符串居中
decode(codecsm, how_to_handle_erroe)    throws UnicodeError
encode(codecs, how_to_handle_error)     throws UnicodeError
startswith(string or tuple) 
endswith(seq, start, end)   
find(seq, start, end)   
isalnum/isalpha/isdigit/islower/isupper/isspace 
lower()/upper()/title() 
strip/lstrip/rstrip(chars)  
partition(seq)  返回一个三元组前半部分，seq，后半部分
replace(old, new, count)    
split(seq, count)   
splitlines(keepends)    
zfill(width)    左边填零
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;内置函数&lt;/h1&gt;
&lt;h2&gt;函数式编程对应的内置函数&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;all
any
callable
filter
iter
map
next
reduce(fn, iter, init)
reload
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;操作属性的函数&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;delattr 
dir return a object&amp;#39;s attributes
getattr(object, name, default)  when default supplied, no exception thrown
hasattr 
globals 
locals
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;内置数学库&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;compile 
complex 
bin Convert an integer number to a binary string
abs 
divmod  
enumerate   
eval    
execfile    
file    
hex     
max/min 
oct 
pow
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;类型&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;frozenset   
bool    
dict    
float   note float(&amp;#39;NaN&amp;#39;), float(&amp;#39;-inf&amp;#39;)     
int(x, base=10) 
list    
long    
object
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;bytearray可以认为是一个可变的 string&lt;/li&gt;
&lt;li&gt;frozenset是一个immutable, hashable的 set&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;其他函数&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;format
enumerate
id
input/raw_inoput
isinstance(object, class/class_tuple)
insubclass(class, class)
len
open
print
range/xrange(start, stop, step)
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 18 Jun 2018 00:16:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-06-18:/posts/python-de-nei-zhi-lei-xing-he-han-shu.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>django 单元测试</title><link>/posts/django-dan-yuan-ce-shi.html</link><description>&lt;p&gt;和普通的单元测试不同的是，django 单独提供了一个测试模块，所有的 TestCase 需要继承 django.test.TestCase。&lt;/p&gt;
&lt;h2&gt;简单的测试&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.test&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TestCase&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;myapp.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Animal&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AnimalTestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;lion&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sound&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;roar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sound&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;meow&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_animals_can_speak&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Animals that can speak are correctly identified&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;lion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;lion&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lion&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;The lion says &amp;quot;roar&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;The cat says &amp;quot;meow&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对于需要测试服务器的测试用例，可以使用 &lt;code&gt;django.test.Client&lt;/code&gt; 类&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.test&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TestCase&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SimpleTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_details&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/customer/details/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/customer/index/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sun, 17 Jun 2018 23:39:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-06-17:/posts/django-dan-yuan-ce-shi.html</guid><category>Django</category><category>后端</category><category>计算机</category></item><item><title>django 国际化</title><link>/posts/django-guo-ji-hua.html</link><description>&lt;p&gt;settings.py 中的设置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;MIDDLEWARE_CLASSES = (
    ...
    &amp;#39;django.middleware.locale.LocaleMiddleware&amp;#39;,
)


LANGUAGE_CODE = &amp;#39;en&amp;#39;
TIME_ZONE = &amp;#39;UTC&amp;#39;
USE_I18N = True
USE_L10N = True
USE_TZ = True

LANGUAGES = (
    (&amp;#39;en&amp;#39;, (&amp;#39;English&amp;#39;)),
    (&amp;#39;zh-hans&amp;#39;, (&amp;#39;中文简体&amp;#39;)),
    (&amp;#39;zh-hant&amp;#39;, (&amp;#39;中文繁體&amp;#39;)),
)

#翻译文件所在目录，需要手工创建
LOCALE_PATHS = (
    os.path.join(BASE_DIR, &amp;#39;locale&amp;#39;),
)

TEMPLATE_CONTEXT_PROCESSORS = (
    ...
    &amp;quot;django.core.context_processors.i18n&amp;quot;,
)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;生成需要翻译的文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python manage.py makemessages -l zh_hans
python manage.py makemessages -l zh_hant
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;翻译其中的 django.po 文件，注意&lt;code&gt;.po&lt;/code&gt;文件是一种通用的格式，有很多专门的编辑器&lt;/p&gt;
&lt;p&gt;编译翻译好的文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python manage.py compilemessages
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sun, 17 Jun 2018 23:07:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-06-17:/posts/django-guo-ji-hua.html</guid><category>Django</category><category>后端</category><category>计算机</category></item><item><title>django 页面缓存</title><link>/posts/django-ye-mian-huan-cun.html</link><description>&lt;p&gt;django 作为一个动态的网站系统，在并发访问量大的时候会遇到性能问题，这时候可以使用缓存来显著提高性能。&lt;/p&gt;
&lt;p&gt;settings.py 中的配置&lt;/p&gt;
&lt;p&gt;可以使用 django-redis 来使用redis作为缓存。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install django-redis
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CACHES = {
    &amp;quot;default&amp;quot;: {
        &amp;quot;BACKEND&amp;quot;: &amp;quot;django_redis.cache.RedisCache&amp;quot;,
        &amp;quot;LOCATION&amp;quot;: &amp;quot;redis://127.0.0.1:6379/1&amp;quot;,
        &amp;quot;OPTIONS&amp;quot;: {
            &amp;quot;CLIENT_CLASS&amp;quot;: &amp;quot;django_redis.client.DefaultClient&amp;quot;,
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;配置需要缓存的函数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.decorators.cache&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;cache_page&lt;/span&gt;

&lt;span class="nd"&gt;@cache_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 秒数，这里指缓存 15 分钟，不直接写900是为了提高可读性&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# 读取数据库等 并渲染到网页&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;queryset&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sun, 17 Jun 2018 15:08:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-06-17:/posts/django-ye-mian-huan-cun.html</guid><category>Django</category><category>后端</category><category>计算机</category></item><item><title>django 静态文件</title><link>/posts/django-jing-tai-wen-jian.html</link><description>&lt;h1&gt;settings.py 中的相关配置&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;STATIC_URL = &amp;#39;/static/&amp;#39;
STATIC_ROOT = os.path.join(BASE_DIR,&amp;#39;static&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一般来说我们只要把静态文件放在 APP 中的 static 目录下，部署时用 &lt;code&gt;python manage.py collectstatic&lt;/code&gt; 就可以把静态文件收集到（复制到） STATIC_ROOT 目录，但是有时我们有一些共用的静态文件，这时候可以设置 STATICFILES_DIRS 另外弄一个文件夹，如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;STATICFILES_DIRS = (
    os.path.join(BASE_DIR, &amp;quot;common_static&amp;quot;),
    &amp;#39;/var/www/static/&amp;#39;,
)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样我们就可以把静态文件放在 common_static 和 /var/www/static/中了，Django也能找到它们。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;MEDIA_URL = &amp;#39;/media/&amp;#39;
MEDIA_ROOT = os.path.join(BASE_DIR,&amp;#39;media&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;media文件夹用来存放用户上传的文件&lt;/p&gt;
&lt;h1&gt;nginx 部署时的配置&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;location /media  {
    alias /path/to/project/media;
}

location /static {
    alias /path/to/project/collected_static;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;在模板中引入静态文件&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% load static %}
&amp;lt;img src=&amp;quot;{% static &amp;quot;img/example.jpg&amp;quot; %}&amp;quot; alt=&amp;quot;My image&amp;quot;/&amp;gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sun, 17 Jun 2018 12:48:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-06-17:/posts/django-jing-tai-wen-jian.html</guid><category>Django</category><category>后端</category><category>计算机</category></item><item><title>Django views 视图</title><link>/posts/django-views-shi-tu.html</link><description>&lt;p&gt;django 使用正则指定路径，然后使用一个函数来处理对应的请求。&lt;/p&gt;
&lt;h1&gt;定义响应函数&lt;/h1&gt;
&lt;p&gt;响应函数如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# views.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.shortcuts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意每个函数都需要接受 request 作为第一个参数，GET参数和POST参数都可以从 request 中读取。另外还可以使用从 url path 中读取数据，这些参数作为形参传递给对应的函数。&lt;/p&gt;
&lt;h1&gt;定义 URL 路由&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# urls.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;calc&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;calc_views&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;add/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calc_views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;add&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;  &lt;span class="c1"&gt;# new&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;admin/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;add/&amp;lt;int:a&amp;gt;/&amp;lt;int:b&amp;gt;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calc_views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;add2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;  &lt;span class="c1"&gt;# django 2.0 的新语法，以前都是用正则分组&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中的 name 可以用在模板中，这样就不用写死 url 了。&lt;code&gt;&amp;lt;a href="{% url 'add2' 4 5 %}"&amp;gt;link&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;设定响应的 headers&lt;/h2&gt;
&lt;p&gt;response 对象可以当做字典使用，向其中复制就可以设定响应的头部&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Powered-By&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;django&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;url reverse&lt;/h2&gt;
&lt;p&gt;在 urls.py 中可以设定 url 到具体函数的映射，但是 url 也是经常要随业务改动的，比如从 &lt;code&gt;add/&lt;/code&gt; 变成了 &lt;code&gt;plus/&lt;/code&gt;。当我们在某个网页中需要链接到某个页面的时候，不希望写死 url，这时候可以使用 url reverse 的功能，使用 name 反向获取 url。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# urls.py&lt;/span&gt;
&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;add/&amp;lt;int:a&amp;gt;/&amp;lt;int:b&amp;gt;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calc_views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;add2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# other.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;
&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;add2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sun, 17 Jun 2018 08:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-06-17:/posts/django-views-shi-tu.html</guid><category>Django</category><category>后端</category><category>计算机</category></item><item><title>知乎推广的一些小技巧</title><link>/posts/zhi-hu-tui-yan-de-yi-xie-xiao-ji-qiao.html</link><description>&lt;p&gt;转载自：&lt;a href="https://mp.weixin.qq.com/s?__biz=MzAwMDA3ODc2NQ==&amp;amp;mid=2650452037&amp;amp;idx=2&amp;amp;sn=626e4f2d597e2664a9163ea99300449d&amp;amp;chksm=82e07687b597ff91f6d6d7e13f9621f2baafcfd58b076e4aa591e54679b5f2c5b302f131255a&amp;amp;mpshare=1&amp;amp;scene=1&amp;amp;srcid=120442SC5YQtAnPiRwsPpCpR#rd"&gt; 姑婆那些事儿&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;文章打开率越来越低，从0起步的公众号往往是运营最难跨越的鸿沟。刚起步的微信公众号，没人关注怎么办？怎样获得初始的1000个粉丝？”&lt;/p&gt;
&lt;p&gt;由于微信的闭环特性，所以大量粉丝需要从外部渠道导入。粉丝渠道来源并不是单一的，如果我在其他自媒体平台同时采用一定策略吸引粉丝。这样算下来假定半年目标是吸引1万粉丝，每天吸引55个就可以了，这55个粉丝的主要来源是知乎、今日头条、朋友圈，每个渠道每天能吸引18就足够了。&lt;/p&gt;
&lt;p&gt;而知乎作为高质量的流量聚集地是非常好的引流选择，目前很多人对知乎的流量挖掘并不是很好，下面有一些基本的方法分享给大家。&lt;/p&gt;
&lt;h1&gt;日常运营&lt;/h1&gt;
&lt;p&gt;4、一个高赞的答案回答字数控制在800-1500字左右，回答形式多采用图文式回复、数据分析式回复、引用佐证式回复，知乎用户重逻辑轻感情。&lt;/p&gt;
&lt;p&gt;知乎用户尤其排斥软文广告，内容上干货价值+亲身经历+幽默风趣调侃语气+最后一段神来之笔+逻辑推理小清新+分段分点论述最能得到他们的青睐。&lt;/p&gt;
&lt;p&gt;这样的回复才能获取点赞、收藏、评论，也容易把你推到话题回复第一名的位置。这时你就获得了他们的认可，粉丝关注，自然通过你的联系方式联系你。&lt;/p&gt;
&lt;p&gt;5、回答问题时一定要挑选知乎热门话题，这些话题流量大关注人数多，如果只回答一些冷门话题那么很长一段时间内都不会有人看到。&lt;/p&gt;
&lt;p&gt;回答内容一定要有争议有价值，即使抖机灵也要抖出新高度。回答下方的评论区也要充分利用，和粉丝保持高互动。&lt;/p&gt;
&lt;p&gt;6、同样的回答内容尽量不要用多次，如果被系统检测到很容易受到处罚，首次违规封禁一天，或七天，甚至清除屏蔽用户的数据所有回答。可以在答案中留下链接引导用户查看。&lt;/p&gt;
&lt;p&gt;7、回答中不要留太显眼的联系方式或者公众号二维码，知乎对大V留联系方式是默许的，但对普通用户或者小V被发现或者被举报就会处以禁言。&lt;/p&gt;
&lt;p&gt;8、当你在知乎已经有了一定量的回答量，粉丝也有了一些积累。可以做初步的导流准备了。这时候修改自己的帐号资料，在上面增加自己的联系方式，数量不要多避免营销的嫌疑。&lt;/p&gt;
&lt;p&gt;9、知乎系统有个特点，一天当中如果回答数量超过十个或者长期回答数量过多，系统会提示操作频繁。为了避免不必要的麻烦一天最佳回答数量应该控制在5-7之间。&lt;/p&gt;
&lt;p&gt;10、知乎用户的活跃时间段在中午12：00-14：00及晚上19：00-23：00，一般在此时间段内回答问题违规被处罚的情况会很少发生。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sun, 17 Jun 2018 07:01:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-06-17:/posts/zhi-hu-tui-yan-de-yi-xie-xiao-ji-qiao.html</guid><category>创业</category><category>运营与产品</category></item><item><title>使用 docker-compose 编排容器运行</title><link>/posts/shi-yong-docker-compose-bian-pai-rong-qi-yun-xing.html</link><description>&lt;p&gt;使用 docker run 运行容器的时候经常需要加很多的参数，每次都输入这么多参数很容易出
错。另外我们经常需要同时运行若干个容器来构成一个服务，此时还是涉及到网络的联通等
操作。docker compose 可以把docker执行时的参数写成yaml文件，运行的时候只需要
&lt;code&gt;docker-compose up&lt;/code&gt; 一下就可以了。&lt;/p&gt;
&lt;p&gt;话不多说，下面通过一个例子来学习一下 docker-compose.yml 文件的语法。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;version: &amp;quot;3&amp;quot;
services:
  web:
    build: .
    depends_on:
      - db
      - redis
  redis:
    image: redis
    ports:
     - &amp;quot;3000&amp;quot;
     - &amp;quot;3000-3005&amp;quot;
     - &amp;quot;8000:8000&amp;quot;
     - &amp;quot;9090-9091:8080-8081&amp;quot;
     - &amp;quot;49100:22&amp;quot;
     - &amp;quot;127.0.0.1:8001:8001&amp;quot;
     - &amp;quot;127.0.0.1:5000-5010:5000-5010&amp;quot;
     - &amp;quot;6060:6060/udp&amp;quot; 
  db:
    image: postgres
    volumes:
      - &amp;quot;/var/run/postgres/postgres.sock:/var/run/postgres/postgres.sock&amp;quot;
      - &amp;quot;dbdata:/var/lib/postgresql/data&amp;quot;

volumes:
  - dbdata
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;version 指定了当前 docker-compose 文件的版本&lt;/li&gt;
&lt;li&gt;services 服务列表，是一个 "服务名：配置" 的字典。这里定义了三个服务：
   web/redis/db&lt;/li&gt;
&lt;li&gt;build，docker build 命令的参数，用来指定需要构建的 dockerfile&lt;/li&gt;
&lt;li&gt;image，如果镜像不需要自己构建，而是使用dockerhub上的基础镜像，可以直接使用
   image 指令&lt;/li&gt;
&lt;li&gt;depends_on 指定当前的服务依赖的服务，从而确定启动顺序&lt;/li&gt;
&lt;li&gt;ports 开放的端口的数组，有三种形式：&lt;ol&gt;
&lt;li&gt;"3000" 容器中开放的端口&lt;/li&gt;
&lt;li&gt;"3000:3000" 开放容器中的端口到宿主机&lt;/li&gt;
&lt;li&gt;"127.0.0.1:3000:3000" 开放容器中的端口到宿主机并绑定IP&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;environment 环境变量&lt;/li&gt;
&lt;li&gt;volumes 挂载的卷，可以使用named volume或者是挂载目录，建议不要使用匿名卷。如
   果使用 named volume，必须在volumes下声明&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;docker-compose 有以下3个常用命令：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;docker-compose up [-d] SERVICE&lt;/li&gt;
&lt;li&gt;docker-compose run&lt;/li&gt;
&lt;li&gt;docker-compose stop&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sun, 17 Jun 2018 02:11:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-06-17:/posts/shi-yong-docker-compose-bian-pai-rong-qi-yun-xing.html</guid><category>后端</category><category>计算机</category><category>Docker</category></item><item><title>使用 Python 提取字幕文件</title><link>/posts/shi-yong-python-ti-qu-zi-mu-wen-jian.html</link><description>&lt;p&gt;最近打算做一个字幕相关的 app，需要从字幕文件中提取出单词。对比了几个库之后，发现 PySubs2 还不错，主要原因是他支持三种主流的字幕文件 &lt;code&gt;.srt&lt;/code&gt;, &lt;code&gt;.ass&lt;/code&gt;, &lt;code&gt;.ssa&lt;/code&gt;。而其他的库往往只支持其中一个，实际使用还需要两个库配合，所以不如直接使用 PySubs 2.&lt;/p&gt;
&lt;h1&gt;用法&lt;/h1&gt;
&lt;p&gt;因为我的需求主要是解析提取字幕文件，所以这里只讨论相关问题。对于字幕时间轴和样式的编译，可以查看 pysubs2 的官方文档。&lt;/p&gt;
&lt;p&gt;因为字幕文件本身结构也比较简单，PySubs2 使用也非常简单，核心只有两个类： SSAFile 和 SSAEvent。其中 SSAFile 指的是一个字幕文件，它像一个数组一样，包含了多个 SSAEvent。下面直接看代码吧：&lt;/p&gt;
&lt;h2&gt;安装&lt;/h2&gt;
&lt;p&gt;使用 pip&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install pysubs2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;比如我们有一个srt格式的字幕文件 subtitles.srt：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; SIMPLE_FILE = &amp;quot;&amp;quot;&amp;quot;\
... 1
... 00:00:00,000 --&amp;gt; 00:01:00,000
... Once upon a time,
...
... 2
... 00:01:00,000 --&amp;gt; 00:02:00,000
... there was a SubRip file
... &lt;span class="nt"&gt;&amp;lt;i&amp;gt;&lt;/span&gt;with&lt;span class="nt"&gt;&amp;lt;/i&amp;gt;&lt;/span&gt; two subtitles.
... &amp;quot;&amp;quot;&amp;quot;
&amp;gt;&amp;gt;&amp;gt; with open(&amp;quot;subtitles.srt&amp;quot;, &amp;quot;w&amp;quot;) as fp:
...      fp.write(SIMPLE_FILE)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以使用 SSAFile.load 或者 from_string 加载&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pysubs2&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SSAFile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SSAEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;make_time&lt;/span&gt;
&lt;span class="n"&gt;subs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SSAFile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;subtitle.srt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# 或者从字符串中读取&lt;/span&gt;
&lt;span class="c1"&gt;# subs = SSAFile.from_string(字幕数据)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以把 SSAFile 当做数组使用，每个元素都是一个 SSAEvent，也就是一条字幕。SSAEvent 提供了不少方便的属性用于读取。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;subs[0].text  字幕文字，包含了样式
subs[0].start 字幕开始时间，单位毫秒
subs[0].end   字幕结束时间
subs[0].plaintext 纯文本

&amp;gt;&amp;gt;&amp;gt; for line in subs:
...     print(line.text)
&amp;quot;Once upon a time,&amp;quot;
&amp;quot;there was a SubRip file\\N&lt;span class="nt"&gt;&amp;lt;i&amp;gt;&lt;/span&gt;with&lt;span class="nt"&gt;&amp;lt;/i&amp;gt;&lt;/span&gt; two subtitles.&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意其中 text 中包含各种格式信息，换行是使用 \N 表示的。如果需要提取纯文本，可以使用 plaintext。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 13 Jun 2018 01:07:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-06-13:/posts/shi-yong-python-ti-qu-zi-mu-wen-jian.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>爬虫利器 Chrome Headless 和 Puppeteer 最佳实践</title><link>/posts/pa-chong-li-qi-chrome-headless-he-puppeteer-zui-jia-shi-jian.html</link><description>&lt;blockquote&gt;
&lt;p&gt;翻译自：https://docs.browserless.io/blog/2018/06/04/puppeteer-best-practices.html&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;browserless 已经运行了200万次的 chrome headless 请求，下面是他们总结出来的最佳实践：&lt;/p&gt;
&lt;h1&gt;一、不要使用无头浏览器&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" src="https://ws2.sinaimg.cn/large/006tNc79gy1fs056p3uvaj319w0fcacy.jpg"&gt;&lt;/p&gt;
&lt;p&gt;无头 Chrome 占用的大量资源&lt;/p&gt;
&lt;p&gt;无论如何，只要可以的话，不要运行无头浏览器。特别是千万别在你跑其他应用的服务器上跑。无头浏览器的行为难以预测，对资源占用非常多，就像是 Rick and Morty 里面的 Meseeks（美国动画片《瑞克和莫蒂》中，召唤出了过多的 Meseeks 导致出了大问题）。几乎所有你想通过浏览器用的事情（比如说运行 JavaScript）都可以使用简单的 Linux 工具来实现。&lt;code&gt;Cheerio&lt;/code&gt; 和其他的库提供了优雅的 Node API 来实现 HTTP 请求和采集等需求。&lt;/p&gt;
&lt;p&gt;比如，你可以像这样获取一个页面并抽取内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cheerio&lt;/span&gt; &lt;span class="nn"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cheerio&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;fetch&lt;/span&gt; &lt;span class="nn"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;node-fetch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getPrice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;const&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;const&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;const&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cheerio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;buy-now.price&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;getPrice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://my-cool-website.com/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;显然这肯定不能覆盖所有的方面，如果你正在读这篇文章的话，你可能需要一个无头浏览器，所以接着看吧。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Don't run a headless browser when you don't need to
二、不要在不需要的时候运行无头浏览器&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We've ran into numerous users that attempt to keep the browser open, even when not in use, so that it's always available for connections. While this might be a good strategy to help expedite session launch it'll only end in misery after a few hours. This is largely because browsers like to cache stuff and slowly eat more memory. Any time you're not actively using the browser, close it!&lt;/p&gt;
&lt;p&gt;我们遇到过好多客户尝试在不使用的时候也保持浏览器开着，这样他们就总能够直接连上浏览器。尽管这样能够有效地加快连接速度，但是最终会在几个小时内变糟。很大程度上是因为浏览器总会尝试缓存并且慢慢地吃掉内存。只要你不是在活跃地使用浏览器，就关掉它。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;puppeteer&lt;/span&gt; &lt;span class="nn"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;puppeteer&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;const&lt;/span&gt; &lt;span class="n"&gt;browser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;puppeteer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;launch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;const&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newPage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;goto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://www.example.com/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;More&lt;/span&gt; &lt;span class="n"&gt;stuff&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;Always&lt;/span&gt; &lt;span class="n"&gt;do&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At browserless we generally try to cover this error internally by always having some kind of session-timer, and closing the browser whenever the WebSocket is disconnected. However, if you're not using the service or the backing docker image, then be sure that something is closing the browser, otherwise you'll have a pretty awful time debugging the issue when you're paged in the middle of the night.&lt;/p&gt;
&lt;p&gt;在 browserless，我们会给每个会话设置一个定时器，而且在WebSocket链接关闭的时候关闭浏览器。但是如果你使用自己独立的浏览器的话，记得一定要关闭浏览器，否则你很可能在半夜还要陷入恶心的调试中。&lt;/p&gt;
&lt;p&gt;三、 &lt;code&gt;page.evaluate&lt;/code&gt; 是你的好朋友&lt;/p&gt;
&lt;p&gt;puppeteer has a lot of cool sugar methods that let you do things like save DOM selectors or more in the Node runtime. While this is of great convenience, you can easily shoot yourself in the foot if something happens on the page that mutates that DOM node in some fashion. As much as it feels "hacky" it's actualy just better to all your browser-side work in the context of the browser. This generally means loading up page.evaulate with all the work that needs to be done.&lt;/p&gt;
&lt;p&gt;Puppeteer 有一些很酷的语法糖，比如可以保存 DOM 选择器等等东西到 Node 运行时中。尽管这很方便，但是当有脚本在变换 DOM 节点的时候很可能坑你一把。尽管看起来有一些 hacky，但是最好还是在浏览器中运行浏览器这边的工作。也就是说使用 &lt;code&gt;page.evaluate&lt;/code&gt; 来操作。&lt;/p&gt;
&lt;p&gt;For instance, instead of doing something like this (which has 3 async actions):&lt;/p&gt;
&lt;p&gt;比如，不要使用下面这种方法（使用了三个 async 动作）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;const $anchor = await page.$(&amp;#39;a.buy-now&amp;#39;);
const link = await $anchor.getProperty(&amp;#39;href&amp;#39;);
await $anchor.click();

return link;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样做，使用了一个 async 动作：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;await page.evaluate(() =&amp;gt; {
    const $anchor = document.querySelector(&amp;#39;a.buy-now&amp;#39;);
    const text = $anchor.href;
    $anchor.click();
});
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The other pro about doing it in an evaluate call is that it's portable: meaning you can run this code inside of a browser to test versus trying to rewrite the Node code. Of course, you should always use the debugger where possible to shorten development time.&lt;/p&gt;
&lt;p&gt;A quick rule-of-thumb is to count the number of await's or then's happening in your code and if there's more than one then you're probably better off running the code inside a page.evaluate call. The reason here is that all async actions have to go back-and-forth between Node's runtime and the browser's, which means all the JSON serialization and deserializiation. While it's not a huge amount of parsing (since it's all backed by WebSockets) it still is taking up time that could better be spent doing something else.&lt;/p&gt;
&lt;p&gt;另外的好处是这样做是可移植的：也就是说你可以在浏览器中运行这个代码来测试下是不是需要重写你的 node 代码。当然，能用调试器调试的时候还是用调试器来缩短开发时间。&lt;/p&gt;
&lt;p&gt;最重要的规则就是数一下你是用的 await 的数量，如果超过 1 了，那么说明你最好把代码写在 page.evaluate 中。原因在于，所有的 async 函数都必须在 Node 和 浏览器直接传来传去，也就是需要不停地 json 序列化和反序列化。尽管这些解析成本也不是很高（有 WebSocket 支持），但是总还是要花费时间的。&lt;/p&gt;
&lt;p&gt;四、并行化浏览器，而不是页面&lt;/p&gt;
&lt;p&gt;Since we've determined that it's not good to run a browser, and that we should only run one when absolutely necessary, the next best-practice is to run only one session through each browser. While you actually might save some overhead by parallelizing work through pages, if one page crashes it can bring down the entire browser with it. That, plus each page isn't guaranteed to be totally clean (cookies and storage might bleed-through as seen here).&lt;/p&gt;
&lt;p&gt;上面我们已经说过尽量不要使用浏览器，而且只在需要的时候才打开浏览器，下面的这条最佳实践是——在一个浏览器中只使用一个会话。尽管通过页面来并行化可能会给你省下一些时间，如果一个页面崩溃了，可能会把整个浏览器都带翻车。而且，每个页面都不能保证是完全干净的（cookies 和存储可能会互相渗透）。&lt;/p&gt;
&lt;p&gt;Instead of this:&lt;/p&gt;
&lt;p&gt;不要这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;puppeteer&lt;/span&gt; &lt;span class="nn"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;puppeteer&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;Launch&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="n"&gt;browser&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;capture&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;promise&lt;/span&gt;
&lt;span class="n"&gt;const&lt;/span&gt; &lt;span class="n"&gt;launch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;puppeteer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;launch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="n"&gt;const&lt;/span&gt; &lt;span class="n"&gt;runJob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;Re&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;browser&lt;/span&gt; &lt;span class="n"&gt;here&lt;/span&gt;
    &lt;span class="n"&gt;const&lt;/span&gt; &lt;span class="n"&gt;browser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;launch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;const&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newPage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;goto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;const&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;要这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;puppeteer&lt;/span&gt; &lt;span class="nn"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;puppeteer&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;const&lt;/span&gt; &lt;span class="n"&gt;runJob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;Launch&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;clean&lt;/span&gt; &lt;span class="n"&gt;browser&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;every&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;job&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;const&lt;/span&gt; &lt;span class="n"&gt;browser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;puppeteer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;launch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;const&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newPage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;goto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;const&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Each new browser instance gets a clean --user-data-dir (unless otherwise specified), which means it's treated as a fresh session entirely. If Chrome crashes for whatever reason, it won't bring down any other sessions that are happening as well.&lt;/p&gt;
&lt;p&gt;每一个新的浏览器实例都会得到一个干净的 &lt;code&gt;--user-data-dir&lt;/code&gt; （除非你手工设定）。也就是说会是一个完全新的会话。如果 Chrome 崩溃了，也不会吧其他的会话一起干掉。&lt;/p&gt;
&lt;p&gt;五、队列和限制并发&lt;/p&gt;
&lt;p&gt;browserless 的一个核心功能是无缝限制并行和使用队列。也就是说消费程序可以直接使用 puppeteer.connect 而不需要自己实现一个队列。这避免了大量的问题，大部分是太多的 Chrome 实例杀掉了你的应用的可用资源。&lt;/p&gt;
&lt;p&gt;The best, and easiest way, is to pull our docker image and run it with the parameters you'd like:&lt;/p&gt;
&lt;p&gt;最好也最简单的方法是使用 browserless 提供的镜像：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;# Pull in Puppeteer@1.4.0 support&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="n"&gt;pull&lt;/span&gt; &lt;span class="n"&gt;browserless&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nl"&gt;chrome&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;release&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;puppeteer&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.4.0&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;MAX_CONCURRENT_SESSIONS=10&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;browserless&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nl"&gt;chrome&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;release&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;puppeteer&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.4.0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This limits the number of concurrent requests that can run to 10 (including debug sessions and more). You can also configure how much you'd like to queue as well with the MAX_QUEUE_LENGTH variable. As a general rule, you can typically run roughly 10 concurrent requests per GB of memory. CPU usage can spike for various things, but for the most part you'll need lots and lots of RAM.&lt;/p&gt;
&lt;p&gt;上面限制了并发连接数到10，还可以使用&lt;code&gt;MAX_QUEUE_LENGTH&lt;/code&gt;来配置队列的长度。总体来说，&lt;strong&gt;每1GB内存可以并行运行10个请求&lt;/strong&gt;。CPU 有时候会占用过多，但是总的来说瓶颈还是在内存上。&lt;/p&gt;
&lt;p&gt;六、不要忘记 &lt;code&gt;page.waitForNavigation&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果点击了链接之后，需要使用 page.waitForNavigation 来等待页面加载。&lt;/p&gt;
&lt;p&gt;下面这个不行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;await&lt;/span&gt; &lt;span class="nt"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;goto&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://example.com&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;await&lt;/span&gt; &lt;span class="nt"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;click&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;const&lt;/span&gt; &lt;span class="nt"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;await&lt;/span&gt; &lt;span class="nt"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;title&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="nt"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;log&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个可以&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;await&lt;/span&gt; &lt;span class="nt"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;goto&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://example.com&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;click&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;await&lt;/span&gt; &lt;span class="nt"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;waitForNavigation&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="nt"&gt;const&lt;/span&gt; &lt;span class="nt"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;await&lt;/span&gt; &lt;span class="nt"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;title&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="nt"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;log&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;七、使用 docker 来管理 Chrome&lt;/p&gt;
&lt;p&gt;Chrome 除了浏览之外，还会有好多的莫名其妙的线程，所以最好使用 docker 来管理&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 04 Jun 2018 19:04:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-06-04:/posts/pa-chong-li-qi-chrome-headless-he-puppeteer-zui-jia-shi-jian.html</guid><category>计算机</category><category>爬虫</category></item><item><title>Python爬虫利器——lxml 和 xpath 表达式</title><link>/posts/pythonpa-chong-li-qi-lxml-he-xpath-biao-da-shi.html</link><description>&lt;p&gt;最近要做下微信爬虫，之前写个小东西都是直接用正则提取数据就算了，如果需要更稳定的提取数据，还是使用 xpath 定位元素比较可靠。周末没事，从爬虫的角度研究了一下 python xml/html 相关的库。&lt;/p&gt;
&lt;p&gt;Python 标准库中自带了 xml 模块，但是性能不够好，而且缺乏一些人性化的 API。相比之下，第三方库 lxml 是用 Cython 实现的，而且增加了很多实用的功能，可谓爬虫处理网页数据的一件利器。&lt;/p&gt;
&lt;p&gt;严格来说，html 并不是 xml 的一种，不过 lxml 对于 xml 和 html 都有很好的支持，分别使用 &lt;code&gt;lxml.etree&lt;/code&gt; 和 &lt;code&gt;lxml.html&lt;/code&gt;两个模块。&lt;/p&gt;
&lt;h1&gt;解析&lt;/h1&gt;
&lt;p&gt;网页下载下来以后是个 bytes 的形式，需要构造 DOM 树：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;   ...: &amp;lt;p&amp;gt;hello&amp;lt;span id=&amp;#39;world&amp;#39;&amp;gt;world&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;   ...: &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;lxml.html&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lxml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromstring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Element&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x1059aa408&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Element 结构&lt;/h1&gt;
&lt;p&gt;生成的树是一个设计很精妙的结构，可以把它当做一个对象访问当前节点自身的文本节点，可以把他当做一个数组，元素就是他的子节点，可以把它当做一个字典，从而遍历它的属性，下面演示了 lxml 的常见用法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;In [5]: doc.text
Out[5]: &amp;#39;hello&amp;#39;

In [6]: doc.tag
Out[6]: &amp;#39;p&amp;#39;

In [7]: doc[0].tag
Out[7]: &amp;#39;span&amp;#39;

In [11]: for k, v in doc[0].items():
    ...:     print(k, v)
    ...:
id world

In [12]: doc[0].get(&amp;#39;id&amp;#39;)
Out[12]: &amp;#39;world&amp;#39;

In [13]: doc[0].attrib
Out[13]: {&amp;#39;id&amp;#39;: &amp;#39;world&amp;#39;}
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;遍历树的方法&lt;/h1&gt;
&lt;p&gt;doc 是一个树形结构，可以通过一些方法访问树中的其他节点：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;In [14]: doc.getroottree()  # 返回树
Out[14]: &lt;span class="nt"&gt;&amp;lt;lxml.etree._ElementTree&lt;/span&gt; &lt;span class="err"&gt;at&lt;/span&gt; &lt;span class="err"&gt;0x105360708&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

In [19]: doc.getroottree().getroot()  # 返回根节点，这里是 lxml 自动生成的 html 节点
Out[19]: &lt;span class="nt"&gt;&amp;lt;Element&lt;/span&gt; &lt;span class="err"&gt;html&lt;/span&gt; &lt;span class="err"&gt;at&lt;/span&gt; &lt;span class="err"&gt;0x10599da98&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

In [20]: doc.getparent()  # lxml 自动生成的 body 节点
Out[20]: &lt;span class="nt"&gt;&amp;lt;Element&lt;/span&gt; &lt;span class="err"&gt;body&lt;/span&gt; &lt;span class="err"&gt;at&lt;/span&gt; &lt;span class="err"&gt;0x1059a87c8&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

In [21]: doc.getprevious()

In [22]: doc.getnext()

In [23]: doc.text_content()
Out[23]: &amp;#39;helloworld&amp;#39;

In [25]: lxml.html.tostring(doc, pretty_print=True, encoding=&amp;#39;utf-8&amp;#39;)
Out[25]: b&amp;#39;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;hello&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;world&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;world&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;\n&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意因为我们给的是一个 html 的片段（&lt;code&gt;&amp;lt;p&amp;gt;...&amp;lt;/p&amp;gt;&lt;/code&gt;），所以 lxml 自动生成了 html 和 body 等节点已构成完整的 html 文档。&lt;/p&gt;
&lt;p&gt;如果需要显式地指定生成一个 html 片段文档还是完整文档，可以分别使用：lxml.html.fragment_fromstring 和 lxml.html.document_fromstring 两个方法。&lt;/p&gt;
&lt;p&gt;lxml 还有其他一些方法，都列在下面了：&lt;/p&gt;
&lt;p&gt;Element.tail    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Element.append(Element)   添加一个子元素&lt;/li&gt;
&lt;li&gt;Element.set('attr', value) 设置属性&lt;/li&gt;
&lt;li&gt;Element.iter(tag_name) 遍历所有后系元素，可以使用 &lt;code&gt;*&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;ElementTree.getelementpath(Element)   &lt;/li&gt;
&lt;li&gt;Element.getroottree() 返回对应的树&lt;/li&gt;
&lt;li&gt;ElementTree.getpath(Element)  返回一个元素的 xpath&lt;/li&gt;
&lt;li&gt;ElementTree.getroot() 返回根节点&lt;/li&gt;
&lt;li&gt;HtmlElement.drop_tree() 删除当前节点下的所有节点，但是保留text&lt;/li&gt;
&lt;li&gt;HtmlElement.drop_tag() 删除当前节点，但是保留它的子节点和text&lt;/li&gt;
&lt;li&gt;HtmlElement.classes 返回类&lt;/li&gt;
&lt;li&gt;HtmlElement.find_class(class_name) 按照 class 查找 tag&lt;/li&gt;
&lt;li&gt;HtmlElement.get_element_by_id(id, *default) 按照 id 查找元素&lt;/li&gt;
&lt;li&gt;HtmlElement.iterlinks() 遍历所有连接&lt;/li&gt;
&lt;li&gt;HtmlElement.make_links_absolute(base_url=None, resolve_base_href=True) 把所有连接变成绝对链接&lt;/li&gt;
&lt;li&gt;HtmlElement.resolve_base_href() 解析 base 标签&lt;/li&gt;
&lt;li&gt;HtmlElement.rewrite_links(link_repl_func) 替换所有的链接&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;XPath&lt;/h1&gt;
&lt;p&gt;XPath 实在太强大了，在定位元素方面绝对是秒杀 CSS 选择器。在 lxml 中，节点和树分别具有xpath 函数。&lt;/p&gt;
&lt;p&gt;lxml 中的 xpath 方法，对于 xpath 表达式应该返回元素，总是返回一个数组，即使只有一个元素&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;In [24]: doc.xpath(&amp;#39;//span/text()&amp;#39;)
Out[24]: [&amp;#39;world&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;lxml 中的 xpath 函数支持变量&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print(root.xpath(&amp;quot;$text&amp;quot;, text = &amp;quot;Hello World!&amp;quot;))
Hello World!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;xpath may return _ElementStringResult, which is not picklable, use xpath(smart_strings=False) to avoid this http://lxml.de/xpathxslt.html#xpath-return-values&lt;/p&gt;
&lt;p&gt;lxml 还支持几个函数 &lt;code&gt;find/findall&lt;/code&gt;，他们使用 ElementPath，是一种类似 xpath 的语言，感觉很是奇怪，lxml 的文档描述他是 xpath 的一个子集，暂时不看了。&lt;/p&gt;
&lt;h1&gt;常见问题&lt;/h1&gt;
&lt;p&gt;lxml 在遇到小于号的时候会出问题（按照标准，应该编码为 &lt;code&gt;&amp;amp;lt;&lt;/code&gt;），直接把后面的文档都丢了，但是浏览器兼容性比较好，不会有问题。&lt;/p&gt;
&lt;p&gt;by default, the lxml parser is not very error-proof, the html5parser lib is behaves more like your web browser.&lt;/p&gt;
&lt;p&gt;lxml.html.html5parser provides same interface with lxml.html&lt;/p&gt;
&lt;p&gt;tricks and traps&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sat, 02 Jun 2018 16:29:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-06-02:/posts/pythonpa-chong-li-qi-lxml-he-xpath-biao-da-shi.html</guid><category>计算机</category><category>爬虫</category></item><item><title>使用 supervisord 部署服务</title><link>/posts/shi-yong-supervisord-bu-shu-fu-wu.html</link><description>&lt;p&gt;在某一刻你会意识到你需要写一个长期运行的服务。如果有错误，这些脚本不应该停止运行，而且当系统重启的时候应该自动把这些脚本拉起来。&lt;/p&gt;
&lt;p&gt;为了实现这一点，我们需要一些东西来监控脚本。这些工具在脚本挂掉的时候重启他们，并且在系统启动的时候拉起他们。&lt;/p&gt;
&lt;h1&gt;脚本&lt;/h1&gt;
&lt;p&gt;这样的工具应该是怎样的呢？我们安装的大多数东西都带了某种进程监控的机制。比如说Upstart和Systemd。这些工具被许多系统用力啊监控重要的进程。当我们安装php5-fpm，Apache 和nginx的时候，他们通常已经和系统集成好了，以便于他们不会默默挂掉。&lt;/p&gt;
&lt;p&gt;然而，我们有时候需要一些简单点儿的解决方案。比如说我经常写一些 nodejs 的脚本来监控github上的某个动态并作相应的动作。node可以处理 http请求并且同时处理他们，也就是很适合作为一个一次性运行的服务。&lt;/p&gt;
&lt;p&gt;这些小的脚本可能不值得使用 Upstart 或者 Systemd 这种重量级的东西。&lt;/p&gt;
&lt;p&gt;下面是我们用来举例的脚本 我们把它放在 /srv/http.js 中&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;serve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeHead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
            &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\nSome Secrets:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SECRET_PASSPHRASE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SECRET_TWO&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\nThere&amp;#39;s no place like &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;ip&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Server running at http://&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;ip&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create a server listening on all networks&lt;/span&gt;
&lt;span class="nx"&gt;serve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;0.0.0.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All this service does is take a web request and print out a message. It's not useful in reality, but good for our purposes. We just want a service to run and monitor.&lt;/p&gt;
&lt;p&gt;Note that the service prints out two environmental variables: "SECRET_PASSPHRASE" and "SECRET_TWO". We'll see how we can pass these into a watched process.&lt;/p&gt;
&lt;p&gt;这个服务仅仅是接受一个 http 请求并打印一条消息。在现实中并没有什么卵用，但是用来演示很好。我们只是需要一个服务来运行和监控。&lt;/p&gt;
&lt;p&gt;注意到这个服务打印两个变量 "SECRET_PASSPHRASE" 和 "SECRET_TWO"。我们将会演示如何把这个传递个被监控的进程。&lt;/p&gt;
&lt;h1&gt;Supervisord&lt;/h1&gt;
&lt;p&gt;Supervisord is a simple and popular choice for process monitoring.&lt;/p&gt;
&lt;p&gt;Supervisord 是一个使用很广也很简单的进程监控工具。&lt;/p&gt;
&lt;h2&gt;安装&lt;/h2&gt;
&lt;p&gt;建议使用系统的包管理器安装，虽然可能版本稍微老一点，但是。不过 supervisor 还不支持 python 3，所以必须使用 python 2 版本。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;brew install supervisor
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在 linux 上可以通过apt-get来安装 supervisor，同样的命令。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-get install supervisor
service supervisor start
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;配置&lt;/h2&gt;
&lt;p&gt;下面我们来配置一个 supervisor 服务。&lt;/p&gt;
&lt;p&gt;打开 /etc/supervisor/supervisord.conf，我们可以看到最后一行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[include]&lt;/span&gt;
&lt;span class="na"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/etc/supervisor/conf.d/*.conf&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;所以我们只需要把我们的配置文件放在 /etc/supervisor/conf.d 文件夹下就好了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[program:nodehook]&lt;/span&gt;
&lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/usr/bin/node /srv/http.js&lt;/span&gt;
&lt;span class="na"&gt;directory&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/srv&lt;/span&gt;
&lt;span class="na"&gt;autostart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="na"&gt;autorestart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="na"&gt;startretries&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;3&lt;/span&gt;
&lt;span class="na"&gt;stderr_logfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/var/log/webhook/nodehook.err.log&lt;/span&gt;
&lt;span class="na"&gt;stdout_logfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/var/log/webhook/nodehook.out.log&lt;/span&gt;
&lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;www-data&lt;/span&gt;
&lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;SECRET_PASSPHRASE=&amp;#39;this is secret&amp;#39;,SECRET_TWO=&amp;#39;another secret&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;每个选项如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[program:nodehook] 定义运行的服务的名字。&lt;/li&gt;
&lt;li&gt;command 启动被监控的服务的命令，如果你需要传递命令行参数的话，也放在这里&lt;/li&gt;
&lt;li&gt;directory 设定进程的运行目录&lt;/li&gt;
&lt;li&gt;autostart 是否需要在 supervisord 启动的时候自动拉起&lt;/li&gt;
&lt;li&gt;autorestart 是否在程序挂掉的时候自动重新拉起&lt;/li&gt;
&lt;li&gt;startretries 如果启动失败，重试多少次&lt;/li&gt;
&lt;li&gt;stderr_logfile 标准错误输出写入到哪个文件&lt;/li&gt;
&lt;li&gt;stdout_logfile 标准输出写入到哪个文件&lt;/li&gt;
&lt;li&gt;user 运行进程的用户&lt;/li&gt;
&lt;li&gt;environment 传递给进程的环境变量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需要注意的是，supervisor 不会自动创建日志文件夹，所以需要我们首先创建好。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo mkdir /var/log/webhook
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;supervisor 配置文件的搜索路径包括：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/usr/local/etc/supervisord.conf
/usr/local/supervisord.conf
supervisord.conf  # 当前目录
etc/supervisord.conf
/etc/supervisord.conf
/etc/supervisor/supervisord.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;控制进程&lt;/h2&gt;
&lt;p&gt;可以使用 supervisorctl 来控制对应的服务了。不过需要首先启动 supervisord 的daemon 才行。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;supervisorctl reread
supervisorctl update
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样就可以启动刚刚定义的服务。supervisorctl 的其他功能可以查看帮助&lt;/p&gt;
&lt;h1&gt;Web 界面&lt;/h1&gt;
&lt;p&gt;We can configure a web interface which comes with Supervisord. This lets us see a list of all processes being monitored, as well as take action on them (restarting, stopping, clearing logs and checking output).&lt;/p&gt;
&lt;p&gt;supervisor 自带了一个 web 界面。这样我们就可以通过浏览器来管理进程了。&lt;/p&gt;
&lt;p&gt;Inside of /etc/supervisord.conf, add this:&lt;/p&gt;
&lt;p&gt;在 /etc/supervisord.conf 中添加：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[inet_http_server]&lt;/span&gt;
&lt;span class="na"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;9001&lt;/span&gt;
&lt;span class="na"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;user # Basic auth username&lt;/span&gt;
&lt;span class="na"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;pass # Basic auth password&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If we access our server in a web browser at port 9001, we'll see the web interface:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://ws4.sinaimg.cn/large/006tNc79ly1frmjham7zcj319i0c2mz7.jpg"&gt;&lt;/p&gt;
&lt;p&gt;ref: https://serversforhackers.com/c/monitoring-processes-with-supervisord&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Thu, 24 May 2018 00:32:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-05-24:/posts/shi-yong-supervisord-bu-shu-fu-wu.html</guid><category>后端</category><category>计算机</category></item><item><title>mysql 基础知识(7) - JSON 字段</title><link>/posts/mysql-ji-chu-zhi-shi-7-json-zi-duan.html</link><description>&lt;p&gt;在前公司的时候，大家习惯在每个表加一个 extra 字段来表示一些额外的字段，然后在 ORM 中使用的时候再解析出来，方便了扩展字段，但是缺点也很明显，extra 字段只能读取而无法进行查询。MySQL 5.7 终于支持了 json 字段，相当于加入了一些 NoSQL 的特性，这样就可以很方便得查询了。&lt;/p&gt;
&lt;h1&gt;json 字段的使用&lt;/h1&gt;
&lt;p&gt;建表：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CREATE TABLE `book` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(200) NOT NULL,
  `tags` json DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;直接使用 json 类型就可以了。注意 json 字段不可以作为主键，不可以作为外键，不过既然是 json 字段了，谁会这么做呢。。&lt;/p&gt;
&lt;p&gt;插入：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;INSERT INTO `book` (`title`, `tags`)
VALUES (
  &amp;#39;ECMAScript 2015: A SitePoint Anthology&amp;#39;,
  &amp;#39;[&amp;quot;JavaScript&amp;quot;, &amp;quot;ES2015&amp;quot;, &amp;quot;JSON&amp;quot;]&amp;#39;
);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用一个 json 字符串作为值插入即可。或者你也可以使用 json 相关的函数来表示json。&lt;/p&gt;
&lt;h1&gt;json 相关函数&lt;/h1&gt;
&lt;h2&gt;json path&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-- returns &amp;quot;SitePoint&amp;quot;:
SELECT JSON_EXTRACT(
  &amp;#39;{&amp;quot;id&amp;quot;: 1, &amp;quot;website&amp;quot;: &amp;quot;SitePoint&amp;quot;}&amp;#39;, 
  &amp;#39;$.website&amp;#39;
);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;json path 的语法，用 $ 开头，然后跟着下面的选择器:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt; 点后面跟着跟着一个字典里的名字, 比如 $.website&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[N]&lt;/code&gt; 表示数组里的第 N 个元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.[*]&lt;/code&gt; 表示选择字典里的所有元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[*]&lt;/code&gt; 表示选择数组里的所有元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prefix**suffix&lt;/code&gt; 表示以 prefix 开头，suffix 结尾的所有路径&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;举个栗子&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{
  &amp;quot;a&amp;quot;: 1,
  &amp;quot;b&amp;quot;: 2,
  &amp;quot;c&amp;quot;: [3, 4],
  &amp;quot;d&amp;quot;: {
    &amp;quot;e&amp;quot;: 5,
    &amp;quot;f&amp;quot;: 6
  }
}
the following paths:

$.a returns 1
$.c returns [3, 4]
$.c[1] returns 4
$.d.e returns 5
$**.e returns [5]
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;构造、修改 json 的函数&lt;/h2&gt;
&lt;p&gt;函数都比较简单，看注释就明白了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-- returns [1, 2, &amp;quot;abc&amp;quot;]:
SELECT JSON_ARRAY(1, 2, &amp;#39;abc&amp;#39;);

-- returns {&amp;quot;a&amp;quot;: 1, &amp;quot;b&amp;quot;: 2}:
SELECT JSON_OBJECT(&amp;#39;a&amp;#39;, 1, &amp;#39;b&amp;#39;, 2);

-- returns [&amp;quot;a&amp;quot;, 1, {&amp;quot;key&amp;quot;: &amp;quot;value&amp;quot;}]:
SELECT JSON_MERGE(&amp;#39;[&amp;quot;a&amp;quot;, 1]&amp;#39;, &amp;#39;{&amp;quot;key&amp;quot;: &amp;quot;value&amp;quot;}&amp;#39;);

-- returns ARRAY:
SELECT JSON_TYPE(&amp;#39;[1, 2, &amp;quot;abc&amp;quot;]&amp;#39;);

-- returns OBJECT:
SELECT JSON_TYPE(&amp;#39;{&amp;quot;a&amp;quot;: 1, &amp;quot;b&amp;quot;: 2}&amp;#39;);

-- returns an error:
SELECT JSON_TYPE(&amp;#39;{&amp;quot;a&amp;quot;: 1, &amp;quot;b&amp;quot;: 2&amp;#39;);

-- returns 1:
SELECT JSON_VALID(&amp;#39;[1, 2, &amp;quot;abc&amp;quot;]&amp;#39;);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;还有其他一些函数，可以查看文档：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JSON_SET(doc, path, val[, path, val]...) —
inserts or updates data in the document&lt;/li&gt;
&lt;li&gt;JSON_INSERT(doc, path, val[, path, val]...) —
inserts data into the document&lt;/li&gt;
&lt;li&gt;JSON_REPLACE(doc, path, val[, path, val]...) —
replaces data in the document&lt;/li&gt;
&lt;li&gt;JSON_MERGE(doc, doc[, doc]...) —
merges two or more documents&lt;/li&gt;
&lt;li&gt;JSON_ARRAY_APPEND(doc, path, val[, path, val]...) —
appends values to the end of an array&lt;/li&gt;
&lt;li&gt;JSON_ARRAY_INSERT(doc, path, val[, path, val]...) —
inserts an array within the document&lt;/li&gt;
&lt;li&gt;JSON_REMOVE(doc, path[, path]...) —
removes data from the document.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;查询 json 函数&lt;/h2&gt;
&lt;h3&gt;用于 where 子句中的函数&lt;/h3&gt;
&lt;p&gt;json_contains 用于选取数组中包含某个元素的行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-- all books with the &amp;#39;JavaScript&amp;#39; tag:
SELECT * FROM `book` 
WHERE JSON_CONTAINS(tags, &amp;#39;[&amp;quot;JavaScript&amp;quot;]&amp;#39;);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;json_search 用于选取字典中包含某个值的行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-- all books with tags starting &amp;#39;Java&amp;#39;:
SELECT * FROM `book` 
WHERE JSON_SEARCH(tags, &amp;#39;one&amp;#39;, &amp;#39;Java%&amp;#39;) IS NOT NULL;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;用于 select 子句中的 json 函数&lt;/h3&gt;
&lt;p&gt;可以使用 json path 语法从得到的 json 文档中抽取出某个值。&lt;/p&gt;
&lt;h2&gt;select 语句&lt;/h2&gt;
&lt;p&gt;要想在select语句中使用 json path 抽取元素可以使用下面的语法，也就是 &lt;code&gt;column-&amp;gt;path&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SELECT
  name,
  tags-&amp;gt;&amp;quot;$[0]&amp;quot; AS `tag1`
FROM `book`;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一个更复杂一点的例子：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;profile&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Craig&lt;/td&gt;
&lt;td _craigbuckler_="“craigbuckler”" _craigbuckler_facebook_:="“@craigbuckler”,“facebook”:" _craigbuckler_googleplus_:="“craigbuckler”,“googleplus”:" _twitter_:="“twitter”:"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;SitePoint&lt;/td&gt;
&lt;td _sitepointdotcom_="“@sitepointdotcom”" _twitter_:="“twitter”:"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SELECT
  name, profile-&amp;gt;&amp;quot;$.twitter&amp;quot; AS `twitter`
FROM `user`;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SELECT
  name, profile-&amp;gt;&amp;quot;$.twitter&amp;quot; AS `twitter`
FROM `user`
WHERE
  profile-&amp;gt;&amp;quot;$.twitter&amp;quot; IS NOT NULL;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;REF:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;https://www.sitepoint.com/use-json-data-fields-mysql-databases/&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sun, 20 May 2018 03:39:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-05-20:/posts/mysql-ji-chu-zhi-shi-7-json-zi-duan.html</guid><category>数据库</category><category>计算机</category></item><item><title>如何发布 Python 代码到 PyPI 上（2018）</title><link>/posts/ru-he-fa-bu-python-dai-ma-dao-pypi-shang-2018.html</link><description>&lt;p&gt;PyPI 是 Python 的集中仓库。通过把代码上传到 PyPI，其他人就可以使用使用 &lt;code&gt;pip install xxx&lt;/code&gt; 安装代码了。&lt;/p&gt;
&lt;p&gt;Python 的安装工具一直在不断演变，PyPI 的地址也从 pypi.python.org 变到了 pypi.org，因此网上的教程大多数都过时了，官方文档更新比较及时，但是也略过繁琐，这里写一篇简要的教程以飨读者。&lt;/p&gt;
&lt;p&gt;本文以作者的库 &lt;a href="https://github.com/yifeikong/aioify"&gt;aioify&lt;/a&gt; 为例&lt;/p&gt;
&lt;h1&gt;文件结构&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.
├── LICENSE.txt
├── MANIFEST.in
├── README.md
├── aioify
│   └── __init__.py
├── setup.cfg
└── setup.py
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;LICENSE.txt&lt;/h2&gt;
&lt;p&gt;库的开源协议，建议使用 Apache、MIT 等&lt;/p&gt;
&lt;h2&gt;MANIFEST.in&lt;/h2&gt;
&lt;p&gt;打包要包含的文件，Python 文件会自动包括在内，但是 README.md 不包含在内，所以需要特别注明：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;include *.md
include LICENSE.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;具体语法参见&lt;/p&gt;
&lt;h2&gt;README.md&lt;/h2&gt;
&lt;p&gt;说明文件，不多数了&lt;/p&gt;
&lt;h2&gt;aioify&lt;/h2&gt;
&lt;p&gt;这个是具体的代码的仓库&lt;/p&gt;
&lt;h2&gt;setup.cfg&lt;/h2&gt;
&lt;p&gt;用于指定 setup.py 的默认参数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[metadata]&lt;/span&gt;
&lt;span class="na"&gt;description-file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;README.md&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;setup.py&lt;/h2&gt;
&lt;p&gt;这个文件是整个打包过程的关键所在了。请参考下面的注释&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;distutils.core&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;

&lt;span class="c1"&gt;# 可选，读取 README 作为下面的 long_description&lt;/span&gt;
&lt;span class="n"&gt;here&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;here&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;README.md&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;long_description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;aioify&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="c1"&gt;# 包的名字&lt;/span&gt;
    &lt;span class="n"&gt;packages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;aioify&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;   &lt;span class="c1"&gt;# 同上&lt;/span&gt;
    &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;0.1.3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="c1"&gt;# 当前版本&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Make every python function async/await&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# 描述&lt;/span&gt;
    &lt;span class="n"&gt;long_description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;long_description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# 长描述，会显示在 PyPI 主页上&lt;/span&gt;
    &lt;span class="n"&gt;long_description_content_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;text/markdown&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# 长描述的格式，不过好像markdown支持还不是很好&lt;/span&gt;
    &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Yifei Kong&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# 作者&lt;/span&gt;
    &lt;span class="n"&gt;author_email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;kongyifei@gmail.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# 作者邮件&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://github.com/yifeikong/aioify&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# 项目地址&lt;/span&gt;
    &lt;span class="n"&gt;download_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://github.com/yifeikong/aioify/archive/0.1.3.tar.gz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# 下载链接，可选&lt;/span&gt;
    &lt;span class="n"&gt;keywords&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;async&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;await&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wrap&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;  &lt;span class="c1"&gt;# 关键词&lt;/span&gt;
    &lt;span class="c1"&gt;# 分类器，可以认为是 PyPI 的一些栏目，建议参考文档填写，可选&lt;/span&gt;
    &lt;span class="n"&gt;classifiers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;Development Status :: 3 - Alpha&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;Intended Audience :: Developers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;License :: OSI Approved :: MIT License&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;Programming Language :: Python :: 3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;Programming Language :: Python :: 3.5&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;Programming Language :: Python :: 3.6&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;Programming Language :: Python :: 3.7&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;python_requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;=3.5&amp;#39;&lt;/span&gt;  &lt;span class="c1"&gt;# 最低 Python 版本&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;上传&lt;/h1&gt;
&lt;h2&gt;本地测试&lt;/h2&gt;
&lt;p&gt;在项目的根目录，可以使用 pip 安装测试一下，看 setup.py 等文件是否有问题&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install -e .
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;注册账户&lt;/h2&gt;
&lt;p&gt;在 pypi.org 注册一个账户。另外，在 test.pypi.org 再注册一个测试账户，因为两个站之间是独立的，所以得注册两次。&lt;/p&gt;
&lt;h2&gt;配置 .pypirc 文件&lt;/h2&gt;
&lt;p&gt;打开 ~/.pypirc 输入一下内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[distutils]&lt;/span&gt;
&lt;span class="na"&gt;index-servers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&lt;/span&gt;
&lt;span class="s"&gt;  pypi&lt;/span&gt;
&lt;span class="s"&gt;  testpypi&lt;/span&gt;

&lt;span class="k"&gt;[pypi]&lt;/span&gt;
&lt;span class="na"&gt;username: 你的用户名&lt;/span&gt;
&lt;span class="na"&gt;password: 密码&lt;/span&gt;

&lt;span class="k"&gt;[testpypi]&lt;/span&gt;
&lt;span class="na"&gt;repository:https://test.pypi.org/legacy/&lt;/span&gt;
&lt;span class="na"&gt;username: 同上&lt;/span&gt;
&lt;span class="na"&gt;password: 同上&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;上传到 test.pypi.org&lt;/h2&gt;
&lt;p&gt;test.pypi.org 是专门用来在正式上传前测试的服务器，以免操作失误。&lt;/p&gt;
&lt;p&gt;打包&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python setup.py sdist
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后可以看到多出了 dist/ 目录&lt;/p&gt;
&lt;p&gt;上传&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install twine  # 现在官方推荐使用twine工具
twine upload dist/* --repository testpypi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后到 test.pypi.org/projects/xxx 就可以看到你的代码了~&lt;/p&gt;
&lt;h2&gt;上传到 pypi&lt;/h2&gt;
&lt;p&gt;一切验证无误之后，就可以上传到 PyPI 了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;twine upload dist/*
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更多细节介绍请参见官方文档：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;https://packaging.python.org/tutorials/distributing-packages/&lt;/li&gt;
&lt;li&gt;https://packaging.python.org/guides/using-testpypi/&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sat, 19 May 2018 11:01:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-05-19:/posts/ru-he-fa-bu-python-dai-ma-dao-pypi-shang-2018.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>Go 语言初体验</title><link>/posts/go-yu-yan-chu-ti-yan.html</link><description>&lt;h1&gt;安装&lt;/h1&gt;
&lt;p&gt;安装 go 很简单，在 mac 上直接使用 &lt;code&gt;brew install go&lt;/code&gt; 就可以了。注意的是需要设定GOPATH这个环境变量，这里设定到了 ~/.go 这个目录。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;export GOPATH=$HOME/.go
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;语法和风格&lt;/h1&gt;
&lt;p&gt;Golang的整个语法还是极其简单的，基本是 C 和 Python 的混合体。Go 语言详尽地规定了代码的风格，所以就不用为了大括号究竟是放在哪儿而开始圣战了。Go 语言对程序员的约束很强，不容易犯错&lt;/p&gt;
&lt;p&gt;Go 语言官方提供了一个工具 goimports 用来管理 import 语句，还不错。&lt;/p&gt;
&lt;p&gt;比如import进来的包必须使用，声明的变量也必须使用。import 语句必须在 package 语句后面.虽然有大括号，但是大括号的位置也是指定的。&lt;/p&gt;
&lt;h1&gt;类型&lt;/h1&gt;
&lt;p&gt;几乎所有的值提供了默认都会初始化到对应的零值，即使没有初始化，不少函数处理 nil 的时候也是按照零值处理，这样避免了好多无谓的异常抛出。在go中也不会遇到len(None)这种问题，即使len(nil)也会返回0。&lt;/p&gt;
&lt;p&gt;值得一提的是 Go 中的字符串，实际上是一个 byte 的只读数组，如果使用索引访问的话，是按照 byte 为单位来访问的。但是在打印和 range 的时候会直接按照 utf-8 解码输出。如果需要按照 rune（Go 语言对 unicode code point 的称呼）来遍历，需要使用 &lt;code&gt;unicode/utf8&lt;/code&gt; 这个包中的函数。&lt;/p&gt;
&lt;p&gt;即使字符串不是 utf-8的，或者不管怎样用错了编码，至少不会panic，而python中时不时就会抛出UnicodeDecodeError 。&lt;/p&gt;
&lt;p&gt;不用思考蛋疼的 Unicode 问题，不过虽然 Go 的string是 utf-8 的，但是使用下标访问的是字节，而使用 for range 访问的又是 rune&lt;/p&gt;
&lt;h2&gt;复合类型&lt;/h2&gt;
&lt;p&gt;像是 C 语言一样，Go 中也有定长数组，&lt;code&gt;var a [3]int&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在 Go 中经常作为变长数组使用的是 Slice。Slice 指的是一个数组的一个切片。在 Go 语言中，默认的函数调用都是值传递的，但是 Slice 做参数的时候传递的是一个 Slice Header，也就相当于按照引用传递。&lt;/p&gt;
&lt;p&gt;Map 类型是引用类型，也就是函数调用的时候是按照引用传递的。nil map 可以像空map一样使用，但是插入的时候会 panic，因为没有给他分配内存，所以 map 类型一般使用 make 初始化。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;m := make(map[string]int)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;循环&lt;/h2&gt;
&lt;p&gt;go 还从 C 中 继承了 &lt;code&gt;if (p = fopen("xxx", "w")) != NULL&lt;/code&gt; 这种在把赋值语句写在if中的写法，不过好在 Go 语言中可以写做两句。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if err := r.ParseForm(); err != nil {
      //...
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;另外 switch 语句默认就会 break 了，而不是 fall through 了。&lt;/p&gt;
&lt;p&gt;循环语句很有意思，Go 语言直接把 while 关键字扔掉了，只用 for 本身就够了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for {
// ...
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;就相当于其他语言中的 while(true) 了。&lt;/p&gt;
&lt;p&gt;不管是 Python 中的 for...in... 还是 JavaScript 中的 for...of... 语句，迭代数组和字典的时候多少感到一些不一致。在 Go 语言中，还是比较统一的，每次迭代都会返回两个值：key， value。&lt;/p&gt;
&lt;p&gt;迭代 slice&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;words := []string{&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;}
for i, word := range words {
    fmt.Printf(&amp;quot;%d -&amp;gt; %s&amp;quot;, i, word)
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;迭代 map&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;words := make(map[string]string)
words[&amp;quot;a&amp;quot;] = &amp;quot;a&amp;quot;
words[&amp;quot;b&amp;quot;] = &amp;quot;b&amp;quot;
for k, v := range words {
    fmt.Printf(&amp;quot;%s -&amp;gt; %s&amp;quot;, k, v)
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;goroutine&lt;/h1&gt;
&lt;p&gt;goroutine 相对于 Python 的 coroutine 的好处就在于它是抢占的，不用主动交出。&lt;/p&gt;
&lt;p&gt;Python 的 coroutine 需要特别小心不要调用阻塞性的函数，比如 time.sleep，而要使用asyncio.sleep，所以写起来不是非常得方便。Python必须使用 await 来显式交出控制，而 Go 中则没有这种限制。&lt;/p&gt;
&lt;h2&gt;Timers and tickers&lt;/h2&gt;
&lt;p&gt;Timers 定义在你在未来的某个时间想要去做一次某件事。而 Tickers 则是定期执行某一个动作。这两个有点像是 js 里面的 setTimeout 和 setInterval 两个函数。&lt;/p&gt;
&lt;p&gt;defer 实际上就相当于 C++ 中的RAII，和Python中的 with 语句&lt;/p&gt;
&lt;p&gt;Go 的类型总体来说，和 Python 的 duck type 有点像，而和 Java 严格的继承则是完全背道而驰的。&lt;/p&gt;
&lt;p&gt;发生赋值时候会不会检查类型呢？&lt;/p&gt;
&lt;p&gt;interface{}&lt;/p&gt;
&lt;h1&gt;io&lt;/h1&gt;
&lt;p&gt;一般读取统一从 io.Reader 类型中读取&lt;/p&gt;
&lt;p&gt;记得一定要使用append函数，而不要直接在slice的结尾通过下标添加字符，这样可能会panic&lt;/p&gt;
&lt;p&gt;函数应该接受 interface 作为参数，并使用 struct 作为返回值。&lt;/p&gt;
&lt;p&gt;目前为止有几个不爽的地方&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;nil 字典不能直接赋值，但是 nil slice 可以 append&lt;/li&gt;
&lt;li&gt;interface 的 nil 始终没有搞明白。empty slice(a[0:0]) 和 nil 也不一样&lt;/li&gt;
&lt;li&gt;没有一个统一的包管理工具，刚刚花一下午时间学习了 dep，号称是官方的试验，结果又看到一篇文章说 vgo 要取代 dep，WTF&lt;/li&gt;
&lt;li&gt;defer 执行的地方是函数的结尾，而不是块的结尾&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;p&gt;https://stackoverflow.com/questions/18058164/is-a-go-goroutine-a-coroutine&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 02 May 2018 02:54:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-05-02:/posts/go-yu-yan-chu-ti-yan.html</guid><category>golang</category><category>编程语言</category><category>计算机</category></item><item><title>Python urllib 模块</title><link>/posts/python-urllib-mo-kuai.html</link><description>&lt;p&gt;YN：网络访问的时候一定要记得设置一个合理的超时&lt;/p&gt;
&lt;p&gt;在 Python2 中，有两个urllib：urllib 和 urllib2，urllib基本只使用urllib.urlencode(), urllib.quote函数，其他功能都被对应的 urllib2中的函数替代了。&lt;/p&gt;
&lt;p&gt;Python3 把这两个模块进行了合并并拆分成了子模块，只使用 urllib 就好了。&lt;/p&gt;
&lt;h1&gt;发送 http 请求&lt;/h1&gt;
&lt;h2&gt;直接使用 urlopen&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;urllib.request.urlopen(url, data=None, [timeout, ] *, context) -&amp;gt; http.client.HTTPResponse
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;用于发送 GET 或者 POST 请求，如果有data，则发送的是 POST 请求.返回一个 file-like的http.client.HTTPResponse对象，这个对象也可以作为一个 context manager。&lt;/p&gt;
&lt;p&gt;info() | 返回headers
gerurl() | 返回 url，常用于判定是否被重定向
getcode() | 
read()/readlines() | 返回文件内容&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib.request&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://www.python.org/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;!DOCTYPE html PUBLIC &amp;quot;-//W3C//DTD XHTML 1.0 Transitional//EN&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;\&lt;span class="n"&gt;n&lt;/span&gt;\&lt;span class="n"&gt;n&lt;/span&gt;\&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;
&lt;span class="n"&gt;xmlns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://www.w3.org/1999/xhtml&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;xml&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;en&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;\&lt;span class="n"&gt;n&lt;/span&gt;\&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;\&lt;span class="n"&gt;n&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;meta&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;equiv&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;content-type&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;text/html; charset=utf-8&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;\&lt;span class="n"&gt;n&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="n"&gt;Programming&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;使用 Request 对象&lt;/h2&gt;
&lt;p&gt;如果需要更改默认的 header 等数据或者使用 PUT、DELETE 等方法，urlopen 还可以接受一个 Request对象，可以在 Request 对象中更改。&lt;/p&gt;
&lt;p&gt;Request 对象的定义：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;urllib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="nx"&gt;origin_req_host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;unverifiable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一个 request可以指定 method， url，可以使用 req.add_header添加header。&lt;/p&gt;
&lt;p&gt;可以使用 add_header 方法再添加额外的header，但是实际上是 set_header，并不能添加重复的，不要被名字迷惑了。&lt;/p&gt;
&lt;h2&gt;使用 Opener&lt;/h2&gt;
&lt;p&gt;urilib2.build_opener 返回一个打开器(OpenerDirector)，用于设定发出请求要经过的一些处理，可以设定代理，处理 cookie 等。OpenerDirector有一个属性addheaders，把他设定为一个包含键值 tuple 的 list，这样使用 opener 发送的每一个请求都会添加上这个 header。&lt;/p&gt;
&lt;p&gt;Then you could use opener.open instead of urllib2.urlopen&lt;/p&gt;
&lt;p&gt;Typical usage:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib2&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;cookielib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CookieJar&lt;/span&gt;
&lt;span class="n"&gt;cj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CookieJar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;opener&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;build_opener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urllib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTPCookieProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cj&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# input-type values from the html form&lt;/span&gt;
&lt;span class="n"&gt;formdata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;username&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;form-id&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1234&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;data_encoded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlencode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;formdata&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;opener&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://page.com/login.php&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data_encoded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib.request&lt;/span&gt;
&lt;span class="n"&gt;opener&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;build_opener&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;opener&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addheaders&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;User-agent&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Mozilla/5.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="n"&gt;opener&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://www.example.com/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From &lt;a href="http://stackoverflow.com/questions/3334809/python-urllib2-how-to-send-cookie-with-urlopen-request"&gt;http://stackoverflow.com/questions/3334809/python-urllib2-how-to-send-cookie-with-urlopen-request&lt;/a&gt; &lt;/p&gt;
&lt;h1&gt;异常：URLError HTTPError&lt;/h1&gt;
&lt;p&gt;URLError是 IOError 的子类, HTTPError.code is the http code &lt;/p&gt;
&lt;h1&gt;urllib.parse&lt;/h1&gt;
&lt;p&gt;urlparse and urlunparse is not as good as urlsplit&lt;/p&gt;
&lt;h2&gt;urlsplit&lt;/h2&gt;
&lt;p&gt;return a five element tuple by scheme://netloc/path?query#fragment&lt;/p&gt;
&lt;p&gt;Attribute   Index   Value   Value if not present
scheme  0   URL scheme specifier    scheme parameter
netloc  1   Network location part   empty string
path    2   Hierarchical path   empty string
query   3   Query component empty string
fragment    4   Fragment identifier empty string
username        User name   None
password        Password    None
hostname        Host name (lower case)  None
port        Port number as integer, if present  None&lt;/p&gt;
&lt;p&gt;note，the netloc contains domain and port&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; urlsplit(&amp;#39;www.cwi.nl/%7Eguido/Python.html&amp;#39;)
SplitResult(scheme=&amp;#39;&amp;#39;, netloc=&amp;#39;&amp;#39;, path=&amp;#39;www.cwi.nl/%7Eguido/Python.html&amp;#39;, query=&amp;#39;&amp;#39;, fragment=&amp;#39;&amp;#39;)
# notice the netloc will be wrong if &amp;quot;//&amp;quot; is missing
&amp;gt;&amp;gt;&amp;gt; urlsplit(&amp;#39;//www.cwi.nl/%7Eguido/Python.html&amp;#39;)
SplitResult(scheme=&amp;#39;&amp;#39;, netloc=&amp;#39;www.cwi.nl&amp;#39;, path=&amp;#39;/%7Eguido/Python.html&amp;#39;, query=&amp;#39;&amp;#39;, fragment=&amp;#39;&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;urlunsplit join the parse result。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;parse_qs(qs, keep_blank_values=False, encoding=&amp;#39;utf-8&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;parse a query string to { key: [values] } pair, note without '?'&lt;/p&gt;
&lt;p&gt;parse_qsl&lt;/p&gt;
&lt;p&gt;return a list of k,v tuple&lt;/p&gt;
&lt;p&gt;quote/quote_plus&lt;/p&gt;
&lt;p&gt;unquote&lt;/p&gt;
&lt;p&gt;urlencode&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 01 May 2018 14:36:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-05-01:/posts/python-urllib-mo-kuai.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>Python 中的 iterator 和 generator</title><link>/posts/python-zhong-de-iterator-he-generator.html</link><description>&lt;p&gt;这篇文章里面有不少概念都是错的，需要改进&lt;/p&gt;
&lt;h1&gt;迭代器&lt;/h1&gt;
&lt;p&gt;In Python, iterable and iterator have specific meanings.&lt;/p&gt;
&lt;p&gt;An iterable is an object that has an &lt;strong&gt;iter&lt;/strong&gt; method which returns an iterator, or which defines a &lt;strong&gt;getitem&lt;/strong&gt; method that can take sequential indexes starting from 0 (and raises an IndexError when the indexes are no longer valid). So an iterable is an object that you can get an iterator from.&lt;/p&gt;
&lt;p&gt;calling iter(iterable) will return a iterator&lt;/p&gt;
&lt;p&gt;An iterator is an object with a next (Python 2) or &lt;strong&gt;next&lt;/strong&gt; (Python 3) method. 
Whenever you use a for loop, or map, or a list comprehension, etc. in Python, the next method is called automatically to get each item from the iterator, thus going through the process of iteration.&lt;/p&gt;
&lt;h1&gt;Generators&lt;/h1&gt;
&lt;p&gt;Generators are iterators, but you can only iterate over them once. It's because they do not store all the values in memory, they generate the values on the fly. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def generator_function():
    for i in [0, 1, 2]:
        yield i * 2
for item in generator_function():
    print(item)
# Output: 0
# 2
# 4
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;as you can see, generators are typically a filter or mapper between sequences&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def fib(n):
    a = b = 1
    for i in range(n):
        yield a
        a, b = b, a + b
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From &lt;a href="http://book.pythontips.com/en/latest/generators.html"&gt;http://book.pythontips.com/en/latest/generators.html&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;迭代器协议&lt;/h1&gt;
&lt;p&gt;with open('file') as f:
    try:
        while True:
            value = next(f)
            print value
    except StopIteration:        pass&lt;/p&gt;
&lt;p&gt;The word “generator” is confusingly used to mean both the function that generates and what it generates. In this chapter, I’ll use the word “generator” to mean the genearted object and “generator function” to mean the function that generates it.&lt;/p&gt;
&lt;p&gt;Can you think about how it is working internally?&lt;/p&gt;
&lt;p&gt;When a generator function is called, it returns a generator object without even beginning execution of the function. When next method is called for the first time, the function starts executing until it reaches yield statement. The yielded value is returned by the next call.
The following example demonstrates the interplay between yield and call to next method on generator object.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 01 May 2018 06:19:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-05-01:/posts/python-zhong-de-iterator-he-generator.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>django forms</title><link>/posts/django-forms.html</link><description>&lt;p&gt;django 中的 form 和 model 的用法很像，都是定义一个类，然后指定一些字段就可以了&lt;/p&gt;
&lt;p&gt;最简单的form&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ContactForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EmailField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Textarea&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;clean_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cleaned_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;num_words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;num_words&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ValidationError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Not enough words!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def contact(request):
    if request.method == &amp;#39;POST&amp;#39;:
        form = ContactForm(request.POST)
        if form.is_valid():
            cd = form.cleaned_data
            send_mail(
                cd[&amp;#39;subject&amp;#39;],
                cd[&amp;#39;message&amp;#39;],
                cd.get(&amp;#39;email&amp;#39;, &amp;#39;noreply@example.com&amp;#39;),
                [&amp;#39;siteowner@example.com&amp;#39;],
            )
            return HttpResponseRedirect(&amp;#39;/contact/thanks/&amp;#39;)
    else:
        form = ContactForm()
        return render(request, &amp;#39;contact_form.html&amp;#39;, {&amp;#39;form&amp;#39;: form})
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;table&amp;gt;&lt;/span&gt;
        &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;form.as_table&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;csrf_token&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Submit&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;用法&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;form.&lt;strong&gt;str&lt;/strong&gt;()&lt;/td&gt;
&lt;td&gt;return table representation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;form.as_p()&lt;/td&gt;
&lt;td&gt;return p representation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;form.as_li()&lt;/td&gt;
&lt;td&gt;return li representation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;form.&lt;strong&gt;getitem&lt;/strong&gt;()&lt;/td&gt;
&lt;td&gt;return element tag&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;form.&lt;strong&gt;init&lt;/strong&gt;(dict)&lt;/td&gt;
&lt;td&gt;fill values&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;form.is_bound&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;form.is_valid()&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;form.cleaned_data&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Note not include table/ul/form tags, just the inside tags&lt;/p&gt;
&lt;h1&gt;ajax&lt;/h1&gt;
&lt;h2&gt;ajax 中如何指定 crsf token&lt;/h2&gt;
&lt;p&gt;axios 中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;axios&lt;/span&gt; &lt;span class="nn"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;axios&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;axios&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;defaults&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xsrfHeaderName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;X-CSRFTOKEN&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;axios&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;defaults&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xsrfCookieName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;csrftoken&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;settings.py 中&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CSRF_COOKIE_NAME = &amp;quot;csrftoken&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/39254562/csrf-with-django-reactredux-using-axios"&gt;参考&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 01 May 2018 04:52:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-05-01:/posts/django-forms.html</guid><category>Django</category><category>后端</category><category>计算机</category></item><item><title>Python time 模块</title><link>/posts/python-time-mo-kuai.html</link><description>&lt;p&gt;时间戳，struct_time 可以被认为是一个表示时间的整数序列，一共9项对应于 C 中对应的数据结构，注意其中不包含时区信息&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;函数&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;time.time&lt;/td&gt;
&lt;td&gt;获取当前时间戳，即 GMT 的 epoch 秒数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;time.clock()&lt;/td&gt;
&lt;td&gt;获取进程时间，即从进程开始执行的时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;time.sleep()&lt;/td&gt;
&lt;td&gt;停止当前线程若干秒&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;time.strftime&lt;/td&gt;
&lt;td&gt;产生可读时间字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;time.strptime&lt;/td&gt;
&lt;td&gt;parse time&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;time.strftime()/time.mktime()/time.asctime()&lt;/td&gt;
&lt;td&gt;均接受 struct_time 作为参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;time.gmtime()/time.localtime()/time.strptime()&lt;/td&gt;
&lt;td&gt;返回的是对应时间的struct_time&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1&gt;time.time vs time.clock&lt;/h1&gt;
&lt;p&gt;time.clock measures the cpu time spent, if you code does heavy IO or GPU computing, the result is WRONG， time.time is not precise but works all the time~&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 30 Apr 2018 14:40:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-04-30:/posts/python-time-mo-kuai.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>微信开发笔记</title><link>/posts/wei-xin-kai-fa-bi-ji.html</link><description>&lt;p&gt;可以使用微信的测试号学习如何开发
http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login&lt;/p&gt;
&lt;p&gt;公众号对于消息的处理相当于使用了微信的服务器做转发代理, 发送到公众号的后端服务器, 而一旦进入网页就相当于直接同服务器通信了.  微信会使用 POST 发送消息到服务器&lt;/p&gt;
&lt;p&gt;对于消息的处理有一个签名的过程, 这样后端服务器可以判断消息是否来自微信, 从而防止 API 被恶意滥用盗用.&lt;/p&gt;
&lt;p&gt;所以这些繁杂的事情不如交个框架去处理&lt;/p&gt;
&lt;p&gt;APPID/APPSECRET 相当于公众号的账号和密码, 通过这两个组合获取一个 access_token 用于平时访问, access_token 是有有效期的, 即使明文传送被泄露了也问题不大&lt;/p&gt;
&lt;p&gt;问题是, 服务器需要记得去刷新这个 token, 所以这些东西应该交给框架最好了&lt;/p&gt;
&lt;p&gt;微信开放了 JS SDK 可以使用图片语音地图等一系列的应用, 不错&lt;/p&gt;
&lt;p&gt;常用的一些 meta 标签&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;meta content=”width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0;” name=”viewport” /&gt; &lt;/li&gt;
&lt;li&gt;&lt;meta content=”yes” name=”apple-mobile-web-app-capable” /&gt;  &lt;!--允许全屏模式浏览--&gt;&lt;/li&gt;
&lt;li&gt;&lt;meta content=”black” name=”apple-mobile-web-app-status-bar-style” /&gt;  &lt;!--滚动条样式--&gt;&lt;/li&gt;
&lt;li&gt;&lt;meta content=”telephone=no” name=”format-detection” /&gt;  &lt;!--禁止识别电话号码--&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;iOS中浏览器直接访问站点时，navigator.standalone为false,从 主屏启动webapp 时，navigator.standalone为true
移动版本webkit 为 input元素提供了autocapitalize属性，通过指定autocapitalize=”off”来关闭键盘默认首字母大写
开发者指定 的 target属性就失效了，但是可以通过指定当前元素的-webkit-touch-callout样式属性为none来禁止iOS弹出这些按钮&lt;/p&gt;
&lt;p&gt;同样为一个img标签指定-webkit-touch-callout为none也会禁止设备弹出列表按钮，这样用户就无法保存＼复制你的图片了
指定文字标签的-webkit-user-select属性为none便可以禁止iOS用户选中文字&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 30 Apr 2018 10:05:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-04-30:/posts/wei-xin-kai-fa-bi-ji.html</guid><category>创业</category><category>机器人推广</category><category>运营与产品</category></item><item><title>django dump to csv</title><link>/posts/django-dump-to-csv.html</link><description>&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db.models.loading&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_model&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;qs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;outfile_path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Takes in a Django queryset and spits out a CSV file.&lt;/span&gt;

&lt;span class="sd"&gt;    Usage::&lt;/span&gt;

&lt;span class="sd"&gt;        &amp;gt;&amp;gt; from utils import dump2csv&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;gt;&amp;gt; from dummy_app.models import *&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;gt;&amp;gt; qs = DummyModel.objects.all()&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;gt;&amp;gt; dump2csv.dump(qs, &amp;#39;./data/dump.csv&amp;#39;)&lt;/span&gt;

&lt;span class="sd"&gt;    Based on a snippet by zbyte64::&lt;/span&gt;

&lt;span class="sd"&gt;        http://www.djangosnippets.org/snippets/790/&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;qs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;
    &lt;span class="n"&gt;writer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outfile_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_meta&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writerow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;qs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;callable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;unicode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writerow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 30 Apr 2018 09:59:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-04-30:/posts/django-dump-to-csv.html</guid><category>Django</category><category>后端</category><category>计算机</category></item><item><title>CSS 布局基础知识</title><link>/posts/css-bu-ju-ji-chu-zhi-shi.html</link><description>&lt;h1&gt;布局&lt;/h1&gt;
&lt;p&gt;网页的布局是面向文档流的，也就是每个元素默认都是从左到右，从上到下依次排列的。当然就像文章一样，有些元素比如标题默认就会另起一行，并且单独占据这一行。&lt;/p&gt;
&lt;p&gt;所有的元素都分为三类：inline、inline-block、和 block。&lt;/p&gt;
&lt;p&gt;其中 block 元素占据了一行的位置，即使他们的宽度不够一行，并且他们有自己的宽度和高度，比如 h1 元素。&lt;/p&gt;
&lt;p&gt;inline-block 结合了 inline 和 block 元素的特性，首先他布局是 inline 的，也就是不会另起一行，但是又可以设定单独的高度和宽度。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;display: none&lt;/code&gt; 将会完全不渲染该元素, &lt;code&gt;visibility: hidden&lt;/code&gt; 会渲染这个元素，只是在该显式的地方留下空白&lt;/p&gt;
&lt;h2&gt;使用 inline-box 的布局&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="https://ws1.sinaimg.cn/large/006tKfTcly1fquqqp791hj30kr0i1gpe.jpg"&gt;&lt;/p&gt;
&lt;h1&gt;定位&lt;/h1&gt;
&lt;p&gt;CSS 中元素的定位有如下几种，可以使用 position 指定&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;static&lt;/td&gt;
&lt;td&gt;默认的定位方法，指的是在文档中的位置是静态的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;relative&lt;/td&gt;
&lt;td&gt;relative to its static positions, if set(top, left, bottom, right)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fixed&lt;/td&gt;
&lt;td&gt;fixed to the viewport, if set(top, left, bottom, right)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;absolute&lt;/td&gt;
&lt;td&gt;behaves like fixed, but relative to nearest non-static ancestor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;td&gt;floated element will become a block element, but it will not occupy one row&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;使用 float 的布局&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://ws3.sinaimg.cn/large/006tKfTcly1fsktnrsi5dj30kc0hp781.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;后续元素没有占据指定空间&lt;/h3&gt;
&lt;p&gt;元素浮动之后，它后面的元素就会去占据它的位置，然而我们往往并不想影响到后面的元素，所以应该指定它后面的元素清除浮动。&lt;/p&gt;
&lt;p&gt;not stretching parent element
floating elements will also not stretching the element containing it, to fix that, add overflow: auto to the parent element&lt;/p&gt;
&lt;h1&gt;盒模型&lt;/h1&gt;
&lt;h2&gt;讨厌的 content-box 模型&lt;/h2&gt;
&lt;p&gt;width set width of the content, and &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;padding will push out the border... &lt;/li&gt;
&lt;li&gt;background-color only set for content area&lt;/li&gt;
&lt;li&gt;entire width is for border&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="https://ws3.sinaimg.cn/large/006tKfTcly1fqurrspk7ej30ah09gq39.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;符合直觉的 border-box 模型&lt;/h2&gt;
&lt;p&gt;as shown by the picture, border-box width sets the entire width, contains border + padding + content&lt;/p&gt;
&lt;p&gt;如下图所示，border-box 模型设定的快读包含了 &lt;strong&gt;border + padding + content&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://ws4.sinaimg.cn/large/006tKfTcly1fqurs7z1chj30ge094wgg.jpg"&gt;&lt;/p&gt;
&lt;h1&gt;responsive design&lt;/h1&gt;
&lt;p&gt;query device width&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@media screen and (mid/max-width: xxxpx)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;set viewport&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width/320, initial-scale=0.5, maximum-scale=1, minimum-scale=3, user-scalable=no&amp;quot; /&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;记录 CSS 的一个坑&lt;/h1&gt;
&lt;h2&gt;在 td 元素上无法使用 width&lt;/h2&gt;
&lt;p&gt;可以通过指定： table-layout: fixed 解决&lt;/p&gt;
&lt;h2&gt;centering&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;css columns&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;column-count&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;x&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;column-gap&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;xpx&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;通过 js 获得最终 CSS 属性&lt;/h2&gt;
&lt;p&gt;https://developer.mozilla.org/zh-CN/docs/Web/API/Window/getComputedStyle&lt;/p&gt;
&lt;h1&gt;reference&lt;/h1&gt;
&lt;p&gt;[1] http://learnlayout.com&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 30 Apr 2018 07:56:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-04-30:/posts/css-bu-ju-ji-chu-zhi-shi.html</guid><category>CSS</category><category>大前端</category><category>计算机</category></item><item><title>Python coroutine 以及和 Goroutine 的对比</title><link>/posts/python-coroutine-yi-ji-he-goroutine-de-dui-bi.html</link><description>&lt;h1&gt;Python 中的 coroutine&lt;/h1&gt;
&lt;p&gt;Python 3.5 中终于引入了 &lt;code&gt;async&lt;/code&gt; 和 &lt;code&gt;await&lt;/code&gt; 关键字，算是在语言层次上支持了 coroutine。&lt;/p&gt;
&lt;h2&gt;coroutine 基础&lt;/h2&gt;
&lt;p&gt;coroutine 又被称为用户级线程，也就是可以在一个系统线程中模拟多个线程构成的并发操作，对于有 GIL 的 Python 来说，反正线程也是费了，不失为多了一种选择，使用 asyncio 来爬取网页可以这样写：&lt;/p&gt;
&lt;p&gt;首先，&lt;code&gt;pip install pulsar lxml&lt;/code&gt;。pulsar 是一个异步版的 http 库。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pulsar.apps&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;

&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HttpClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://toutiao.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意其中我们使用 &lt;code&gt;async def&lt;/code&gt; 定义了一个 &lt;code&gt;coroutine function&lt;/code&gt;，并且在其中调用（await）了另一个 coroutine function。在 Python 中只有在使用 async def 定义的函数上下文中才能使用 await。&lt;/p&gt;
&lt;p&gt;如果我们需要下载多个网址呢？&lt;/p&gt;
&lt;h2&gt;coroutine 并发&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;lxml.html&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pulsar.apps&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;


&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HttpClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;doc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lxml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromstring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//title/text()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;urls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://www.toutiao.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://www.douban.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://www.sina.com.cn&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;futures&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;future&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ensure_future&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;futures&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gather&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;futures&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;get_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在上面的例子中，我们在 for 循环使用 &lt;code&gt;asyncio.ensure_future&lt;/code&gt; 创建了三个 Future 对象。Future 对象指的是可以在未来（future）的某个时间获得结果的一个对象。然后我们使用 &lt;code&gt;asyncio.gather&lt;/code&gt; 来同时 &lt;code&gt;await&lt;/code&gt; 了这三个 Future。在我们 await 的时候，可以认为这三个 future 是"并发"执行的。如果你了解 JavaScript 的话，可以看出来 Future 就相当于 JS 中的 Promise 对象。注意这里的并发指的是 IO 上可以并发加速，如果从 CPU 上考虑的话，因为都是在一个线程中，也就没有性能提升的，所以说协程特别适合于 IO 密集的应用。&lt;/p&gt;
&lt;p&gt;不过，对于初学者来说，经常会直接 await 每一个协程，导致实际上没有任何并发。比如下面的代码就是错误的：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;async def main():
    urls = [&amp;#39;https://www.toutiao.com&amp;#39;, &amp;#39;https://www.douban.com&amp;#39;, &amp;#39;https://www.sina.com.cn&amp;#39;]
    for url in urls:
        page = await fetch(url)
        print(page)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面这种错误有人称作 async/await hell，可以参考这篇文章：&lt;a href="https://www.zcfy.cc/article/how-to-escape-async-await-hell"&gt;如何避免async/await地狱&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;协程的调度&lt;/h2&gt;
&lt;p&gt;我们知道线程是内核进行抢占式的调度的，这样就确保了每个线程都有执行的机会。而 coroutine 运行在同一个线程中，由语言的运行时中的 EventLoop（事件循环）来进行调度。和大多数语言一样，在 Python 中，协程的调度是非抢占式的，也就是说一个协程必须主动让出执行机会，其他协程才有机会运行。让出执行的关键字就是 &lt;code&gt;await&lt;/code&gt;。也就是说一个协程如果阻塞了，持续不让出 CPU，那么整个线程就卡住了，没有任何并发。比如下面的例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="n"&gt;time_sleep&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_work&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;future&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ensure_future&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;do_work&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="n"&gt;futures&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gather&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;futures&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;time_sleep&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;no_concurrent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;  &lt;span class="mf"&gt;0.13&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="mf"&gt;0.03&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;system&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;cpu&lt;/span&gt; &lt;span class="mf"&gt;3.173&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;虽然我们使用了 asyncio.gather 来并发执行，但是依然可以看到执行时间是 3.173s。因为 time.sleep 是一个阻塞性的操作，只能顺序执行，所以整个运行时间就是 3s。如果要修复这个程序可以改成这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% cat aio_sleep.py&lt;/span&gt;

&lt;span class="c"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;do_work&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;...&lt;/span&gt;

&lt;span class="c"&gt;% time python aio_sleep.py&lt;/span&gt;
&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;aio_sleep&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;  &lt;span class="mf"&gt;0.13&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="mf"&gt;0.03&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;system&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="c"&gt;% cpu 1.166 total&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用 asyncio.sleep 替换了阻塞的 time.sleep，执行时间是 1.166s。这样暴露两个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Python 整个异步编程生态的问题，之前标准库和各种第三方库的阻塞性函数都不能用了，requests 不能用了，redis.py 不能用了，甚至 open 函数都不能用了。所以 Python 的最大问题不是不好用，而是生态环境不好。&lt;/li&gt;
&lt;li&gt;一旦开始采用 async 函数，那么你整个程序都必须是 async 的，不然总会有阻塞的地方，也就是说 async 具有传染性。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这两点结合在一起导致想要写一个完全异步的 Python 程序还是有一定挑战的。&lt;/p&gt;
&lt;h1&gt;Goroutine&lt;/h1&gt;
&lt;p&gt;最近闲暇时间看了看 Go 语言相关的东西。发现 Go 原生的并发模型非常好用。Go 中的 goroutine 类似于其他语言中的 corouine，最重要的是 goroutine 是 go 与生俱来的特性，所以几乎所有库都是可以直接用的，避免了 Python 中需要把所有库重写一遍的问题。&lt;/p&gt;
&lt;p&gt;用 Go 来重写一下并发下载：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;io/ioutil&amp;quot;&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;log&amp;quot;&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;net/http&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bodies&lt;/span&gt; &lt;span class="n"&gt;chan&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatalf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;error &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ioutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;bodies&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;urls&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;https://www.toutiao.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;https://www.douban.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;https://www.sina.com.cn&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;bodies&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chan&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt; &lt;span class="n"&gt;urls&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bodies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;bodies&lt;/span&gt;&lt;span class="p"&gt;)[:&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--------------------&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bodies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Goroutine 的调度&lt;/h2&gt;
&lt;p&gt;Goroutine 中不需要显式使用 await 交出控制权，但是 Go 也不会严格按照时间片去调度 goroutine，而是会在可能阻塞的地方插入调度。Goroutine 的调度可以看做是半抢占式的。&lt;/p&gt;
&lt;h2&gt;和系统线程之间的映射关系&lt;/h2&gt;
&lt;p&gt;Python 中的协程是严格的 1:N 关系，也就是一个线程对应了多个协程。而 Go 中是 M:N 的关系，也就是 N 个协程会映射分配到 M 个线程上，这样带来了两点好处：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CPU 密集的应用使用 goroutine 也会获得加速；&lt;/li&gt;
&lt;li&gt;即使有少量阻塞的操作，也只会阻塞某个 worker 线程，而不会把整个程序阻塞。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总之，在高并发方面，Go 语言的确有不少优势。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sun, 29 Apr 2018 05:44:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-04-29:/posts/python-coroutine-yi-ji-he-goroutine-de-dui-bi.html</guid><category>golang</category><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>函数式编程中的 Pattern Matching (模式匹配)</title><link>/posts/han-shu-shi-bian-cheng-zhong-de-pattern-matching-mo-shi-pi-pei.html</link><description>&lt;p&gt;以 haskell 为例，简单来说，pattern 就像是数学中的分段函数。通过使用 pattern matching，就可以对不同的参数定义不同的函数体。当调用函数的时候，可以通过对比实参和形参的模式就可以选择正确的函数体。&lt;/p&gt;
&lt;p&gt;比较一下&lt;/p&gt;
&lt;p&gt;&lt;img src="https://ws3.sinaimg.cn/large/006tKfTcly1fqq6q36pkij30aq02cglo.jpg" max-width="400px" /&gt;&lt;/p&gt;
&lt;p&gt;和对应的 haskell 代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fib 0 = 1
fib 1 = 1
fib n | n &amp;gt;= 2 
      = fib (n-1) + fib (n-2)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意在分段函数中 "n ≥ 2" 这个条件在 haskell 中变成了一个 guard。但是另外两个条件就是简单的 pattern。Pattern 就是可以测试值和结构的条件，比如 &lt;code&gt;x:xs&lt;/code&gt;, &lt;code&gt;(x, y, z)&lt;/code&gt;, 或者 &lt;code&gt;x&lt;/code&gt;。在一个分段函数定义中，基于 &lt;code&gt;=&lt;/code&gt; 或者 &lt;code&gt;∈&lt;/code&gt; 的条件会变成简单的 pattern，而其他的更广义的条件会变成 guard。如果用 guard 来重写一下上面的函数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fib n | n == 0 = 1
      | n == 1 = 1
      | n &amp;gt;= 2 = fib (n-1) + fib (n-2)
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;和 switch/ifelse 语句的区别&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;编译器可以替你检查你是否覆盖了所有情形&lt;/li&gt;
&lt;li&gt;可以直接把 pattern match 作为一个赋值语句&lt;/li&gt;
&lt;li&gt;如果你有一个不同类型复合的变量，每一个匹配结果都会有不同的类型&lt;/li&gt;
&lt;li&gt;使用 pattern matching 在某些情况下要简洁得多[4]&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;REF&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;https://stackoverflow.com/questions/2225774/haskell-pattern-matching-what-is-it&lt;/li&gt;
&lt;li&gt;https://www.zhihu.com/question/22344888&lt;/li&gt;
&lt;li&gt;https://stackoverflow.com/questions/199918/explaining-pattern-matching-vs-switch&lt;/li&gt;
&lt;li&gt;https://hongjiang.info/scala-pattern-matching-1/&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Thu, 26 Apr 2018 09:18:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-04-26:/posts/han-shu-shi-bian-cheng-zhong-de-pattern-matching-mo-shi-pi-pei.html</guid><category>编程语言</category><category>计算机</category></item><item><title>[译] 用 Python 编写一个模板引擎</title><link>/posts/yi-yong-python-bian-xie-yi-ge-mo-ban-yin-qing.html</link><description>&lt;p&gt;一直对模板引擎的实现很好奇，正好看到了&lt;a href="http://alexmic.net/building-a-template-engine/"&gt;这篇&lt;/a&gt;文章，翻译一下，供大家学习、参考。&lt;/p&gt;
&lt;p&gt;我们编写一个最简单的模板引擎，并且探索一下它的底层实现。如果你想直接看代码的话，&lt;a href="https://github.com/alexmic/microtemplates"&gt;GitHub&lt;/a&gt; 是你的好朋友&lt;/p&gt;
&lt;h1&gt;语言设计&lt;/h1&gt;
&lt;p&gt;这里设计的模板语言非常基础。使用两种标签，变量和块。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- 变量使用 `&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="err"&gt;和&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="c"&gt;` 作为标识--&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;my_var&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- 块使用 `{%` 和 `%}` 作为标识--&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;each&lt;/span&gt; &lt;span class="nv"&gt;items&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;it&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;大多数的块需要使用关闭标签，关闭标签使用&lt;code&gt;{% end %}&lt;/code&gt;表示。&lt;/p&gt;
&lt;p&gt;这个模板引擎能够处理基本的循环和条件语句，而且也支持在块中使用 callable。在我看来，能够在模板中调用任意的 Python 函数非常方便。&lt;/p&gt;
&lt;h1&gt;循环&lt;/h1&gt;
&lt;p&gt;使用循环可以遍历集合或者 iterable。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;each&lt;/span&gt; &lt;span class="nv"&gt;people&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;it.name&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;each&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;it&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;each&lt;/span&gt; &lt;span class="nv"&gt;records&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;.name&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在上面的例子里面，people 是一个集合，&lt;code&gt;it&lt;/code&gt; 指向了当前迭代的元素。使用点分隔的路径会被解析成字典属性。使用 &lt;code&gt;..&lt;/code&gt; 可以访问外部上下文中的对象。&lt;/p&gt;
&lt;h1&gt;条件语句&lt;/h1&gt;
&lt;p&gt;条件语句不需要多解释。这个语言支持 if 和 else 结构，而且支持 &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;, &lt;code&gt;is&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt; 这几个操作符。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;more than 5&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;less than or equal to 5&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;调用块&lt;/h1&gt;
&lt;p&gt;Callable 可以通过模板上下文传递，并且使用普通位置参数或者具名参数调用。调用块不需要使用 end 关闭。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- 使用普通参数... --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{% call prettify date_created %}&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- ...使用具名参数 --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;{% call log &amp;#39;here&amp;#39; verbosity=&amp;#39;debug&amp;#39; %}&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;原理&lt;/h1&gt;
&lt;p&gt;在探索引擎是如何编译和渲染模板之前，我们需要了解下在内存中如何表示一个编译好的模板。&lt;/p&gt;
&lt;p&gt;编译器使用抽象语法树（Abstract Syntax Tree, AST）来表示计算机程序。AST 是对源代码进行词法分析（lexical analysis）的结果。AST 相对源代码来说有很多好处，比如说它不包含任何无关紧要的文本元素，比如说分隔符这种。而且，树中的节点可以使用属性来添加更多的功能，而不需要改动代码。&lt;/p&gt;
&lt;p&gt;我们会解析并分析模板来构造这样一棵树，并用它来表示编译后的模板。渲染的时候，遍历这棵树，传给它对应的上下文，然后输出 HTML。&lt;/p&gt;
&lt;h1&gt;模板切词（tokenize）&lt;/h1&gt;
&lt;p&gt;解析的第一步是把内容分隔成不同的片段。每个片段可以是任意的 HTML 或者是一个标签。这里使用正则表达式和 &lt;code&gt;split()&lt;/code&gt; 函数分隔文本。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;VAR_TOKEN_START = &amp;#39;{{&amp;#39;
VAR_TOKEN_END = &amp;#39;}}&amp;#39;
BLOCK_TOKEN_START = &amp;#39;{%&amp;#39;
BLOCK_TOKEN_END = &amp;#39;%}&amp;#39;
TOK_REGEX = re.compile(r&amp;quot;(%s.*?%s|%s.*?%s)&amp;quot; % (
    VAR_TOKEN_START,
    VAR_TOKEN_END,
    BLOCK_TOKEN_START,
    BLOCK_TOKEN_END
))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;让我们来看一下 TOK_REGEX。可以看到这个正则的意思是 TOK_REGEX 要么是一个变量标签，要么是一个块标签，这是为了让变量标签和块标签都能够分隔文本。表达式的最外层是一个括号，用来捕获匹配到的文本。其中的 &lt;code&gt;?&lt;/code&gt; 表示非贪婪的匹配。我们想让我们的正则表达式是惰性的，并且在第一次匹配到的时候停下来。&lt;/p&gt;
&lt;p&gt;下面这个例子实际展示了一下上面的正则:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; TOK_REGEX.split(&amp;#39;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;each&lt;/span&gt; &lt;span class="nv"&gt;vars&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;i&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;it&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/i&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endeach&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&amp;#39;)
[&amp;#39;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;each&lt;/span&gt; &lt;span class="nv"&gt;vars&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&amp;#39;, &amp;#39;&lt;span class="nt"&gt;&amp;lt;i&amp;gt;&lt;/span&gt;&amp;#39;, &amp;#39;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;it&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&amp;#39;, &amp;#39;&lt;span class="nt"&gt;&amp;lt;/i&amp;gt;&lt;/span&gt;&amp;#39;, &amp;#39;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endeach&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;把每个片段封装成 Fragment 对象。这个对象包含了片段的类型，并且可以作为编译函数的参数。片段有以下四种类型：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;VAR_FRAGMENT = 0
OPEN_BLOCK_FRAGMENT = 1
CLOSE_BLOCK_FRAGMENT = 2
TEXT_FRAGMENT = 3
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;构建 AST&lt;/h1&gt;
&lt;p&gt;一旦我们做好了分词，下一步就可以遍历每个片段并构建语法树了。我们使用 Node 类来作为树的节点的基类，然后创建对每一种节点类型创建子类。每个子类都必须提供 &lt;code&gt;process_fragment&lt;/code&gt; 和 &lt;code&gt;render&lt;/code&gt; 方法。&lt;code&gt;process_fragment&lt;/code&gt; 用来进一步解析片段的内容并且把需要的属性存到 &lt;code&gt;Node&lt;/code&gt; 对象上。&lt;code&gt;render&lt;/code&gt; 方法负责使用提供的上下文转换对应的节点内容到 HTML。&lt;/p&gt;
&lt;p&gt;子类也可以实现 &lt;code&gt;enter_scope&lt;/code&gt; 和 &lt;code&gt;exit_scope&lt;/code&gt; 钩子方法，这两个方法不是必须的。在编译器编译期间，会调用这两个钩子函数，他们应该负责进一步的初始化和清理工作。当一个 &lt;code&gt;Node&lt;/code&gt; 创建了一个新的作用域（scope）的时候，会调用 &lt;code&gt;enter_scope&lt;/code&gt;，当退出作用域时，会调用 &lt;code&gt;exit_scope。关于作用域&lt;/code&gt;，下面会讲到。&lt;/p&gt;
&lt;p&gt;Node 基类如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;_Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fragment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;creates_scope&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;False&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;process_fragment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fragment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;process_fragment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fragment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;pass&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;enter_scope&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;pass&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;pass&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;exit_scope&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;pass&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;render_children&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;None&lt;/span&gt;:
            &lt;span class="kt"&gt;children&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;
        &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;render_child&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="nx"&gt;child_html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;child_html&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child_html&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;render_child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下面是变量节点的定义：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;_Variable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_Node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;process_fragment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fragment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fragment&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;resolve_in_context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;为了确定 Node 的类型（并且进一步初始化正确的类），需要查看片段的类型和文本。文本和变量片段直接翻译成文本节点和变量节点。块片段需要一些额外的处理 —— 他们的类型是使用块命令来确定的。比如说：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% each items %}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;是一个 &lt;code&gt;each&lt;/code&gt; 类型的块节点，因为块命令是 each。&lt;/p&gt;
&lt;p&gt;一个节点也可以创建作用域。在编译时，我们记录当前的作用域，并且把新的节点作为作为当前作用域的子节点。一旦遇到一个正确的关闭标签，关闭当前作用域，并且从作用域栈中把当前作用域 pop 出来，使用栈顶作为新的作用域。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def compile(self):
    root = _Root()
    scope_stack = [root]
    for fragment in self.each_fragment():
        if not scope_stack:
            raise TemplateError(&amp;#39;nesting issues&amp;#39;)
        parent_scope = scope_stack[-1]
        if fragment.type == CLOSE_BLOCK_FRAGMENT:
            parent_scope.exit_scope()
            scope_stack.pop()
            continue
        new_node = self.create_node(fragment)
        if new_node:
            parent_scope.children.append(new_node)
            if new_node.creates_scope:
                scope_stack.append(new_node)
                new_node.enter_scope()
    return root
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;渲染&lt;/h1&gt;
&lt;p&gt;管线的最后一步就是把 AST 渲染成 HTML 了。这一步访问 AST 中的所有节点并且使用传递给模板的 context 参数调用 render 方法。在渲染过程中，render 不断地解析上下文变量的值。可以使用使用 &lt;code&gt;ast.literal_eval&lt;/code&gt; 函数，它可以安全的执行包含了 Python 代码的字符串。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def eval_expression(expr):
    try:
        return &amp;#39;literal&amp;#39;, ast.literal_eval(expr)
    except ValueError, SyntaxError:
        return &amp;#39;name&amp;#39;, expr
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果我们使用上下文变量，而不是字面量的话，需要在上下文中搜索来找到它的值。在这里需要处理包含点的变量名以及使用两个点访问外部上下文的变量。下面是 resolve 函数，也是整个难题的最后一部分了~&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def resolve(name, context):
    if name.startswith(&amp;#39;..&amp;#39;):
        context = context.get(&amp;#39;..&amp;#39;, {})
        name = name[2:]
    try:
        for tok in name.split(&amp;#39;.&amp;#39;):
            context = context[tok]
        return context
    except KeyError:
        raise TemplateContextError(name)
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;结论&lt;/h1&gt;
&lt;p&gt;我希望这个小小的学术联系能够让你对模板引擎是怎样工作的有一点初步的感觉。这个生产级别的代码还差得很远，但是也可以作为你开发更好的工具的基础。&lt;/p&gt;
&lt;p&gt;你可以在 GitHub 上找到完整的代码，你也可以进一步在 Hacker News 上讨论。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;感谢 Nassos Hadjipapas, Alex Loizou, Panagiotis Papageorgiou and Gearoid O’Rourke 审阅本文。&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 17 Apr 2018 07:08:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-04-17:/posts/yi-yong-python-bian-xie-yi-ge-mo-ban-yin-qing.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>Linux 上的 DNS 缓存</title><link>/posts/linux-shang-de-dns-huan-cun.html</link><description>&lt;p&gt;Linux 内核中没有 DNS 缓存&lt;/p&gt;
&lt;p&gt;Firefox 内置了 DNS 缓存&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nscd&lt;/code&gt; 可以提供本地的 DNS 缓存，好多机器开了，但是据说这个服务有很多问题。&lt;/p&gt;
&lt;p&gt;Python 使用了 &lt;code&gt;getaddrinfo&lt;/code&gt; 函数，会使用系统的 DNS 缓存&lt;/p&gt;
&lt;p&gt;像 &lt;code&gt;nslookup&lt;/code&gt; 和是dig这样的工具会 bypass 掉 DNS 缓存。&lt;/p&gt;
&lt;p&gt;另外 Go 语言好像也不会使用本机的 DNS 缓存，即使开了&lt;/p&gt;
&lt;p&gt;https://wiki.archlinux.org/index.php/dnsmasq 可以用来做本地缓存&lt;/p&gt;
&lt;p&gt;还可以使用systemd提供的resolved&lt;/p&gt;
&lt;p&gt;1 https://stackoverflow.com/questions/11020027/dns-caching-in-linux&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Fri, 13 Apr 2018 05:51:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-04-13:/posts/linux-shang-de-dns-huan-cun.html</guid><category>计算机</category><category>网络</category></item><item><title>读《The Anatomy of a large-scale hypertextual Web search engine》</title><link>/posts/du-the-anatomy-of-a-large-scale-hypertextual-web-search-engine.html</link><description>&lt;p&gt;Google 在1997年的论文[1], 到现在(2017)的话, 已经有二十年的历史了, 然而对于编写一个小的搜索引擎, 依然有好多具有指导意义的地方.&lt;/p&gt;
&lt;p&gt;The Anatomy of a large-scale hypertextual Web search engine 这篇论文应该是一片总结性质的论文, 而且论文并没有多少的关于数据结构等的实现细节. 只是大体描绘了一下架构.&lt;/p&gt;
&lt;h1&gt;Google的算法&lt;/h1&gt;
&lt;p&gt;首先, Google大量使用了在超文本也就是网页中存在的结构, 也就是锚文本和链接. 还有就是如何有效的处理在网页上, 所有人都可以任意发布任何文字的问题, Google在这片文章里给的解决方案是PageRank.&lt;/p&gt;
&lt;p&gt;在20年前, 主要问题是, 网页已经开始快速增长, 然而当时的所有搜索引擎给出的结果只是搜索结果的数量也增长了, 却没能把最相关的结果放在首页. 因为人们并不会因为给出结果多而去多看几页, 所以这样的结果是不可取的. 在设计Google的过程中, Google还考虑了随着web规模的增长, 会对现有的体系造成的影响以及如何应对.&lt;/p&gt;
&lt;p&gt;Google 还表达了对当时的搜索引擎都是商业化的, 因而一些诸如用户查询之类的结果无法共学术应用的情况表达了不满. (呵呵, Google这不是打自己的脸么)&lt;/p&gt;
&lt;p&gt;对于 PageRank 算法, 提到了简单的公式:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://ws1.sinaimg.cn/large/006tKfTcly1fqazehy4zdj30im02mmxd.jpg"&gt;&lt;/p&gt;
&lt;p&gt;其中Tx表示的是指向A页面的所有页面, C表示的是一个页面上所有的外链. 对于这个公式的解释是这样的. 假设有一个随机的浏览者, 他不断的点击网页中的链接, 从不点后退, 直到他感到烦了, 然后在随机的拿一个网页开始点击. 其中d就表示了这个人会感到烦了的概率. 这样造成的结果就是如果一个网页有很多的的外链指向他的话, 他就有很大的机会获得比较高的PR, 或者如果一个很权威的站点指向的他的话, 也有很大机会获得比较高的PR.&lt;/p&gt;
&lt;p&gt;对于锚文本, 大多数网站都是把他和所在的页联系起来, Google还把锚文本以及PR值和它指向的页面联系起来.&lt;/p&gt;
&lt;h1&gt;Google的架构&lt;/h1&gt;
&lt;p&gt;其实这部分才是我最感兴趣的地方. 之所以今天会抽出时间来阅读这篇论文, 主要就是想写个小爬虫, 然后发现写来写去, 太不优雅了, 才想起翻出Google的论文读一读.&lt;/p&gt;
&lt;h2&gt;Google整体架构&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="https://ws2.sinaimg.cn/large/006tKfTcly1fqazes7038j30gn0iitbl.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Google的架构非常的模块化, 基本上可以看到整个图, 就知道每个模块是负责做什么的. 大概分成了几个部分: 爬虫(下载器), indexer, barrel, sorter, 和(searcher)前端服务. &lt;/p&gt;
&lt;p&gt;其中&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;爬虫负责下载网页, 其中每一个url都会有一个唯一的docID.&lt;/li&gt;
&lt;li&gt;indexer负责解析网页中的单词, 生成hit记录, 并产生前向索引. 然后抽出所有的链接.&lt;/li&gt;
&lt;li&gt;URLResolver会把indexer生成的锚文本读取并放到锚文本和链接放到索引中, 然后生成一个docID -&amp;gt; docID 的映射数据库. 这个数据库用来计算PageRank.&lt;/li&gt;
&lt;li&gt;sorter根据indexer生成的正向索引, 根据wordID建立反向索引. 为了节省内存, 这块是inplace做的. 并且产生了wordID的列表和偏移&lt;/li&gt;
&lt;li&gt;searcher负责接收用户的请求, 然后使用DumpLexicon产生的lexicon和倒排和PageRank一起做出响应.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;用到的数据结构&lt;/h2&gt;
&lt;p&gt;由于一个磁盘寻道就会花费 10ms 的时间(1997), 所以Google几乎所有的数据结构都是存在大文件中的. 他们实现了基于固定宽度ISAM, 按照docID排序的document索引, 索引中包含了当前文件状态, 指向repository的指针, 文件的校验和, 不同的统计信息等. 变长信息, 比如标题和url存在另一个文件中. (YN: SSD对这个问题有什么影响呢)&lt;/p&gt;
&lt;p&gt;hitlist指的是某个单词在谋篇文档中出现的位置, 字体, 大小写等信息. Google手写了一个htilist的编码模式, 对于每个hit花费2byte&lt;/p&gt;
&lt;p&gt;barrel中存放按照docID排序存放document&lt;/p&gt;
&lt;h2&gt;模块&lt;/h2&gt;
&lt;h3&gt;爬虫&lt;/h3&gt;
&lt;p&gt;爬虫又分为了两个部分, URLServer 负责分发URL给Crawler. Crawler 是分布式的, 有多个实例, 负责下载网页. 每获得一个URL的时候, 都会生成一个docID. Google使用了一个URLServer 和 3个Crawler. 每一个Crawler大概会维持300个连接, 可以达到每秒钟爬取100个网页. 并且使用了异步IO来管理事件.&lt;/p&gt;
&lt;h4&gt;DNS&lt;/h4&gt;
&lt;p&gt;Google指出爬虫的一个瓶颈在于每个请求都需要去请求DNS. 所以他们在每一个Crawler上都设置了DNS 缓存.&lt;/p&gt;
&lt;p&gt;YN: 对于HTTP 1.1来说, 默认连接都是keep-alive的, 对于URLServer分发连接应该应该同一个域名尽量分发到同一个crawler上, 这样可以尽量避免建立连接的开销.&lt;/p&gt;
&lt;p&gt;indexer会把下载到的网页分解成hit记录,每一个hit记录了单词, 在文档中的位置, 和大概的字体大小和是否是大写等因素. indexer还会把所有的链接都抽取出来, 并存到一个anchor文件中. 这个文件保存了链接的指向和锚文本等元素.&lt;/p&gt;
&lt;h2&gt;rank&lt;/h2&gt;
&lt;p&gt;Google并没有手工为每一个因素指定多少权重, 而是设计了一套反馈系统来帮助我们调节参数.&lt;/p&gt;
&lt;h1&gt;结果评估&lt;/h1&gt;
&lt;p&gt;Google认为他们的搜索能够产生最好的结果的原因是因为使用了PageRank. Google在9天内下载了2600万的网页, indexer的处理能力在 54qps, 其中&lt;/p&gt;
&lt;h1&gt;拓展&lt;/h1&gt;
&lt;p&gt;query cacheing, smart disk allocation, subindices&lt;/p&gt;
&lt;p&gt;链接合适应该重新抓取, 何时应该抓取新连接&lt;/p&gt;
&lt;p&gt;使用了NFS, 性能有问题&lt;/p&gt;
&lt;h2&gt;YN:&lt;/h2&gt;
&lt;p&gt;如何判定为一个hub也 -&amp;gt; 识别列表
hub页的链接产出率 -&amp;gt; 根据一个列表页是否产生新连接来动态的调整hub页的抓取频率&lt;/p&gt;
&lt;p&gt;[1] http://infolab.stanford.edu/~backrub/google.html&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Fri, 13 Apr 2018 05:48:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-04-13:/posts/du-the-anatomy-of-a-large-scale-hypertextual-web-search-engine.html</guid><category>计算机</category><category>爬虫</category></item><item><title>爬虫 IP 封禁与反封禁</title><link>/posts/pa-chong-ip-feng-jin-yu-fan-feng-jin.html</link><description>&lt;p&gt;反爬虫的核心在于区分开正常用户访问和恶意爬虫用户。来源 IP 是访问很重要的一个特征，我们可以从来源 IP 的角度来做出不少反爬虫策略。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是否是代理IP&lt;/li&gt;
&lt;li&gt;是否是民用IP&lt;/li&gt;
&lt;li&gt;IP 地理信息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般来说，大规模的爬虫我们都会放到服务器上去跑，搭建代理集群也会在服务器上，而正常用户的IP地址则来自家用IP范围内。这就给反爬虫的一方提供了便利，对于来自数据中心的请求可以直接限制访问甚至直接屏蔽掉，而对于家用的IP地址则宽容一些。&lt;/p&gt;
&lt;p&gt;下面我们来看几个实例&lt;/p&gt;
&lt;h1&gt;直接爬取网站&lt;/h1&gt;
&lt;p&gt;一般正常用户的页面访问量很小，如果发现某个 IP 的访问量特别大，那么肯定是爬虫，直接封禁即可，或者每次都需要输入验证码访问。&lt;/p&gt;
&lt;p&gt;IP 被封禁后一般不会被解封，或者需要很长时间，这时候只有两种思路，要么降低频率，更改自己的行为特征，避免被封，要么更换 IP。一般来说，不管怎样更改自己的行为，访问量还是很难降下来的，这时候只能换一个 IP 继续爬。&lt;/p&gt;
&lt;h1&gt;使用代理网站提供的代理IP&lt;/h1&gt;
&lt;p&gt;一些黑客会使用端口扫描器扫描互联网上的开放代理，然后免费或者付费提供给其他用户使用，比如下面这些网站：&lt;/p&gt;
&lt;p&gt;&lt;img alt="免费代理" src="https://ws2.sinaimg.cn/large/006tNbRwly1fu6vtfrvgvj30zy0pgn3y.jpg"&gt;&lt;/p&gt;
&lt;p&gt;但是这些网站的代理中能直接使用的可能不到10%，而且失效时间很短。所以要使用这些代理 IP，需要首先爬取这些网站，然后随取随用。&lt;/p&gt;
&lt;h1&gt;利用 ADSL 服务器更换 IP&lt;/h1&gt;
&lt;p&gt;网上有一些小的厂商代理了各地运营商的服务，搭建了一些小的服务器，一般内存只有 512M，而硬盘只有 8G，但是好处是通过 ADSL 上网，因此可以随时更换 IP。比如笔者搭建的这个动态代理：&lt;/p&gt;
&lt;p&gt;&lt;img alt="ADSL" src="https://ws4.sinaimg.cn/large/006tNbRwly1fu6vpix9s0j30wq0aa77o.jpg"&gt;&lt;/p&gt;
&lt;p&gt;每三十分钟更换一次 IP，而这些服务器也很便宜，在 100-200 每月，所以大可以搭建一个集群，这样基本上一个 IP 被封之前也基本被换掉了。&lt;/p&gt;
&lt;p&gt;要封禁这种用户也很简单，可以看出虽然 IP 在更换，但是基本上还是在一个 B 段之内，一个 B 段也就6w个用户，直接封了就行了&lt;/p&gt;
&lt;h1&gt;利用数据中心提供的更换 IP 接口来&lt;/h1&gt;
&lt;p&gt;有些爬虫会利用阿里云或者AWS的弹性 IP 来爬数据，反爬虫的第一步可以把阿里云的 IP 都屏蔽掉，正常用户一般是不会用这些 IP 来访问的。&lt;/p&gt;
&lt;h1&gt;附录&lt;/h1&gt;
&lt;p&gt;阿里云的出口 IP 列表：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;deny 42.96.128.0/17;
deny 42.120.0.0/16;
deny 42.121.0.0/16;
deny 42.156.128.0/17;
deny 110.75.0.0/16;
deny 110.76.0.0/19;
deny 110.76.32.0/20;
deny 110.76.48.0/20;
deny 110.173.192.0/20;
deny 110.173.208.0/20;
deny 112.74.0.0/16;
deny 112.124.0.0/16;
deny 112.127.0.0/16;
deny 114.215.0.0/16;
deny 115.28.0.0/16;
deny 115.29.0.0/16;
deny 115.124.16.0/22;
deny 115.124.20.0/22;
deny 115.124.24.0/21;
deny 119.38.208.0/21;
deny 119.38.216.0/21;
deny 119.42.224.0/20;
deny 119.42.242.0/23;
deny 119.42.244.0/22;
deny 120.24.0.0/14;
deny 120.24.0.0/16;
deny 120.25.0.0/18;
deny 120.25.64.0/19;
deny 120.25.96.0/21;
deny 120.25.108.0/24;
deny 120.25.110.0/24;
deny 120.25.111.0/24;
deny 121.0.16.0/21;
deny 121.0.24.0/22;
deny 121.0.28.0/22;
deny 121.40.0.0/14;
deny 121.42.0.0/18;
deny 121.42.0.0/24;
deny 121.42.64.0/18;
deny 121.42.128.0/18;
deny 121.42.192.0/19;
deny 121.42.224.0/19;
deny 121.196.0.0/16;
deny 121.197.0.0/16;
deny 121.198.0.0/16;
deny 121.199.0.0/16;
deny 140.205.0.0/16;
deny 203.209.250.0/23;
deny 218.244.128.0/19;
deny 223.4.0.0/16;
deny 223.5.0.0/16;
deny 223.5.5.0/24;
deny 223.6.0.0/16;
deny 223.6.6.0/24;
deny 223.7.0.0/16;
101.200.0.0/15 
101.37.0.0/16 
101.37.0.0/17 
101.37.0.0/24 
101.37.128.0/17 
103.52.196.0/22 
103.52.196.0/23 
103.52.196.0/24 
103.52.198.0/23 
106.11.0.0/16 
106.11.0.0/17 
106.11.0.0/18 
106.11.1.0/24 
106.11.128.0/17 
106.11.32.0/22 
106.11.36.0/22 
106.11.48.0/21 
106.11.56.0/21 
106.11.64.0/19 
110.173.192.0/20 
110.173.196.0/24 
110.173.208.0/20 
110.75.0.0/16 
110.75.236.0/22 
110.75.239.0/24 
110.75.240.0/20 
110.75.242.0/24 
110.75.243.0/24 
110.75.244.0/22 
110.76.0.0/19 
110.76.21.0/24 
110.76.32.0/20 
110.76.48.0/20 
112.124.0.0/16 
112.125.0.0/16 
112.126.0.0/16 
112.127.0.0/16 
112.74.0.0/16 
112.74.0.0/17 
112.74.116.0/22 
112.74.120.0/22 
112.74.128.0/17 
112.74.32.0/19 
112.74.64.0/22 
112.74.68.0/22 
114.215.0.0/16 
114.55.0.0/16 
114.55.0.0/17 
114.55.128.0/17 
115.124.16.0/22 
115.124.20.0/22 
115.124.24.0/21 
115.28.0.0/16 
115.29.0.0/16 
118.190.0.0/16 
118.190.0.0/17 
118.190.0.0/24 
118.190.128.0/17 
118.31.0.0/16 
118.31.0.0/17 
118.31.0.0/24 
118.31.128.0/17 
119.38.208.0/21 
119.38.216.0/21 
119.38.219.0/24 
119.42.224.0/20 
119.42.242.0/23 
119.42.244.0/22 
119.42.248.0/21 
120.24.0.0/14 
120.24.0.0/15 
120.25.0.0/18 
120.25.104.0/22 
120.25.108.0/24 
120.25.110.0/24 
120.25.111.0/24 
120.25.112.0/23 
120.25.115.0/24 
120.25.136.0/22 
120.25.64.0/19 
120.25.96.0/21 
120.27.0.0/17 
120.27.128.0/17 
120.27.128.0/18 
120.27.192.0/18 
120.55.0.0/16 
120.76.0.0/15 
120.76.0.0/16 
120.77.0.0/16 
120.78.0.0/15 
121.0.16.0/21 
121.0.24.0/22 
121.0.28.0/22 
121.196.0.0/16 
121.197.0.0/16 
121.198.0.0/16 
121.199.0.0/16 
121.40.0.0/14 
121.42.0.0/18 
121.42.0.0/24 
121.42.128.0/18 
121.42.17.0/24 
121.42.192.0/19 
121.42.224.0/19 
121.42.64.0/18 
123.56.0.0/15 
123.56.0.0/16 
123.57.0.0/16 
139.129.0.0/16 
139.129.0.0/17 
139.129.128.0/17 
139.196.0.0/16 
139.196.0.0/17 
139.196.128.0/17 
139.224.0.0/16 
139.224.0.0/17 
139.224.128.0/17 
140.205.0.0/16 
140.205.128.0/18 
140.205.192.0/18 
140.205.32.0/19 
140.205.76.0/24 
182.92.0.0/16 
203.107.0.0/24 
203.107.1.0/24 
203.209.224.0/19 
218.244.128.0/19 
223.4.0.0/16 
223.5.0.0/16 
223.5.5.0/24 
223.6.0.0/16 
223.6.6.0/24 
223.7.0.0/16 
39.100.0.0/14 
39.104.0.0/14 
39.104.0.0/15 
39.104.0.0/24 
39.106.0.0/15 
39.108.0.0/16 
39.108.0.0/17 
39.108.0.0/24 
39.108.128.0/17 
39.96.0.0/13 
39.96.0.0/14 
39.96.0.0/24 
42.120.0.0/16 
42.121.0.0/16 
42.156.128.0/17 
42.96.128.0/17 
45.113.40.0/22 
45.113.40.0/23 
45.113.40.0/24 
45.113.42.0/23 
47.92.0.0/14 
47.92.0.0/15 
47.92.0.0/24 
47.94.0.0/15
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Fri, 13 Apr 2018 00:26:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-04-13:/posts/pa-chong-ip-feng-jin-yu-fan-feng-jin.html</guid><category>计算机</category><category>爬虫</category></item><item><title>The Problem with Pocket</title><link>/posts/the-problem-with-pocket.html</link><description>&lt;p&gt;I started using Pocket about six years ago. Back then it's a Firefox plugin named Read It Later. I saved about 1000+ articles to read-it-later. But until now, when I quit my job, I finally got some time to read those articles. Then I got this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://ws2.sinaimg.cn/large/006tKfTcly1fq9zaefzlnj31kw0zmdqu.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I thought that pocket's server would retrive the article for me, and store the copy so that I can read it when ever I got time. It turns out that I was wrong, Pocket only fetches the article on the computer or phone, it only stores the url in the cloud. That's too bad, a lot of my saved pages have gone 404ed.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Thu, 12 Apr 2018 08:50:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-04-12:/posts/the-problem-with-pocket.html</guid><category>他山之石</category><category>创业</category></item><item><title>pv - 在 Linux 下查看命令执行进度</title><link>/posts/pv-zai-linux-xia-cha-kan-ming-ling-zhi-xing-jin-du.html</link><description>&lt;p&gt;pv 是 Pipe Viewer 的缩写，也就是管道查看器。挡在命令行执行命令的时候，可以通过使用 pv 来指导当前的进度。&lt;/p&gt;
&lt;h1&gt;使用&lt;/h1&gt;
&lt;h2&gt;替换 cat&lt;/h2&gt;
&lt;p&gt;比如你要把一个日志打包好下载：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% gzip -c access.log &amp;gt; access.log.gz&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以改成&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% cat access.log | gzip &amp;gt; access.log.gz&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用 pv&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% pv access.log | gzip &amp;gt; access.log.gz&lt;/span&gt;
&lt;span class="mi"&gt;611&lt;/span&gt;&lt;span class="n"&gt;MB&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;58.3&lt;/span&gt;&lt;span class="n"&gt;MB&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[=&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;      &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="c"&gt;% ETA 0:00:59&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;使用多个 pv&lt;/h2&gt;
&lt;p&gt;可以使用多个 pv 来查看在不同阶段的速率&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pv -cN &lt;span class="nb"&gt;source&lt;/span&gt; access.log &lt;span class="p"&gt;|&lt;/span&gt; gzip &lt;span class="p"&gt;|&lt;/span&gt; pv -cN gzip &amp;gt; access.log.gz
source:  760MB &lt;span class="m"&gt;0&lt;/span&gt;:00:15 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;37&lt;/span&gt;.4MB/s&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[=&lt;/span&gt;&amp;gt;     &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="m"&gt;19&lt;/span&gt;% ETA &lt;span class="m"&gt;0&lt;/span&gt;:01:02
  gzip: &lt;span class="m"&gt;34&lt;/span&gt;.5MB &lt;span class="m"&gt;0&lt;/span&gt;:00:15 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.74MB/s&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;  &amp;lt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;gt;  &lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在上面的命令中，&lt;code&gt;-c&lt;/code&gt; 是为了防止两个 pv 的显示混在一起。&lt;code&gt;-N&lt;/code&gt; 表示名字。可以看到读取 access.log 的速率是 37.4 MB/s，而写入 gzip 文件的速率大概是 1.74 MB/s，我们大概也可以得出压缩率大概是21倍。&lt;/p&gt;
&lt;h2&gt;指定文件的大小&lt;/h2&gt;
&lt;p&gt;可以用下面这个命令压缩一个文件夹。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tar -czf - . &lt;span class="p"&gt;|&lt;/span&gt; pv &amp;gt; out.tgz
 117MB &lt;span class="m"&gt;0&lt;/span&gt;:00:55 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.7MB/s&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&amp;gt;         &lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在上面的例子中我们可以看到下面 gzip 一行的输出中没有百分比，因为 pv 没法知道 gzip 之后的最终大小，所以没有办法计算进度。可以使用 &lt;code&gt;-s&lt;/code&gt; 指定大小。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tar -cf - . &lt;span class="p"&gt;|&lt;/span&gt; pv -s &lt;span class="k"&gt;$(&lt;/span&gt;du -sb . &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{print $1}&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; gzip &amp;gt; out.tgz
 253MB &lt;span class="m"&gt;0&lt;/span&gt;:00:05 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;46&lt;/span&gt;.7MB/s&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&amp;gt;     &lt;span class="o"&gt;]&lt;/span&gt;  &lt;span class="m"&gt;1&lt;/span&gt;% ETA &lt;span class="m"&gt;0&lt;/span&gt;:04:49
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Thu, 12 Apr 2018 07:41:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-04-12:/posts/pv-zai-linux-xia-cha-kan-ming-ling-zhi-xing-jin-du.html</guid><category>后端</category><category>计算机</category></item><item><title>[译] CSS 选择器备忘录（cheatsheet）</title><link>/posts/yi-css-xuan-ze-qi-bei-wang-lu-cheatsheet.html</link><description>&lt;p&gt;这两天打算写写爬虫，准备用 css 选择器来抽取内容，翻译了&lt;a href="http://butlerccwebdev.net/support/css-selectors-cheatsheet.html"&gt;一篇文章&lt;/a&gt;，正好复习一下，这篇文章遵守 CC-BY-NC-SA 协议。&lt;/p&gt;
&lt;p&gt;大多数的 web 开发者首先学会了 CSS。因为给 HTML 元素写样式规则的元素选择器都很容易理解和记忆。经过一点点练习之后，就会发现成组的 CSS 表达式非常的有必要，比如使用一个逗号分隔开选择器，就可以把同一个样式属性附加到不同的多个元素了。&lt;/p&gt;
&lt;p&gt;使用标签选择器和分组的选择器当然也有不足，那就是他们会应用到所有的标签。很快你就会意识到有时候需要给一个特定的元素加上样式。对于大多数开发者来说，最简单的选择当然是使用 class 和 id 选择器了。但是很遗憾的是这样下去的话，整个页面就会充满各种奇奇怪怪的类了。&lt;/p&gt;
&lt;p&gt;除了不管的给 HTML 添加纯粹用于应用样式的 class 和 id 之外，你也可以考虑使用高级的 CSS 选择器来给指定元素应用样式。高级的选择器大致可以分类为上下文选择器、属性选择器、伪元素选择器和伪类选择器。&lt;/p&gt;
&lt;h1&gt;元素选择器&lt;/h1&gt;
&lt;p&gt;元素选择器把样式应用到所有选中元素上，也是被使用最广泛的选择器&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;选择器&lt;/th&gt;
&lt;th&gt;语法&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;元素&lt;/td&gt;
&lt;td&gt;&lt;code&gt;h2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;选择页面上的所有 h2 元素，&lt;code&gt;h2 {text-align: center;}&lt;/code&gt; 会把所有 h2 元素的文本居中对齐&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;分组&lt;/td&gt;
&lt;td&gt;&lt;code&gt;h1,h2,h3&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;选择页面上所有的 h1, h2, h3 元素，&lt;code&gt;h1, h2, h3 {margin-bottom: .5em;}&lt;/code&gt; 将会把 h1, h2, h3 标签的底部 margin 设置成 0.5 em&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1&gt;class 和 id 选择器&lt;/h1&gt;
&lt;p&gt;Class 和 id 选择器是你能够把某些属性应用到个别元素上而不影响其他的。Class 让你能够按照概念分类。两个或者更多元素可以属于同一个组。id 给一个元素一个唯一的标识，同一个 id 每个页面上只能使用一次。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;选择器&lt;/th&gt;
&lt;th&gt;语法&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Class&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.warning&lt;/code&gt; &lt;code&gt;p.warning&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;前者选择所有属于 warning 类的元素，后者选择所有属于 warning 类的p元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;id&lt;/td&gt;
&lt;td&gt;&lt;code&gt;#title&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;选择 id 为 title 的元素&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1&gt;上下文选择器&lt;/h1&gt;
&lt;p&gt;Contextual selectors (combinators) target elements based on their relationships to other elements in the document's tree hierarchy, and use the same parent, child, sibling, and descendant terminology.&lt;/p&gt;
&lt;p&gt;上下文选择器基于元素在 HTML 文档中的上下级挂你来选择元素。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;选择器&lt;/th&gt;
&lt;th&gt;语法&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;后代&lt;/td&gt;
&lt;td&gt;&lt;code&gt;#main li&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;选择一个元素的后代元素。注意这里不一定是直接子元素，后代即可。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;相邻元素&lt;/td&gt;
&lt;td&gt;&lt;code&gt;h2+p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;选择一个元素的直接相邻元素，比如说这个表达式只选择 h2 的直接相邻元素 p&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;子元素&lt;/td&gt;
&lt;td&gt;&lt;code&gt;div&amp;gt;p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;选择所有直接子元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;所有相邻元素&lt;/td&gt;
&lt;td&gt;&lt;code&gt;h2~p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;选择一个元素的所有相邻元素&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1&gt;伪类选择器&lt;/h1&gt;
&lt;p&gt;伪类选择器基于浏览器状态或者文档中的位置来选择元素。浏览器在幕后保存了好多状态，比如一个链接有没有被访问过，一个元素有没有被选中，一个元素是不是它这种类型的第一个或者最后一个元素，甚至于一个元素是不是它的父元素的第一个子元素。&lt;/p&gt;
&lt;p&gt;所有处于同一个状态的元素被看做是属于同一个伪类，尽管在 HTML 中并没有明确声明类的名字。伪类标识符用冒号 &lt;code&gt;:&lt;/code&gt; 开头，而且一般是和元素名称放在一起用的。&lt;/p&gt;
&lt;h2&gt;用作链接和用户状态的伪类&lt;/h2&gt;
&lt;p&gt;当给一个链接应用样式的时候，按照下面表中的顺序来制定样式才能获得预期效果。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;选择器&lt;/th&gt;
&lt;th&gt;语法&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;未访问的链接&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:link&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;选择未访问过的链接，例如 &lt;code&gt;a:link&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;访问过的链接&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:visited&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;选择已经访问过的链接，例如 &lt;code&gt;a:visited&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;用户焦点&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:focus&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;选择当前拥有用户光标，可以直接输入的元素，例如 &lt;code&gt;a:focus&lt;/code&gt; &lt;code&gt;input:focus&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;悬浮&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:hover&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;选择当前用户鼠标指针悬浮的元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;激活&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:active&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;选择当前用户正在点击的元素&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;用于选择相邻元素的伪类&lt;/h2&gt;
&lt;p&gt;下面的 6 个选择器用于选择拥有同一个父节点的元素中符合某种条件的元素，算是一个断言（assert）吧。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;选择器&lt;/th&gt;
&lt;th&gt;语法&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;第一个元素&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:first-child&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;如果指定的元素是他的父元素的第一个子元素，选择生效&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;最后一个元素&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:last-child&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;如果指定的元素是他的父元素的最后一个子元素，选择生效&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;唯一子元素&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:only-child&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;如果指定的元素是他的父元素的唯一一个子元素，选择生效&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;同类型第一个&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:first-of-type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;如果指定的元素是他的父元素的子元素中同类型的第一个，选择生效&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;同类型最后一个&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:last-of-type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;如果指定的元素是他的父元素的子元素中同类型的最后一个，选择生效&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;同类型唯一一个&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:only-of-type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;如果指定的元素是他的父元素的子元素中同类型的唯一一个，选择生效&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;随着元素和 DOM 树的更新，这些伪类能够应用的元素都是动态变化的。&lt;/p&gt;
&lt;h2&gt;CSS3 中的结构相关伪类&lt;/h2&gt;
&lt;p&gt;CSS3 提供了更灵活的选择方式，可以根据元素在文档中的位置选择一系列的元素。这些选择器还可以接受一个参数&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;语法&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:nth-child(n)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;父元素的第 n 个子元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:nth-last-child(n)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;父元素的倒数第 n 个子元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:nth-of-type(n)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;父类型子元素中，同类型中的第 n 个&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;:nth-last-of-type(n)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;父类型子元素中，同类型中的倒数第 n 个&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;其中的 n 的取值往往取如下几种&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;值&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;odd&lt;/code&gt; &lt;code&gt;2n+1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;奇数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;even&lt;/code&gt; &lt;code&gt;2n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;偶数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;第二个&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1&gt;伪元素选择器&lt;/h1&gt;
&lt;p&gt;伪元素选择器让你能够给虚构的元素增加样式，而不用在 HTML 中真的创建他们。&lt;code&gt;::first-letter&lt;/code&gt; 和 &lt;code&gt;::first-line&lt;/code&gt; 选择了文本的一部分从而避免了使用 &lt;code&gt;span&lt;/code&gt; 元素。 &lt;code&gt;::before&lt;/code&gt; 和 &lt;code&gt;::after&lt;/code&gt; 选择器用来在并不存在的地方动态插入文本。&lt;/p&gt;
&lt;p&gt;CSS3 uses a double colon for pseudo-elements. To provide backward compatibility for older browsers, omit one of the colons that precede the pseudo-elements (ie :first-letter)&lt;/p&gt;
&lt;p&gt;CSS3 使用两个冒号来表示伪元素。为了兼容老浏览器，可以省略一个冒号（也就是 &lt;code&gt;:first-letter&lt;/code&gt;）&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;选择器&lt;/th&gt;
&lt;th&gt;语法&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;第一个字母&lt;/td&gt;
&lt;td&gt;&lt;code&gt;::first-letter&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;选择指定元素的第一个字母&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;最后一个元素&lt;/td&gt;
&lt;td&gt;&lt;code&gt;::first-line&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;选择指定元素的第一行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;之前&lt;/td&gt;
&lt;td&gt;&lt;code&gt;::before&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;选择指定元素之前生成的一个伪元素，和元素是相邻关系&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;之后&lt;/td&gt;
&lt;td&gt;&lt;code&gt;::after&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;选择指定元素之后生成的一个伪元素，和元素是相邻关系&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1&gt;属性选择器&lt;/h1&gt;
&lt;p&gt;属性选择器基于元素时候有某个特定的属性而定。下面的 7 中选择器中，后面 3 中是 CSS3 中新定义的，浏览器们可能还没有完全支持。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;选择器&lt;/th&gt;
&lt;th&gt;语法&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;存在&lt;/td&gt;
&lt;td&gt;&lt;code&gt;E[attr]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;选择包含某个属性的元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;相等&lt;/td&gt;
&lt;td&gt;&lt;code&gt;E[attr='val']&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;选择某个属性的值等于 &lt;code&gt;xxx&lt;/code&gt; 的元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;包含&lt;/td&gt;
&lt;td&gt;&lt;code&gt;E[attr~='val']&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;很鸡肋，把某个元素的值按空格分隔，如果包含给定的值，选中。优点类似于类的分隔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;开头&lt;/td&gt;
&lt;td&gt;&lt;code&gt;E[attr\|='val']&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;很鸡肋，某个属性的值以给定的值 + &lt;code&gt;-&lt;/code&gt; 开头&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;开头&lt;/td&gt;
&lt;td&gt;&lt;code&gt;E[attr^='val']&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;某个属性的值以给定的值开头&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;结尾&lt;/td&gt;
&lt;td&gt;&lt;code&gt;E[attr$='val']&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;某个属性的值以给定的值结尾&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;包含&lt;/td&gt;
&lt;td&gt;&lt;code&gt;E[attr*='val']&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;某个属性的值包含给定的值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 11 Apr 2018 09:51:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-04-11:/posts/yi-css-xuan-ze-qi-bei-wang-lu-cheatsheet.html</guid><category>CSS</category><category>大前端</category><category>计算机</category></item><item><title>mysql 基础知识(6) - Join</title><link>/posts/mysql-ji-chu-zhi-shi-6-join.html</link><description>&lt;p&gt;看到网上&lt;a href="https://blog.codinghorror.com/a-visual-explanation-of-sql-joins/"&gt;有篇文章&lt;/a&gt;用韦恩图来讲解了一下 SQL 的 join 操作，但是感觉举的例子似乎不太实际，遂自己写了一篇，图是从那篇文章里面盗的（逃&lt;/p&gt;
&lt;p&gt;假设我们有下面两张表，上边的是表 user，下边的是 package，表示每个用户对应的包裹&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Luke&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Leia&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Anakin&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;Padem&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;content&lt;/th&gt;
&lt;th&gt;user_id&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;droid&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;lightsaber&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;blaster&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;R2D2&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;创建这两个表的语句分别是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;create table user (id integer, name string);
create table package (id integer, content string, user_id integer);
insert into user (id, name) values (1, &amp;#39;Luke&amp;#39;);
insert into user (id, name) values (2, &amp;#39;Leia&amp;#39;);
insert into user (id, name) values (3, &amp;#39;Anakin&amp;#39;);
insert into user (id, name) values (4, &amp;#39;Padme&amp;#39;);
insert into package (id, content, user_id) values (1, &amp;#39;droid&amp;#39;, 3);
insert into package (id, content, user_id) values (2, &amp;#39;lightsaber&amp;#39;, 2);
insert into package (id, content, user_id) values (3, &amp;#39;blaster&amp;#39;, 1);
insert into package (id, content, user_id) values (4, &amp;#39;R2D2&amp;#39;, 5);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Veen diagram（韦恩图）是一种表示集合的图形语言。SQL 的 join 本质上也是从集合论里面来的，可以从集合论的角度来学习和记忆 Join 的语法。&lt;/p&gt;
&lt;h1&gt;Inner Join&lt;/h1&gt;
&lt;p&gt;如果我们要选出每个有包裹的人，以及对应的包裹，可以使用 inner join。内连接（inner join）计算的是两个表的交集，也就是 &lt;code&gt;A ∩ B&lt;/code&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;select
user.id, user.name, package.id, package.content 
from
user inner join package
on user.id == package.user_id;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="https://blog.codinghorror.com/content/images/uploads/2007/10/6a0120a85dcdae970b012877702708970c-pi.png"&gt;&lt;/p&gt;
&lt;p&gt;结果一共有3列，每个表中的第四列都因为在对方表中没有而没有出现在结果里。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;id          name        id          content
----------  ----------  ----------  ----------
1           Luke        3           blaster
2           Leia        2           lightsaber
3           Anakin      1           droid
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Full Outer Join&lt;/h1&gt;
&lt;p&gt;如果我们想要选出所有的任何包裹的对应关系，哪怕是对应得人或者包裹不存在的话，可以使用 full outer join。全连接计算的是两个表的并集，也就是 &lt;code&gt;A ∪ B&lt;/code&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;select
user.id, user.name, package.id, package.content
from
user full outer join package
on user.id == package.user_id;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="https://blog.codinghorror.com/content/images/uploads/2007/10/6a0120a85dcdae970b012877702725970c-pi.png"&gt;&lt;/p&gt;
&lt;p&gt;结果一共有6列，注意其中缺字段的地方被补上了 null。另外 SQLite 不支持 full outer join。感觉这个 Join 似乎用的不是太多，因为实际情况中，往往 package.user_id 是 user.id 的外键，所以不会出现 user_id 不存在的情况。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// 结果省略
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Left Outer Join&lt;/h1&gt;
&lt;p&gt;如果我们要取出每个人的包裹情况，没有包裹的也写上 null，那么这用情况下应该使用 left outer join。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;select
user.id, user.name, package.id, package.content
from
user left outer join package
on user.id == package.user_id;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="https://blog.codinghorror.com/content/images/uploads/2007/10/6a0120a85dcdae970b01287770273e970c-pi.png"&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;id          name        id          content
----------  ----------  ----------  ----------
1           Luke        3           blaster
2           Leia        2           lightsaber
3           Anakin      1           droid
4           Padme       NULL        NULL
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Cross Join&lt;/h1&gt;
&lt;p&gt;要获得A表和B表左右可能的交叉组合的话，可以使用 cross join，也就是笛卡尔乘积。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;select
user.id, user.name, package.id, package.content
from
user cross join package;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;结果如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;id          name        id          content
----------  ----------  ----------  ----------
1           Luke        1           droid
1           Luke        2           lightsaber
1           Luke        3           blaster
1           Luke        4           R2D2
2           Leia        1           droid
2           Leia        2           lightsaber
2           Leia        3           blaster
2           Leia        4           R2D2
3           Anakin      1           droid
3           Anakin      2           lightsaber
3           Anakin      3           blaster
3           Anakin      4           R2D2
4           Padme       1           droid
4           Padme       2           lightsaber
4           Padme       3           blaster
4           Padme       4           R2D2
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 11 Apr 2018 02:16:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-04-11:/posts/mysql-ji-chu-zhi-shi-6-join.html</guid><category>数据库</category><category>计算机</category></item><item><title>Go 语言和爬虫</title><link>/posts/go-yu-yan-he-pa-chong.html</link><description>&lt;h1&gt;爬虫的算法&lt;/h1&gt;
&lt;h2&gt;广度遍历&lt;/h2&gt;
&lt;p&gt;如果把每一个页面看做一个节点，把每个链接看做一个有向边，那么网页之间就构成了一个有向图。爬虫的核心就是对这个图做一个广度优先的遍历：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;func breadthFirst(visit func(item, string) []string, worklist []string) {
    seen := make(map[string]bool)
    for len(worklist) &amp;gt; 0 {
        items := worklist
        worklist = nil
        for _, items := range items {
            if !seen[item] {
                seen[item] = true
                worklist = append(worklist, visit(item)...)
            }
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;终止条件&lt;/h2&gt;
&lt;p&gt;如果我们面对的是一个有限的图，那么用广度遍历一定可以停下来。但是对于互联网来说，甚至于对于某个网站来说，页面的数量都可能是无限的，或者说没必要爬遍所有页面。那么需要考虑以下几个限制条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;边界限制，比如说限定下爬去的域名&lt;/li&gt;
&lt;li&gt;深度，比如说限定下爬取的深度&lt;/li&gt;
&lt;li&gt;并发，比如说开多少个goroutine？以及如何控制并发&lt;/li&gt;
&lt;li&gt;如何终止，终止条件是什么，限制抓取的深度还是什么？&lt;/li&gt;
&lt;li&gt;等待所有进程终止，当程序退出的时候，有没有 wait 子过程退出&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;抽取数据&lt;/h1&gt;
&lt;h2&gt;使用 CSS 定位元素，而不是 XPath&lt;/h2&gt;
&lt;p&gt;之前还在用 Python 写爬虫的时候喜欢用 XPath，主要是选择路径比 CSS 表达式看起来更清晰，而且 Python 有一个强大的 lxml 库，对于 xpath 的操作非常便捷。不过也有些缺点，xpath 的坏处就是没有办法按照类选择，而只能按照 class 当做一个属性来选择。而现在的布局之类的好多都是按照类来的，所以可能还是使用 CSS 表达式比较好。举个例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;title col-sm-6&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Hello World&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;比如说网站采用了上面的标签来表示标题，其中的&lt;code&gt;col-sm-6&lt;/code&gt;可能是用于页面布局的一个类，很有可能经常改变，所以我们想要按照 title 这个属性来定位这个元素，如果使用 xpath 的话，需要这样写：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;//div[contains(concat(&amp;#39; &amp;#39;, normalize-space(@class), &amp;#39; &amp;#39;), &amp;#39; title &amp;#39;)]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;而 CSS 天生就是为了布局而生的，所以要选择这个元素，直接这样就可以了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;.title&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当然 CSS 也有一些不方便的时候，比如 XPath 使用 &lt;code&gt;//nav/span[2]&lt;/code&gt; 就能表达清楚的逻辑，CSS 需要使用 &lt;code&gt;nav&amp;gt;span:nth-child(2)&lt;/code&gt;。略显长，但是还好不像 XPath 表达类（class）的时候那么 trick。&lt;/p&gt;
&lt;p&gt;另外，XPath 不光可以选择元素，还可以选择属性，比如 &lt;code&gt;//a/@href&lt;/code&gt;，可以直接拿到&lt;code&gt;a&lt;/code&gt; 的链接，而CSS则只能选择标签。&lt;/p&gt;
&lt;h2&gt;goquery&lt;/h2&gt;
&lt;p&gt;在 Go 语言中，可以使用 goquery 来选取元素，他实现了类似于 jQuery 的语法。&lt;/p&gt;
&lt;p&gt;goquery 提供了两个类型，Document 和 Selector，主要通过这两个对象的方法来选择元素。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;type Document struct {
    *Selection
    Url *url.URL
    rootNode *html.Node // 文档的根节点
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Document 内嵌了 Selection，因此可以直接使用Selection 的方法。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;type Selection struct {
    Nodes []*html.Node
    document *Document
    prevSel *Selection
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中 Selection 的不少方法都是和 jQuery 中类似的，再次不再赘述，只列出来可能和抓取相关的一些函数。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;生成文档&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;NewDocumentFromNode(root *html.Node) *Document&lt;/code&gt;: 传入 *html.Node 对象，也就是根节点。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NewDocument(url string) (*Document, error)&lt;/code&gt;: 传入 URL，内部用 http.Get 获取网页。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NewDocumentFromReader(r io.Reader) (*Document, error)&lt;/code&gt;: 传入 io.Reader，内部从 reader 中读取内容并解析。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NewDocumentFromResponse(res *http.Response) (*Document, error)&lt;/code&gt;: 传入 HTTP 响应，内部拿到 res.Body(实现了 io.Reader) 后的处理方式类似 NewDocumentFromReader.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查找节点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Find()&lt;/code&gt; 根据 CSS 查找节点&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;循环遍历选择的节点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Each(f func(int, *Selection)) *Selection&lt;/code&gt;: 其中函数 f 的第一个参数是当前的下标，第二个参数是当前的节点&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EachWithBreak(f func(int, *Selection) bool) *Selection&lt;/code&gt;: 和 Each 类似，增加了中途跳出循环的能力，当 f 返回 false 时结束迭代&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Map(f func(int, *Selection) string) (result []string)&lt;/code&gt;: f 的参数与上面一样，返回一个 string 类型，最终返回 []string.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获取节点的属性或者内容&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Attr()&lt;/code&gt;: 获得某个属性的值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Html()&lt;/code&gt;: 获得当前节点的 html&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Length()&lt;/code&gt;: &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Text()&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;（未完待续）&lt;/p&gt;
&lt;h1&gt;ref&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;http://liyangliang.me/posts/2016/03/zhihu-go-insight-parsing-html-with-goquery/&lt;/li&gt;
&lt;li&gt;http://blog.studygolang.com/2015/04/go-jquery-goquery/&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 09 Apr 2018 08:10:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-04-09:/posts/go-yu-yan-he-pa-chong.html</guid><category>golang</category><category>编程语言</category><category>计算机</category><category>爬虫</category></item><item><title>mysql 基础知识(5) - 聚合语句(group by)</title><link>/posts/mysql-ji-chu-zhi-shi-5-ju-he-yu-ju-group-by.html</link><description>&lt;p&gt;&lt;code&gt;Group by&lt;/code&gt; 用来按照某一列或者某几列的值聚合数据。&lt;code&gt;group by x&lt;/code&gt; 按照 x 相同的值聚合，&lt;code&gt;group by x, y&lt;/code&gt; 按照 x 和 y 都相同的值聚合。而查询的列要么是聚合的列，要么应该通过聚合函数来选取一列。而且所有的 null 会被聚合成一行&lt;/p&gt;
&lt;p&gt;比如说下面的数据表中&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://daks2k3a4ib2z.cloudfront.net/589e47d231ee752554896f1f/58dc686fb5bd4cf41639ef71_Screen%20Shot%202017-03-29%20at%207.07.17%20PM.png"&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-- How many countries are in each continent?
select
  continent
  , count(*)
from 
  countries
group by 
  continent
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;执行查询可以得到每个洲的国家的数量。&lt;/p&gt;
&lt;h1&gt;过滤&lt;/h1&gt;
&lt;p&gt;在 SQL 中，Where 子句是在 group 子句之前运行的，所以我们无法通过 where 来过滤 group 之后的结果，而应该使用 having 子句来过滤。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;select
 continent
  , max(area)
from 
  countries
group by 
  1
having
  max(area) &amp;gt;= 1e7
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;隐式聚合&lt;/h1&gt;
&lt;p&gt;当你没有使用 &lt;code&gt;group by&lt;/code&gt;，而使用了 max、min、count 等聚合函数的时候已经在聚合了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-- What is the largest and average country size in Europe?
select
  max(area) as largest_country
  , avg(area) as avg_country_area
from 
  countries
where 
  continent = &amp;#39;Europe&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;MySQL 的特殊处理&lt;/h1&gt;
&lt;p&gt;如果在查询中有没有聚合的列，那么 MySQL 就会随机选取一个列，比如下面就会随机选取一个州。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;select 
  country
  , state
  , count(*)
from
  countries
group by 
  country
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;ref&lt;/h1&gt;
&lt;p&gt;这篇文章主要参考这里：https://www.periscopedata.com/blog/everything-about-group-by&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 09 Apr 2018 01:48:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-04-09:/posts/mysql-ji-chu-zhi-shi-5-ju-he-yu-ju-group-by.html</guid><category>数据库</category><category>计算机</category></item><item><title>完全理解 SQL 的内在逻辑</title><link>/posts/wan-quan-li-jie-sql-de-nei-zai-luo-ji.html</link><description>&lt;p&gt;太多的程序员认为SQL像是洪水猛兽一样。它是少有的几种声明式的语言，和其他的命令似的面向对象的甚至函数使得语言大相径庭。
我每天都会写SQL而且在我的开源项目中大量的使用SQL，因此我非常地想要把SQL的美展现给你们这些还在挣扎着使用它的渣渣们。下面的教程适合&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用过SQL但是从来没有完全理解他的人&lt;/li&gt;
&lt;li&gt;很了解SQL，但是从来没有思考过他的语法的人&lt;/li&gt;
&lt;li&gt;想要把SQL交给其他人的人&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这个教程将会这关注SELECT语句，其他的DML将会在另一篇文章中介绍&lt;/p&gt;
&lt;h1&gt;SQL是声明式的&lt;/h1&gt;
&lt;p&gt;首先要记住，声明式。唯一的一种范式就是你可以只是声明你想要的结果就得到了他。而不是告诉你的电脑怎样去把这个结果计算出来，不错吧？&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Select first_name, last_name FROM employees WHERE salary &amp;amp;gt; 100000
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;很简单，你不需要关心employee的记录是存在哪里的，你只想要知道那些薪水还不错的人。&lt;/p&gt;
&lt;p&gt;如此简单，那么问题在哪里呢？问题在于我们大部分时候是在按照命令式的编程思维在思考,比如“机器，干这个，然后干那个，但是在这之前检查一下，如果是这样或者那样就不行”。这其中包括了存储临时结果在变量里，循环，迭代，调用函数等等。&lt;/p&gt;
&lt;p&gt;忘掉那些东西，思考如何声明东西，而不是告诉机器怎样去计算。&lt;/p&gt;
&lt;h1&gt;SQL语法的顺序有些问题&lt;/h1&gt;
&lt;p&gt;常见的混乱的来源可能是SQL语法并不是按他们的执行顺序来排序的，词法（Lexical）排序是&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SELECT [DISTINCT]&lt;/li&gt;
&lt;li&gt;FROM&lt;/li&gt;
&lt;li&gt;WHERE&lt;/li&gt;
&lt;li&gt;GROUP BY&lt;/li&gt;
&lt;li&gt;HAVING&lt;/li&gt;
&lt;li&gt;UNION&lt;/li&gt;
&lt;li&gt;ORDER BY&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;简洁起见，并没有列出所有语句，而从逻辑上来说，真正的逻辑执行顺序是这样的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;FROM&lt;/strong&gt;。FROM后面的表标识了这条语句要查询的数据源。和一些子句如，（1-J1）笛卡尔积，（1-J2）ON过滤，（1-J3）添加外部列，所要应用的对象。FROM过程之后会生成一个虚拟表VT1。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;(1-J1)笛卡尔积&lt;/strong&gt; 这个步骤会计算两个相关联表的笛卡尔积(CROSS JOIN) ，生成虚拟表VT1-J1。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;(1-J2)ON过滤&lt;/strong&gt; 这个步骤基于虚拟表VT1-J1这一个虚拟表进行过滤，过滤出所有满足ON 谓词条件的列，生成虚拟表VT1-J2。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;(1-J3)添加外部行&lt;/strong&gt;  如果使用了外连接，保留表中的不符合ON条件的列也会被加入到VT1-J2中，作为外部行，生成虚拟表VT1-J3。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;WHERE&lt;/strong&gt; 对VT1过程中生成的临时表进行过滤，满足where子句的列被插入到VT2表中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;GROUP BY&lt;/strong&gt; 这个子句会把VT2中生成的表按照GROUP BY中的列进行分组。生成VT3表。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;HAVING&lt;/strong&gt; 这个子句对VT3表中的不同的组进行过滤，满足HAVING条件的子句被加入到VT4表中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SELECT&lt;/strong&gt; 这个子句对SELECT子句中的元素进行处理，生成VT5表。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;(5-1)计算表达式&lt;/strong&gt; 计算SELECT 子句中的表达式，生成VT5-1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;(5-2)DISTINCT&lt;/strong&gt; 寻找VT5-1中的重复列，并删掉，生成VT5-2&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;(5-3)TOP&lt;/strong&gt; 从ORDER BY子句定义的结果中，筛选出符合条件的列。生成VT5-3表&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ORDER BY&lt;/strong&gt; 从VT5-3中的表中，根据 ORDER BY 子句的条件对结果进行排序，生成VC6表。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当然强大的 SQL 执行引擎在实际执行过程用会有各种优化，不一定严格按照这个顺序来。但是在写和看 SQL 的时候可以按照这个逻辑思考。&lt;/p&gt;
&lt;h2&gt;例子&lt;/h2&gt;
&lt;p&gt;可以思考一下下面这个语句的执行过程&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SELECT C.customerid, COUNT(O.orderid) AS numorders
FROM dbo.Customers AS C
  LEFT OUTER JOIN dbo.Orders AS O
    ON C.customerid = O.customerid
WHERE C.city = &amp;#39;Madrid&amp;#39;
GROUP BY C.customerid
HAVING COUNT(O.orderid) &amp;lt; 3
ORDER BY numorders
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;SQL是关于表的（而不是列）&lt;/h1&gt;
&lt;p&gt;因为词法排序和逻辑排序上的不同，很多的初学者认为列的值是SQL中的一等公民，实际上，不是。最重要的是表的引用。&lt;/p&gt;
&lt;p&gt;比如说&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;FROM a,b
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个语句实际上是 &lt;code&gt;a cross join b&lt;/code&gt;，也就是笛卡尔乘积。比如说，a 中有3列3行数据，b中有5列5行数据。上面的一句产生的结果是一个3+5=8列，3x5=15行的数据。&lt;/p&gt;
&lt;p&gt;不过，尽量显式 join 的表，而不要使用逗号。&lt;/p&gt;
&lt;p&gt;SQL 中衍生的表可以看做表的变量。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-- A derived table
FROM (SELECT * FROM author) a -- 后边这个变量是可选的
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-- Get authors&amp;#39; first and last names, and their age in days
SELECT first_name, last_name, age
FROM (
  SELECT first_name, last_name, current_date - date_of_birth age
  FROM author
)
-- If the age is greater than 10000 days
WHERE age &amp;gt; 10000
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在 MySQL 8.0 中还可以使用 with 语句&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;WITH a AS (
  SELECT first_name, last_name, current_date - date_of_birth age
  FROM author
)
SELECT *
FROM a
WHERE age &amp;gt; 10000
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;SQL 中的 Select 语句在关系代数中被称作投影（projection）。一旦你生成了表的引用，然后过滤，转换，接着你就可以把它投影成另一种形式。在 select 语句中，你终于可以按列操作生成的表了。也就是说其他的语句都是按表，或者说按照行操作的，只有到了 select 语句中你才可以操作列。&lt;/p&gt;
&lt;p&gt;执行完了 select 语句之后，你就可以执行其他的集合排序等等操作了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;distinct 删除重复的行&lt;/li&gt;
&lt;li&gt;union 把两个查询组合起来，并且删除重复的行&lt;/li&gt;
&lt;li&gt;union all 把两个查询组合起来，并且不删除重复&lt;/li&gt;
&lt;li&gt;except 做差集并且删除重复的行&lt;/li&gt;
&lt;li&gt;intersect 求交集&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ORDER BY 排序&lt;/p&gt;
&lt;p&gt;Ref：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;https://web.archive.org/web/20150424213133/http://tech.pro:80/tutorial/1555/10-easy-steps-to-a-complete-understanding-of-sql&lt;/li&gt;
&lt;li&gt;http://www.cnblogs.com/myprogram/archive/2013/01/24/2874666.html&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sun, 08 Apr 2018 14:44:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-04-08:/posts/wan-quan-li-jie-sql-de-nei-zai-luo-ji.html</guid><category>数据库</category><category>计算机</category></item><item><title>跳表（skiplist）</title><link>/posts/tiao-biao-skiplist.html</link><description>&lt;p&gt;平衡二叉树可以实现 O(logn) 的查找复杂度。跳表可以实现相当于平衡二叉树的复杂度查询数据，而代码实现比较简单。在 Redis 中，zset 就用到了 skiplist。&lt;/p&gt;
&lt;p&gt;跳表是用&lt;strong&gt;并连的链表&lt;/strong&gt;来实现的查询结构&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://ws3.sinaimg.cn/large/006tNc79gy1fq102txkvvj30hs07haaf.jpg"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个节点包含的指针的层数是由一个随机数决定的。&lt;/li&gt;
&lt;li&gt;跳表的时间复杂度和平衡二叉树相同，但是在实现上要简单很多。&lt;/li&gt;
&lt;li&gt;跳表是有序的，跳跃表的特点就是有序的，所以对于一些有序类型的数据，比如整数，日期这种，用跳跃表可以进行范围查找。&lt;/li&gt;
&lt;li&gt;在构建跳跃表和查询跳跃的复杂度一致，所以也比较适合于在线的实时索引查询，可以来一个文档，一边查找就一边知道要如何进行插入操作了。&lt;/li&gt;
&lt;li&gt;保存到磁盘和从磁盘载入也比较简单，因为本质上是几个链表，所以保存的时候可以按照数组的方式分别保存几个数组就可以了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;一些优化&lt;/h1&gt;
&lt;p&gt;空间优化，把底层的表放到硬盘里，影响增加删除节点的效率&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://ws4.sinaimg.cn/large/006tNc79gy1fq1043qhraj30hs06i3zn.jpg"&gt;&lt;/p&gt;
&lt;p&gt;时间优化，用数组代替链表，可以使用二分查找而非遍历&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://ws4.sinaimg.cn/large/006tNc79gy1fq104leytgj30hs06j0tf.jpg"&gt;&lt;/p&gt;
&lt;p&gt;对于类似时间这种数据，比如24小时对应1440分钟对应86400秒钟&lt;/p&gt;
&lt;p&gt;甚至可以固定直接用索引随机访问&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://ws3.sinaimg.cn/large/006tNc79gy1fq106sqt91j30hs06j758.jpg"&gt;&lt;/p&gt;
&lt;h1&gt;实现&lt;/h1&gt;
&lt;p&gt;https://github.com/begeekmyfriend/skiplist/blob/master/skiplist.h&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 04 Apr 2018 06:36:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-04-04:/posts/tiao-biao-skiplist.html</guid><category>算法</category><category>计算机</category></item><item><title>Python Argparse 库的使用</title><link>/posts/python-argparse-ku-de-shi-yong.html</link><description>&lt;h2&gt;基本用法&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--verbosity&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;increase output verbosity&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verbosity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;两种不同的参数模式， &lt;code&gt;positional&lt;/code&gt;，&lt;code&gt;optional arguments&lt;/code&gt;，感觉之间的区别有点像 args 和 kwargs&lt;/p&gt;
&lt;h2&gt;subcommand&lt;/h2&gt;
&lt;p&gt;Actually, the argparse module is not ok with subcommand, mannually parse the first command and then pass the rest to argparse&lt;/p&gt;
&lt;h3&gt;add_argument 的参数&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;name or flags - Either a name or a list of option strings, e.g. foo or `-f`, `--foo`.
action - The basic type of action to be taken when this argument is encountered at the command line. store/store_const/store_true/append/count
nargs - The number of command-line arguments that should be consumed. N/?/*/+
const - A constant value required by some action and nargs selections.
default - The value produced if the argument is absent from the command line.
type -  The type to which the command-line argument should be converted.
choices - A container of the allowable values for the argument. a list 
required - Whether or not the command-line option may be omitted (optionals only).
help - A brief description of what the argument does.
metavar - A name for the argument in usage messages.
dest - The name of the attribute to be added to the object returned by parse_args().
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 04 Apr 2018 06:23:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-04-04:/posts/python-argparse-ku-de-shi-yong.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>Linux 命令行中使用带颜色的输出</title><link>/posts/linux-ming-ling-xing-zhong-shi-yong-dai-yan-se-de-shu-chu.html</link><description>&lt;p&gt;http://misc.flogisoft.com/bash/tip_colors_and_formatting&lt;/p&gt;
&lt;p&gt;We just have to use \033&lt;/p&gt;
&lt;p&gt;The most frequently used format would be \033[31mtext here \033[0m&lt;/p&gt;
&lt;p&gt;比如：echo \033[31mtext here \033[0m&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 04 Apr 2018 06:13:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-04-04:/posts/linux-ming-ling-xing-zhong-shi-yong-dai-yan-se-de-shu-chu.html</guid><category>后端</category><category>计算机</category></item><item><title>Android SharedPreference</title><link>/posts/android-sharedpreference.html</link><description>&lt;p&gt;用来在应用中存储键值对配置&lt;/p&gt;
&lt;p&gt;context.getSharedPreferences("prefName", Context.MODE_PRIVATE)  get SharedPreferecnes instance
sharedPref.getXXX("keyName", defaultValue)  get value from SharedPreferences
sharedPref.edit()   get editor(SharedPreference.Editor)
editor.putXXX("key-name", value)    put value
editor.commit() commit the changes&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 04 Apr 2018 06:01:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-04-04:/posts/android-sharedpreference.html</guid><category>大前端</category><category>Android</category><category>计算机</category></item><item><title>Android 开发的一些 tips</title><link>/posts/android-kai-fa-de-yi-xie-tips.html</link><description>&lt;p&gt;Prefer Maven dependency resolution instead of importing jar files. If you explicitly include jar files in your project, they will be of some specific frozen version, such as 2.1.1. Downloading jars and handling updates is cumbersome, this is a problem that Maven solves properly, and is also encouraged in Android Gradle builds. For example:
dependencies {
    compile 'com.squareup.okhttp:okhttp:2.2.0'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.2.0'
}&lt;/p&gt;
&lt;p&gt;Use different package name for non-release builds Use applicationIdSuffix for debug build type to be able to install both debug and release apk on the same device (do this also for custom build types, if you need any). This will be especially valuable later on in the app's lifecycle, after it has been published to the store.
android {
    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-DEBUG'
        }
release {
            // ...
        }
    }
}&lt;/p&gt;
&lt;p&gt;Use different icons to distinguish the builds installed on a device—for example with different colors or an overlaid "debug" label. Gradle makes this very easy: with default project structure, simply put debug icon in app/src/debug/res and release icon in app/src/release/res. You could also change app name per build type, as well as versionName (as in the above example).&lt;/p&gt;
&lt;p&gt;use stetho&lt;/p&gt;
&lt;p&gt;不要在application中存储全局变量
尽量少使用globalobject，最好使用intent&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 04 Apr 2018 06:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-04-04:/posts/android-kai-fa-de-yi-xie-tips.html</guid><category>大前端</category><category>Android</category><category>计算机</category></item><item><title>Android 连接 WiFi</title><link>/posts/android-lian-jie-wifi.html</link><description>&lt;p&gt;https://stackoverflow.com/questions/4249911/android-how-to-create-eap-wifi-configuration-programmatically&lt;/p&gt;
&lt;p&gt;redirects to &lt;/p&gt;
&lt;p&gt;https://stackoverflow.com/questions/4374862/how-to-programmatically-create-and-read-wep-eap-wifi-configurations-in-android&lt;/p&gt;
&lt;p&gt;https://stackoverflow.com/questions/19170260/how-to-connect-to-wpa-eap-wifi-on-android-with-4-3-api&lt;/p&gt;
&lt;p&gt;Android 6.0 changes&lt;/p&gt;
&lt;p&gt;https://developer.android.com/about/versions/marshmallow/android-6.0-changes.html#behavior-network&lt;/p&gt;
&lt;p&gt;working methods&lt;/p&gt;
&lt;p&gt;https://stackoverflow.com/questions/12486441/how-can-i-set-proxysettings-and-proxyproperties-on-android-wi-fi-connection-usin&lt;/p&gt;
&lt;p&gt;get real ip https://stackoverflow.com/questions/39335525
connect to wifi https://stackoverflow.com/questions/8818290&lt;/p&gt;
&lt;p&gt;android added support to eap wifi in API 18 (4.3), a lot of tutorials online are outdated.&lt;/p&gt;
&lt;p&gt;use WifiEnterpiresConfiguration.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 04 Apr 2018 06:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-04-04:/posts/android-lian-jie-wifi.html</guid><category>大前端</category><category>Android</category><category>计算机</category></item><item><title>Maven Basics</title><link>/posts/maven-basics.html</link><description>&lt;p&gt;From: http://tutorials.jenkov.com/maven/maven-tutorial.html&lt;/p&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Maven is built around the pom.xml file. In Maven, how to build your project is predefined in the Maven Build Life Cycles, Phases and Goals.  The POM file describes &lt;em&gt;what to build&lt;/em&gt;, but most often &lt;em&gt;not how to build it&lt;/em&gt;. How to build it is up to the Maven build phases and goals.&lt;/p&gt;
&lt;h1&gt;Minimal POM file&lt;/h1&gt;
&lt;p&gt;Here is a minimal POM file: &lt;/p&gt;
&lt;p&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                      http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;groupId&gt;com.jenkov&lt;/groupId&gt;
&lt;artifactId&gt;java-web-crawler&lt;/artifactId&gt;
&lt;version&gt;1.0.0&lt;/version&gt;
&lt;/project&gt;&lt;/p&gt;
&lt;p&gt;this outputs MAVEN_REPO/com/jenkov/java-web-crawler/1.0.0/java-web-crawler-1.0.0.jar&lt;/p&gt;
&lt;h1&gt;Super POM&lt;/h1&gt;
&lt;p&gt;You can make a POM file explicitly inherit from another POM file. That way you can change the settings across all inheriting POM's via their common super POM. You specify the super POM at the top of a POM file like this: &lt;/p&gt;
&lt;p&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                      http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;amp;lt;parent&amp;amp;gt;
    &amp;amp;lt;groupId&amp;amp;gt;org.codehaus.mojo&amp;amp;lt;/groupId&amp;amp;gt;
    &amp;amp;lt;artifactId&amp;amp;gt;my-parent&amp;amp;lt;/artifactId&amp;amp;gt;
    &amp;amp;lt;version&amp;amp;gt;2.0&amp;amp;lt;/version&amp;amp;gt;
    &amp;amp;lt;relativePath&amp;amp;gt;../my-parent&amp;amp;lt;/relativePath&amp;amp;gt;
&amp;amp;lt;/parent&amp;amp;gt;

&amp;amp;lt;artifactId&amp;amp;gt;my-project&amp;amp;lt;/artifactId&amp;amp;gt;
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;/project&gt;&lt;/p&gt;
&lt;p&gt;mvn help:effective-pom shows the combined pom of parent and current&lt;/p&gt;
&lt;h1&gt;Running Maven&lt;/h1&gt;
&lt;p&gt;When executing the mvn command you pass the name of a build life cycle, phase or goal to it, which Maven then executes.&lt;/p&gt;
&lt;p&gt;syntax: mvn phase:goal&lt;/p&gt;
&lt;h1&gt;Directory Structure&lt;/h1&gt;
&lt;p&gt;You must follow the maven directory structure&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- src
  - main
    - java
    - resources
    - webapp
  - test
    - java
    - resources
- target
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;more here: Introduction to the Maven Standard Directory Layout&lt;/p&gt;
&lt;h1&gt;Dependencies&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;project&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://maven.apache.org/POM/4.0.0&amp;quot;&lt;/span&gt;
         &lt;span class="na"&gt;xmlns:xsi=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;/span&gt;
         &lt;span class="na"&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://maven.apache.org/POM/4.0.0&lt;/span&gt;
&lt;span class="s"&gt;   http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;modelVersion&amp;gt;&lt;/span&gt;4.0.0&lt;span class="nt"&gt;&amp;lt;/modelVersion&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.jenkov.crawler&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;java-web-crawler&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.0.0&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;

 &lt;span class="nt"&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.jsoup&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jsoup&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.7.1&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;junit&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;junit&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;4.8.1&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span class="nt"&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;external dependencies&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;mydependency&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;mydependency&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;system&lt;span class="nt"&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.0&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;systemPath&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;basedir&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;\war\WEB-INF\lib\mydependency.jar&lt;span class="nt"&gt;&amp;lt;/systemPath&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;snapshot dependencies&lt;/h2&gt;
&lt;p&gt;Snapshot dependencies are dependencies (JAR files) which are under development. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;Repositories&lt;/h1&gt;
&lt;p&gt;maven tries to pull dependencies from local, central, and remote repo&lt;/p&gt;
&lt;h2&gt;Local Repositores&lt;/h2&gt;
&lt;p&gt;it's defined in ~/.m2/settings.xml&lt;/p&gt;
&lt;p&gt;&lt;settings&gt;
    &lt;localRepository&gt;
        d:\data\java\products\maven\repository
    &lt;/localRepository&gt;
&lt;/settings&gt;&lt;/p&gt;
&lt;h2&gt;Central Repositories&lt;/h2&gt;
&lt;p&gt;Maintained by the maven community&lt;/p&gt;
&lt;h2&gt;Remote Repositories&lt;/h2&gt;
&lt;p&gt;A remote repository is often used for hosting projects internal to your organization, which are shared by multiple projects.&lt;/p&gt;
&lt;p&gt;&lt;repositories&gt;
   &lt;repository&gt;
       &lt;id&gt;jenkov.code&lt;/id&gt;
       &lt;url&gt;http://maven.jenkov.com/maven2/lib&lt;/url&gt;
   &lt;/repository&gt;
&lt;/repositories&gt;&lt;/p&gt;
&lt;h1&gt;Maven Build Cycles&lt;/h1&gt;
&lt;p&gt;When Maven builds a software project it follows a build life cycle. The build life cycle is divided into build phases, and the build phases are divided into build goals.
Since you cannot execute the default life cycle directly, you need to execute a build phase or goal from the default life cycle. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. default 
validate    Validates that the project is correct and all necessary information is available. This also makes sure the dependencies are downloaded.
compile Compiles the source code of the project.
test    Runs the tests against the compiled source code using a suitable unit testing framework. These tests should not require the code be packaged or deployed.
package Packs the compiled code in its distributable format, such as a JAR.
install Install the package into the local repository, for use as a dependency in other projects locally.
deploy  Copies the final package to the remote repository for sharing with other developers and projects.
2. clean
3. site
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Profiles&lt;/h1&gt;
&lt;p&gt;Profiles let you use differvent build settings&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 04 Apr 2018 05:57:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-04-04:/posts/maven-basics.html</guid><category>大前端</category><category>Android</category><category>计算机</category></item><item><title>使用 Gson 解析 json 文档</title><link>/posts/shi-yong-gson-jie-xi-json-wen-dang.html</link><description>&lt;p&gt;解析 json 有两种流派：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;event-driven json parse: iterate the document, not loading all into memory&lt;/li&gt;
&lt;li&gt;document-based json parse: load the full document into memory once for all.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在 Python 中可以很容易的解析json文件，Python 中的 json.loads 是 document-based。而在 java 中可以使用 event-driven的。个人感觉这种 event-driven 的解析方式是多此一举，json本来定位就是小型的数据传输和配置存储，如果生成了一个很大的 json，应该考虑换用xml了。&lt;/p&gt;
&lt;p&gt;在 Java 中需要生成和 JSON 文档意义对应的 JavaBean 文件，这样才能解析到 Java Class。&lt;/p&gt;
&lt;p&gt;把你的 json 文件的例子首先编写好，然后可以通过这个网站生成 JavaBean：http://www.jsonschema2pojo.org/&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://ws2.sinaimg.cn/large/0069RVTdly1fu2lsahbklj31880ni77y.jpg"&gt;&lt;/p&gt;
&lt;p&gt;在 Android Studio build.gradle 文件中添加依赖：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dependencies {
  compile &amp;#39;com.google.code.gson:gson:2.3.1&amp;#39;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;解析&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.google.gson.annotations.Expose&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.google.gson.annotations.SerializedName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="nd"&gt;@SerializedName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@Expose&lt;/span&gt;
&lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;getFoo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;setFoo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Gson gson = new Gson();

String json = &amp;quot;{\&amp;quot;foo\&amp;quot;: \&amp;quot;bar\&amp;quot;}&amp;quot;;
Example example = gson.fromJson(json, Example.class);
// 解析：JavaBean对象 = gson.fromJson(json, JavaBean.class);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考资料：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;http://www.jianshu.com/p/b87fee2f7a23&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 04 Apr 2018 05:56:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-04-04:/posts/shi-yong-gson-jie-xi-json-wen-dang.html</guid><category>大前端</category><category>Android</category><category>计算机</category></item><item><title>比特币相关技术调研</title><link>/posts/bi-te-bi-xiang-guan-ji-zhu-diao-yan.html</link><description>&lt;h1&gt;挖矿&lt;/h1&gt;
&lt;p&gt;比特币的挖矿算法是CPU密集型的，所以可以使用特殊的硬件，比如 FPGA 或者 ASIC 来加速。后续的好多加密货币，比如ETH 等，都特意选择了不是CPU密集型的算法，从而避免这种使用特殊硬件挖矿造成的不公平。&lt;a href="http://cseweb.ucsd.edu/~mbtaylor/papers/Taylor_Bitcoin_IEEE_Computer_2017.pdf"&gt;挖矿硬件的发展&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;比特币的挖矿算法就核心来言就是下面几句：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;while (1)
 HDR[kNoncePos]++;
 IF (SHA256(SHA256(HDR)) &amp;lt; (65535 &amp;lt;&amp;lt; 208)/ DIFFICULTY) return;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;monero 使用了适合于现代CPU的AES算法，参见&lt;a href="https://monero.stackexchange.com/questions/1110/where-can-i-find-a-description-of-the-cryptonight-hash-algorithm"&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;货币&lt;/h1&gt;
&lt;p&gt;USDT：风险就在于这家公司随时可能跑路。。
Siacoin: 用于分布式文件存储的货币，但是因为加密算法被比特大陆做出了矿机，所以价格一路狂泻。。(2018-02-04)
Filecoin: 
比特股：https://www.zhihu.com/question/28812361
比特股还衍生出了 bitcny 和 bitusd 等货币。国内可以使用鼓鼓钱包&lt;/p&gt;
&lt;p&gt;https://chainnews.com/articles/768752760963.htm&lt;/p&gt;
&lt;h1&gt;问题&lt;/h1&gt;
&lt;p&gt;比特币和以太币的确认速度都特别慢，比特币在 7笔每秒，以太币在15笔每秒&lt;/p&gt;
&lt;p&gt;石墨烯技术&lt;/p&gt;
&lt;p&gt;区块链技术&lt;/p&gt;
&lt;p&gt;在区块链中存储数据&lt;/p&gt;
&lt;p&gt;In 2013, a feature was introduced into the Bitcoin protocol that allows us to do just that: create a special kind of transaction (called an OP_RETURN transaction) inside which you can embed tiny amounts of data, 40 bytes, in transactions. Originally it was intended to be used for attaching contextual information to Bitcoin transactions, such as shipping information. A more creative way of using the feature is to create the smallest possible transaction (0.00000001 BTC, or a satoshi, plus the transaction fees) and embed whatever information you want that can fit inside it. 比如你可以把一个文件的hash存在这个文件中，那么就可以证明在某一个时间点，这个文件是存在的&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 04 Apr 2018 05:28:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-04-04:/posts/bi-te-bi-xiang-guan-ji-zhu-diao-yan.html</guid><category>bitcoin</category><category>计算机</category></item><item><title>[zz]如何高效地学习编程语言</title><link>/posts/zzru-he-gao-xiao-di-xue-xi-bian-cheng-yu-yan.html</link><description>&lt;p&gt;个人观点，我觉得记住这些是有用的——当学习一门编程语言的时候，你实际上正在学四件事情。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;怎么写代码：语法、语义以及资源管理&lt;/li&gt;
&lt;li&gt;语言的范式：面向对象，函数式，逻辑等&lt;/li&gt;
&lt;li&gt;产出物的生态圈：如何构建、运行可执行文件以及如何使用库&lt;/li&gt;
&lt;li&gt;工具：编辑器，编译器，调试器，代码质量检测器（linter）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这四项很容易搞混，不幸的结果是，当你遇到问题最终完全找错了地方。&lt;/p&gt;
&lt;p&gt;http://lambeta.com/2017/04/18/Techniques-for-Efficiently-Learning-Programming-Languages/&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 04 Apr 2018 05:26:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-04-04:/posts/zzru-he-gao-xiao-di-xue-xi-bian-cheng-yu-yan.html</guid><category>想法</category><category>计算机</category></item><item><title>sqlite3 和在 Python 中的使用教程</title><link>/posts/sqlite3-he-zai-python-zhong-de-shi-yong-jiao-cheng.html</link><description>&lt;p&gt;Yifei's notes:&lt;/p&gt;
&lt;p&gt;所谓的事务、锁、存储过程、外键等等不适合互联网公司的业务场景，而更适合于“企业级”“IOE”这些应用。&lt;/p&gt;
&lt;h1&gt;sqlite3&lt;/h1&gt;
&lt;p&gt;% sqlite3 DATABASE&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;.databases&lt;/span&gt;  &lt;span class="no"&gt;show&lt;/span&gt; &lt;span class="no"&gt;databases&lt;/span&gt; &lt;span class="no"&gt;connected&lt;/span&gt; &lt;span class="no"&gt;to&lt;/span&gt;
&lt;span class="na"&gt;.dump&lt;/span&gt; &lt;span class="no"&gt;TABLE&lt;/span&gt; &lt;span class="no"&gt;dump&lt;/span&gt; &lt;span class="no"&gt;table&lt;/span&gt; &lt;span class="no"&gt;in&lt;/span&gt; &lt;span class="no"&gt;SQL&lt;/span&gt; &lt;span class="no"&gt;format&lt;/span&gt;
&lt;span class="na"&gt;.import&lt;/span&gt; &lt;span class="no"&gt;FILE&lt;/span&gt; &lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="no"&gt;TABLE&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;    &lt;span class="no"&gt;import&lt;/span&gt; &lt;span class="no"&gt;SQL&lt;/span&gt; &lt;span class="no"&gt;data&lt;/span&gt; &lt;span class="no"&gt;into&lt;/span&gt; &lt;span class="no"&gt;table&lt;/span&gt;
&lt;span class="na"&gt;.indices&lt;/span&gt; &lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="no"&gt;TABLE&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;    &lt;span class="no"&gt;show&lt;/span&gt; &lt;span class="no"&gt;indices&lt;/span&gt; &lt;span class="no"&gt;of&lt;/span&gt; &lt;span class="no"&gt;table&lt;/span&gt;
&lt;span class="na"&gt;.mode&lt;/span&gt; &lt;span class="no"&gt;MODE&lt;/span&gt;  &lt;span class="no"&gt;set&lt;/span&gt; &lt;span class="no"&gt;output&lt;/span&gt; &lt;span class="no"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;column&lt;/span&gt;
&lt;span class="na"&gt;.read&lt;/span&gt; &lt;span class="no"&gt;FILE&lt;/span&gt;  &lt;span class="no"&gt;excute&lt;/span&gt; &lt;span class="no"&gt;FILE&lt;/span&gt;
&lt;span class="na"&gt;.schema&lt;/span&gt; &lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="no"&gt;TABLE&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="no"&gt;show&lt;/span&gt; &lt;span class="no"&gt;create&lt;/span&gt; &lt;span class="no"&gt;statement&lt;/span&gt;
&lt;span class="na"&gt;.restore&lt;/span&gt;  &lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="no"&gt;DB&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="no"&gt;FILE&lt;/span&gt; &lt;span class="no"&gt;restore&lt;/span&gt; &lt;span class="no"&gt;db&lt;/span&gt; &lt;span class="no"&gt;from&lt;/span&gt; &lt;span class="no"&gt;file&lt;/span&gt;
&lt;span class="na"&gt;.headers&lt;/span&gt; &lt;span class="no"&gt;ON&lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="no"&gt;OFF&lt;/span&gt; &lt;span class="no"&gt;show&lt;/span&gt; &lt;span class="no"&gt;headers&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;美化输出&lt;/h2&gt;
&lt;p&gt;让 sqlite 的输出更美观，使用 &lt;code&gt;.mode column&lt;/code&gt; 和 &lt;code&gt;.headers on&lt;/code&gt; 两个命令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sqlite&amp;gt; select * from foo;
234|kshitiz|dba.se

sqlite&amp;gt; .mode column
sqlite&amp;gt; select * from foo;
234         kshitiz     dba.se

sqlite&amp;gt; .headers on
sqlite&amp;gt; select * from foo;
bar         baz         baf
----------  ----------  ----------
234         kshitiz     dba.se
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;导入导出 csv&lt;/h2&gt;
&lt;p&gt;导出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sqlite&amp;gt; .mode csv   -- use &amp;#39;.separator SOME_STRING&amp;#39; for something other than a comma.
sqlite&amp;gt; .headers on 
sqlite&amp;gt; .out file.dmp 
sqlite&amp;gt; select * from MyTable;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;导入&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sqlite&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;
&lt;span class="n"&gt;sqlite&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;CSV_FILE&lt;/span&gt; &lt;span class="nn"&gt;TABLE_NAME&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;备份还原&lt;/h2&gt;
&lt;p&gt;sqlite3 DATABASE .dump &amp;gt; backup.sql
sqlite3 DATABASE &amp;lt; backup.sql&lt;/p&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sqlite3&amp;gt; .read backup.sql
sqlite3&amp;gt; .dump backup.sql
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;在 Python 中使用 SQLite&lt;/h1&gt;
&lt;p&gt;首先连接到数据库，获得 connection 对象，然后再获得 cursor，使用 cursor 来执行 sql 语句并获取结果。&lt;/p&gt;
&lt;h2&gt;连接&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sqlite3&lt;/span&gt;

&lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqlite3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;database.db&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# connections&lt;/span&gt;
&lt;span class="n"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# get cursor&lt;/span&gt;
&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CREATE TABLE books (id int primary key, name text)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;INSERT INTO books (name) VALUES (&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;sophie&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s choice&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;)&lt;/span&gt;
&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;INSERT INTO books (name) VALUES (&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;bible&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# always remember to commit&lt;/span&gt;
&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SELECT * FROM books&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或者使用 with 语句&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;with sqlite3.connect(&amp;#39;db&amp;#39;) as conn:
    cursor = conn.cursor()
    # cursor executes
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;构建语句&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# fabricating statement
cursor.execute(&amp;#39;select from books where name = ?&amp;#39;, (&amp;#39;the bible&amp;#39;,)) 
# NOTE the param must be a sequence

# You could also use named placeholders
cursor.execute(&amp;#39;insert into books (name) values (:name)&amp;#39;, {name: &amp;#39;the bible&amp;#39;})
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;获取数据&lt;/h2&gt;
&lt;p&gt;有两种方式:&lt;/p&gt;
&lt;p&gt;使用 fetchone, fetchmany(n), fetchall&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;r = c.execute(&amp;#39;SELECT id FROM stocks WHERE name = &amp;#39;MSFT&amp;#39;&amp;#39;)
id = r.fetchone()[0]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;直接迭代返回结果&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for row in c.execute(&amp;#39;SELECT * FROM stocks ORDER BY price&amp;#39;):
    print row[0], row[1], row[&amp;#39;id&amp;#39;], row[&amp;#39;name&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意结果每行是一个 tuple 或者一个 dict，即使 select 了一个元素，结果也是 tuple。&lt;/p&gt;
&lt;h2&gt;其他&lt;/h2&gt;
&lt;p&gt;lastrowid&lt;/p&gt;
&lt;p&gt;This read-only attribute provides the rowid of the last modified row. It is only set if you issued a INSERT statement using the execute()method. For operations other than INSERT or when executemany() is called, lastrowid is set to None.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 04 Apr 2018 05:17:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-04-04:/posts/sqlite3-he-zai-python-zhong-de-shi-yong-jiao-cheng.html</guid><category>数据库</category><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>Linux 中的 epoll 和 nginx 中的应用</title><link>/posts/linux-zhong-de-epoll-he-nginx-zhong-de-ying-yong.html</link><description>&lt;h1&gt;epoll 的优势&lt;/h1&gt;
&lt;p&gt;select 和 poll 每次获取可读写的描述符都需要遍历所有的文件描述符，它们的时间复杂度都是 O(n)，而 epoll 是基于回调的，每个 socket 上有事件发生都会调用回调函数放到 epoll 的就序列表中，因此 epoll_wait 只需要简单地读取这个列表，所以epoll的时间复杂度是 O(1) 的。&lt;/p&gt;
&lt;p&gt;添加监控的socket只需要使用 epoll_ctl 添加一次，而获取消息 epoll 使用 mmap 加速内核与用户态的消息传递，不需要每次都把 socket 在内核态和用户态之间考来考取。&lt;/p&gt;
&lt;h2&gt;epoll 的工作模式&lt;/h2&gt;
&lt;p&gt;epoll 中有两个模式，水平触发（LT）和边缘触发（ET）。其中水平触发如果不做任何操作，就会一直触发，而边缘触发只会触发一次。就好比电工电子里面的两种触发模式。默认模式是 LT&lt;/p&gt;
&lt;p&gt;Level Triggered (LT) 水平触发&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;socket接收缓冲区不为空 有数据可读 读事件一直触发&lt;/li&gt;
&lt;li&gt;socket发送缓冲区不满 可以继续写入数据 写事件一直触发&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;符合思维习惯，epoll_wait返回的事件就是socket的状态&lt;/p&gt;
&lt;p&gt;Edge Triggered (ET) 边沿触发&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;socket的接收缓冲区状态变化时触发读事件，即空的接收缓冲区刚接收到数据时触发读事件&lt;/li&gt;
&lt;li&gt;socket的发送缓冲区状态变化时触发写事件，即满的缓冲区刚空出空间时触发读事件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;仅在状态变化时触发事件&lt;/p&gt;
&lt;p&gt;ET模式在很大程度上减少了epoll事件被重复触发的次数，因此效率要比LT模式高。epoll工作在ET模式的时候，必须使用非阻塞套接口，以避免由于一个文件句柄的阻塞读/阻塞写操作把处理多个文件描述符的任务饿死(在while循环中调用read、write、accept，若是阻塞套接字，当资源不够时，进程会被阻塞，则其他准备就绪的文件描述符得不到处理，如果是非阻塞套接字，当资源不够时，上述系统调用返回-1，同时将errno设置为EAGAIN)&lt;/p&gt;
&lt;p&gt;LT模式下开发基于epoll的应用要简单些，不太容易出错。而在ET模式下事件发生时，如果没有彻底地将缓冲区数据处理完，则会导致缓冲区中的用户请求得不到响应。&lt;/p&gt;
&lt;p&gt;ET处理EPOLLOUT（socket 可写事件）方便高效些，LT不容易遗漏事件、不易产生bug。如果server的响应通常较小，一次性可以写完，不需要监听EPOLLOUT，那么适合使用LT，例如redis等、或者大多数的网络库。而nginx作为高性能的通用服务器，网络流量可以跑满达到1G，这种情况下很容易触发EPOLLOUT，则使用ET。关于某些场景下ET模式比LT模式效率更好，&lt;/p&gt;
&lt;h2&gt;nginx 中的使用&lt;/h2&gt;
&lt;p&gt;nginx 使用的是边缘触发模式&lt;/p&gt;
&lt;p&gt;epoll 常用于构建事件驱动的非阻塞异步的事件循环，但是需要注意，本身 epoll_wait 这个操作是同步的。elect/poll/epoll的意义在于同时等待多个socket上的活动。select/poll/epoll永远都是阻塞的，跟socket是否阻塞无关。当然一般来说 epoll 管理的 socket 要设置成非阻塞的。&lt;/p&gt;
&lt;p&gt;nginx会一直（阻塞）等待epoll返回事件通知或者epoll_wait超时，一旦有事件触发，nginx就会调用关联的（read/write）handler处理事件。开发者必须保证每一个事件handler都不得包含任何阻塞调用。否则，nginx worker的主线程将会因为一个事件阻塞，导致队列里面可能还有一大堆事件不能及时处理，这会严重影响nginx的效率。所以 nginx 的 socket不能设置为阻塞的，如果socket是阻塞的，那么一个socket的IO事件就会阻塞后续所有的事件处理，CPU就会空转，等在那里没事干了。而在socket非阻塞调用期间，nginx可以继续处理其他的事件。&lt;/p&gt;
&lt;h1&gt;epoll 的使用&lt;/h1&gt;
&lt;p&gt;epoll 总共有三个系统调用：epoll_create, epoll_ctl, epoll_wait。其中 epoll_create 在内核中创建一个 eventpoll 结构体，epoll_ctl 增加或者删除 socket 到 epoll 中，epoll_wait 等待事件发生。&lt;/p&gt;
&lt;p&gt;创建 epoll 文件描述符&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;int epoll_create(int size);  // size 参数会被忽略
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;添加 socket 到 epoll 对象中&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;epfd 是 epoll_create 创建的&lt;/li&gt;
&lt;li&gt;op 是这三种常量，表示操作。&lt;/li&gt;
&lt;li&gt;EPOLL_CTL_ADD：注册新的fd到epfd中；&lt;/li&gt;
&lt;li&gt;EPOLL_CTL_MOD：修改已经注册的fd的监听事件；&lt;/li&gt;
&lt;li&gt;EPOLL_CTL_DEL：从epfd中删除一个fd；&lt;/li&gt;
&lt;li&gt;fd，需要更改的 socket&lt;/li&gt;
&lt;li&gt;events 是一些参数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;监听事件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;int epoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一般如果网络主循环是单独的线程的话，可以用-1来等(即阻塞调用epoll_wait)，这样可以保证一些效率，如果是和主逻辑在同一个线程的话，则可以用0（立即返回）来保证主循环的效率。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;https://blog.csdn.net/dongfuye/article/details/50880251&lt;/li&gt;
&lt;li&gt;https://www.zhihu.com/question/63193746&lt;/li&gt;
&lt;li&gt;epoll 详解：https://www.cnblogs.com/ljygoodgoodstudydaydayup/p/3916760.html&lt;/li&gt;
&lt;li&gt;https://www.zhihu.com/question/22576054&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 04 Apr 2018 05:15:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-04-04:/posts/linux-zhong-de-epoll-he-nginx-zhong-de-ying-yong.html</guid><category>计算机</category><category>网络</category></item><item><title>Linux 磁盘管理命令</title><link>/posts/linux-ci-pan-guan-li-ming-ling.html</link><description>&lt;h1&gt;挂载磁盘&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;mount&lt;/code&gt; 命令，用于挂载磁盘以及显示相关信息&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mount 显示挂载信息
mount -t TYPE OPTIONS DEVICE DIRECTORY
比如：
     mount -t vfat /dev/sdb1 /mnt/media
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;常用的参数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-a 挂载/etc/fstab 中的所有文件
-f 模拟挂载
-r 只读挂载
-w 读写挂载（默认）
-L 指定 lebel
-u 指定uuid
-o 选项
    ro 只读
    rw 读写
    user 允许普通用户挂载
    check=none 不检查错误
    loop 挂载文件，比如iso
    nofail 失败了也不要汇报
    remount
--bind 选择新的挂载点作为alias `mount --rbind olddir newdir`
--move 移动到新的挂载点 `mount --move olddir newdir`
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用 mount 命令的最佳实践是在 &lt;code&gt;/etc/fstab&lt;/code&gt; 中先输入需要挂载的磁盘对应的配置，然后使用 &lt;code&gt;mount -a&lt;/code&gt; 挂载。这样避免在 &lt;code&gt;/etc/fstab&lt;/code&gt; 中挂载的命令是错的导致无法开机。&lt;/p&gt;
&lt;h2&gt;卸载&lt;/h2&gt;
&lt;p&gt;umount DIRECTORY/DEVICE 卸载设备&lt;/p&gt;
&lt;h1&gt;磁盘使用&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;查看分区的 uuid：ll /dev/disk/by-uuid。在 &lt;code&gt;etc/fstab&lt;/code&gt; 中挂载磁盘最好使用 uuid&lt;/li&gt;
&lt;li&gt;查看分区的类型：parted -l&lt;/li&gt;
&lt;li&gt;df show free disk spaces&lt;/li&gt;
&lt;li&gt;du show disk usage infomation。du -sh &lt;code&gt;ls&lt;/code&gt;  # great command&lt;/li&gt;
&lt;li&gt;dd disk dump&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;分区与格式化&lt;/h1&gt;
&lt;p&gt;fdisk DEVICE&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;p   print partition table
n   new partition
w   write back to table
d   删除分区
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;创建文件系统&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkfs.ext4 PARTITION
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;fsck check a file system&lt;/p&gt;
&lt;h1&gt;逻辑卷&lt;/h1&gt;
&lt;p&gt;硬盘称作物理卷，多个物理卷构成一个卷组，一个卷组可以分成多个逻辑卷&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 04 Apr 2018 04:29:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-04-04:/posts/linux-ci-pan-guan-li-ming-ling.html</guid><category>后端</category><category>计算机</category></item><item><title>关于 CTO 的一些想法</title><link>/posts/guan-yu-cto-de-yi-xie-xiang-fa.html</link><description>&lt;p&gt;Hacker News 上看到一篇文章不错，摘录一些笔记，原文链接在最后面&lt;/p&gt;
&lt;h1&gt;技术上&lt;/h1&gt;
&lt;p&gt;学习新东西的速度远远赶不上问题产生的速度。
虽然 startup 可以很灵活的转型，但是你第一次选择的技术架构不是那么好改的
现在技术的生命期都很短，一些很流行的技术很可能也会很快过期，所以选择任何技术都要做好留下技术债的准备
你写的每一行代码也都可能存在很长一段时间，所以尽量写好吧，哪怕慢一点
不要老想着停下来重构，尽量多谢测试&lt;/p&gt;
&lt;h1&gt;关于招人&lt;/h1&gt;
&lt;p&gt;只有当你迫切需要这个人的时候才找
招人是为了跟的上增长，而不是为了产生增长
知道需要干什么事情了再招人&lt;/p&gt;
&lt;p&gt;总的来说，如果你不确定需不需要招人，那么一般是不需要的。&lt;/p&gt;
&lt;p&gt;管理人一直都很简单，保持坦诚沟通，公开地打分，沟通哪些是好的，哪些是坏的。而且这样也可以让做的不好的人有所准备，如果不合适的人，他们也会对自己的表现有所预期。最重要的是，给每个人一个很好的个人发展计划。&lt;/p&gt;
&lt;p&gt;最后，在公司发展的过程中，看到新人成长甚至变为 leader 也是一件很让人激动的事情&lt;/p&gt;
&lt;p&gt;https://medium.com/sketchdeck-developer-blog/what-i-wish-i-knew-when-i-became-cto-fdc934b790e3?token=e-Jk1uh8fiXG6w_Z&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 04 Apr 2018 04:27:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-04-04:/posts/guan-yu-cto-de-yi-xie-xiang-fa.html</guid><category>创业</category></item><item><title>Go 语言数据库教程</title><link>/posts/go-yu-yan-shu-ju-ku-jiao-cheng.html</link><description>&lt;p&gt;在学习 Go 的过程中重新思考了数据库相关的一些知识，之前认为数据库的驱动就是应该有一个 conn 对象表示连接， 然后再有一个 cursor 对象来具体操作。但是 Go 完全没有这么来，而是直接生成一个 db 对象来操作，开始觉得不适应，然而后来我也实在想不起来为什么需要用两个对象了。&lt;/p&gt;
&lt;p&gt;另外，为什么要用 ORM 呢？之前用 Django 的ORM比较多，因为生成后台非常方便，而且自己对 SQL 也不是很熟悉，对数据库的操作基本上都在使用这个ORM。然而，现在感觉到如果想要自己的代码性能比较高的话，自己手工写 SQL 几乎是不可避免的，而且 SQL 其实也没有那么吓人。&lt;/p&gt;
&lt;p&gt;Go语言中的 &lt;code&gt;database/sql&lt;/code&gt; 包提供了一个数据库的访问接口，但是对于不同的数据库，还需要不同的驱动。&lt;/p&gt;
&lt;p&gt;一些常见的数据库的驱动参见这里：http://golang.org/s/sqldrivers。&lt;/p&gt;
&lt;h1&gt;连接数据库&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;db, err := sql.Open(driver, dataSourceName)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里值得注意的有两点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go语言中不像其他语言一样，除了 connection 对象之外还有 cursor 对象，golang 里面很简单，直接用db对象操作就好了。&lt;/li&gt;
&lt;li&gt;Open 函数并不会去真的链接数据库，直到第一条语句才会去链接，如果想检测是否连接成功，可以使用:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if err := db.Ping(); err != nil {
  log.Fatal(err)
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;执行语句&lt;/h1&gt;
&lt;p&gt;使用 &lt;code&gt;db.Exec&lt;/code&gt; 方法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;result, err := db.Exec(
    &amp;quot;INSERT INTO users (name, age) VALUES ($1, $2)&amp;quot;,
    &amp;quot;gopher&amp;quot;,
    27,
)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;result 类型定义如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;type Result Interface {
    LastInsertId()
    RowAffcted()
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;查询&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rows, err := db.Query(
    &amp;quot;SELECT NAME FROM  users WHERE age = $1&amp;quot;,
    age
)

if err != nil {
    log.Fatal(err)
}

for rows.Next() {
    var name string
    if err := rows.Scan(&amp;amp;name); err != nil {
        log.Fatal(err)
    }
    fmt.Printf(&amp;quot;%s is %d old\n&amp;quot;, name, age)
}

if err := rows.Err(); err != nil {
    log.Fata(err)
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Row 有一个方法 Scan，而 Rows 中常用的两个方法是 Next 和 Err&lt;/p&gt;
&lt;p&gt;如果查询结果只有一列的话，使用 QueryRow 方法。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var age int64
row := db.QueryRow(&amp;quot;SELECT age FROM users WHERE name = $1&amp;quot;, name)
err := row.Scan(&amp;amp;age)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当然像其他所有的语言一样，可以预编译语句然后执行。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;age := 27
stme, err := db.Prepare(&amp;quot;SELECT name FROM users WHERE age = $1&amp;quot;)
if err != nil {
    log.Fatal(err)
}
rows, err := stmt.Query(age)
defer stmt.Close()
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;事务（Transaction）&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tx, err := db.Begin()
if err != nil {
    log.Fatal(err)
}
...
tx.Commit() 
// or tx.Rollback()
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;处理 null&lt;/h1&gt;
&lt;p&gt;如果一列可能为 null 的话，那么传递个Scan的参数就不应该是对应的基础类型，而应该是对应的包含null的复合类型&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var name NullString
err := db.QueryRow(&amp;quot;SELECT name FROM names WHERE id = $1&amp;quot;, &amp;amp;name)
if name.Valid {
   // 使用 name.String 访问
} else {
  //
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;除此之外还包含了其他几种 Null 复合值，NullBool、NullFloat64、NullInt64。可以使用对应的参数访问&lt;/p&gt;
&lt;h1&gt;使用 sqlite3&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% go get github.com/mattn/go-sqlite3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;database/sql&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;github.com/mattn/go-sqlite3&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sqlite3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;./foo.db&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;sqlx&lt;/h1&gt;
&lt;p&gt;待续&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 04 Apr 2018 04:10:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-04-04:/posts/go-yu-yan-shu-ju-ku-jiao-cheng.html</guid><category>golang</category><category>编程语言</category><category>计算机</category></item><item><title>给产品经理的代码课</title><link>/posts/gei-chan-pin-jing-li-de-dai-ma-ke.html</link><description>&lt;h1&gt;常见误区&lt;/h1&gt;
&lt;h2&gt;误区1：这个功能之前我们就有啊，为什么现在还需要时间开发？&lt;/h2&gt;
&lt;p&gt;现在有的功能在新的条件下不代表能够直接使用，可能需要彻底需要重新开发，可能包括但不限于以下几种情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;之前的系统能支撑的并发量、连接数都太少，没法满足现在需求&lt;/li&gt;
&lt;li&gt;之前的就是催着上线的，代码太trick了，只能临时应付测试一下效果，没法维护，现在如果这个需求明确了，那需要重新设计一个良好的架构&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;误区2：我不要全部结果，能不能先给我跑一小部分数据？&lt;/h2&gt;
&lt;p&gt;好多情况下是不能的。比如说，你需要1000万行的数据，程序员并不是一行一行地从数据源中拷贝复制数据出来；而是写好一个脚本，让计算机去一行一行地产生数据。所以多对于程序员来说，产生一万行数据和产生一千万行数据需要的工作量很可能是相同的。&lt;/p&gt;
&lt;p&gt;对于一些需求分析或者其他阶段的简单的数据整合分析的工作，如果产品经理能够自己使用 SQL 从数据库或者 Hive 等处来拉取数据，那么往往比求程序员更快捷一些。甚至分析竞品等等一些简单的数据抓取工作，如果能够利用内部平台来做，其实也都并不难，当然这需要程序员先提供一个不错的平台。&lt;/p&gt;
&lt;p&gt;当然，也有很多情况下，一小部分数据和全量数据的确差异很大。这种情况往往是因为数据的产生受到的限制比较多，跑大批量的数据需要重新涉及复杂的架构，这时候往往也需要考虑下是不是需要这么多的数据？&lt;/p&gt;
&lt;h2&gt;误区3：这个是线上问题，真的需要赶紧改一下&lt;/h2&gt;
&lt;p&gt;如果这个问题现在对用户造成了伤害，&lt;/p&gt;
&lt;h1&gt;题外话：我遇到的一些产品经理&lt;/h1&gt;
&lt;h2&gt;春风化雨型&lt;/h2&gt;
&lt;p&gt;如果有问题她会来直接找你，比较大或者需要提前规划会拉相关人员开个会。如果有相同的问题（bug）两次或者以上，她会问你能不能教一下她，让她自己解决，或者初步判断一下，或者把问题分类梳理清楚，而不是丢给你算了。如果有时候好多次了，你没有及时响应她，她会提前和你沟通，问是不是精力不够，然后说如果需要申请更多资源她可以帮忙协调。&lt;/p&gt;
&lt;p&gt;总之，产品经理是一个考验情商的工作，既要有创造性的思维，又要协调好各方面资源。但是现实中的好多产品经理太让人失望了，他们不是真的热爱创造产品的过程，而是因为懒得写代码、懒得搞技术然后选择了产品的道路。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 04 Apr 2018 03:49:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-04-04:/posts/gei-chan-pin-jing-li-de-dai-ma-ke.html</guid><category>创业</category><category>运营与产品</category></item><item><title>fzf - 命令行模糊查找器</title><link>/posts/fzf-ming-ling-xing-mo-hu-cha-zhao-qi.html</link><description>&lt;p&gt;fzf 可以替代 ag 等等工具&lt;/p&gt;
&lt;h1&gt;安装&lt;/h1&gt;
&lt;p&gt;在 mac 上直接 &lt;code&gt;brew install fzf&lt;/code&gt; 就好了&lt;/p&gt;
&lt;h1&gt;使用&lt;/h1&gt;
&lt;h2&gt;调用 fzf 命令&lt;/h2&gt;
&lt;p&gt;直接在命令行输入 fzf 开始模糊查找&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;查找命令&lt;/th&gt;
&lt;th&gt;匹配类型&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;sbtrkt&lt;/td&gt;
&lt;td&gt;模糊匹配&lt;/td&gt;
&lt;td&gt;匹配sbtrkt&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;^music&lt;/td&gt;
&lt;td&gt;前缀精确匹配&lt;/td&gt;
&lt;td&gt;以music开头&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;.mp3^&lt;/td&gt;
&lt;td&gt;后缀精确匹配&lt;/td&gt;
&lt;td&gt;以.mp3结尾&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;'wild&lt;/td&gt;
&lt;td&gt;精确匹配(quoted)&lt;/td&gt;
&lt;td&gt;精确包含wild&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;!fire&lt;/td&gt;
&lt;td&gt;inverse-exact-match&lt;/td&gt;
&lt;td&gt;不包含fire&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;!.mp3$&lt;/td&gt;
&lt;td&gt;inverse-suffix-exact-match&lt;/td&gt;
&lt;td&gt;不以.mp3结尾&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;|&lt;/code&gt;可以做or匹配， 比如 &lt;code&gt;^core go$|rb$|py$&lt;/code&gt; 表示以core开头，以go或rb或py结尾的&lt;/p&gt;
&lt;h2&gt;按键&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ctrl-j/k 或者 ctrl-n/p 或者箭头来上下选择
ctrl-c 或者 Esc 退出
Enter 选择
在多行模式，tab 和 Shift-tab 来标记文件
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;除了这些按键之外，还可以使用 &lt;code&gt;--bind&lt;/code&gt; 绑定自己的按键，见下文&lt;/p&gt;
&lt;p&gt;选中之后，fzf 的默认操作是打印这个文件名，这样我们还得打开，所以可以直接 &lt;code&gt;vim $(fzf)&lt;/code&gt; 也就是使用 vim 打开我们选中的文件。&lt;/p&gt;
&lt;h2&gt;使用快捷键&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Ctrl-T 快速选择当前目录文件，并把文件名打印出来
Ctrl-R 使用fzf来过滤history命令
ALT-C cd 进入选中的目录
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;自动补全&lt;/h2&gt;
&lt;p&gt;fzf 支持不少命令的自动补全功能，通过 **&lt;tab&gt; 来触发。如果没有特殊支持某个命令的话，fzf会用文件来补全。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vim **&amp;lt;tab&amp;gt;
cd **&amp;lt;tab&amp;gt;
ssh **&amp;lt;tab&amp;gt;  从 /etc/hosts 中读取主机列表
unset **&amp;lt;tab&amp;gt;
export **&amp;lt;tab&amp;gt;
unalias **&amp;lt;tab&amp;gt;

kill -s TERM &amp;lt;tab&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里我把触发按键设置成了 Ctrl-Y 比原生的触发更方便一点，如何配置见下文。&lt;/p&gt;
&lt;h1&gt;选项&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;--height xx% 默认情况下 fzf 占据了 100% 的屏幕
--reverse 提示符在上面
--bind 绑定命令
--preview 指定预览命令
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;默认情况下，在fzf中选中文件之后知识打印出这个文件名，可以使用bind来指定一些快捷键，来对文件的一些操作。&lt;/p&gt;
&lt;p&gt;比如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Press F1 to open the file with less without leaving fzf
# Press CTRL-Y to copy the line to clipboard and aborts fzf (requires pbcopy)
fzf --bind &amp;#39;f1:execute(less -f {}),ctrl-y:execute-silent(echo {} | pbcopy)+abort&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;默认情况下，fzf 不会预览文件的内容，可以使用 --preview 指定，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Use head instead of cat so that the command doesn&amp;#39;t take too long to finish
fzf --preview &amp;#39;head -100 {}&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;语法高亮&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fzf --preview &amp;#39;[[ $(file --mime {}) =~ binary ]] &amp;amp;&amp;amp;
                 echo {} is a binary file ||
                 (highlight -O ansi -l {} ||
                  coderay {} ||
                  rougify {} ||
                  cat {}) 2&amp;gt; /dev/null&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;相关的环境变量&lt;/h2&gt;
&lt;p&gt;默认情况下，fzf 从 &lt;code&gt;find * -type f&lt;/code&gt; 中读取文件列表，可以使用更好用的 fd 来替换。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;export FZF_DEFAULT_OPTS=&amp;#39;--height 40% --reverse --border&amp;#39; 这个变量来指定默认选项。
export FZF_DEFAULT_COMMAND=&amp;#39;fd --type f&amp;#39; 来指定
export FZF_CTRL_T_COMMAND=&amp;quot;$FZF_DEFAULT_COMMAND&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;我的最终配置&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[ -f ~/.fzf.zsh ] &amp;amp;&amp;amp; source ~/.fzf.zsh

export FZF_DEFAULT_COMMAND=&amp;#39;fd --type f&amp;#39;
export FZF_CTRL_T_COMMAND=&amp;#39;fd --type f&amp;#39;
export FZF_ALT_C_COMMAND=&amp;#39;fd --type d&amp;#39;
export FZF_COMPLETION_TRIGGER=&amp;#39;&amp;#39;
export FZF_DEFAULT_OPTS=&amp;quot;--height 40% --reverse --border --prompt &amp;#39;&amp;gt;&amp;gt;&amp;gt;&amp;#39; \
    --bind &amp;#39;alt-j:preview-down,alt-k:preview-up,alt-v:execute(vi {})+abort,ctrl-y:execute-silent(cat {} | pbcopy)+abort,?:toggle-preview&amp;#39; \
    --header &amp;#39;A-j/k: preview down/up, A-v: open in vim, C-y: copy, ?: toggle preview&amp;#39; \
    --preview &amp;#39;(highlight -O ansi -l {} 2&amp;gt; /dev/null || cat {} || tree -C {}) 2&amp;gt; /dev/null&amp;#39;&amp;quot;
export FZF_CTRL_T_OPTS=$FZF_DEFAULT_OPTS
export FZF_CTRL_R_OPTS=&amp;quot;--preview &amp;#39;echo {}&amp;#39; --preview-window hidden:wrap --bind &amp;#39;?:toggle-preview&amp;#39;&amp;quot;
export FZF_ALT_C_OPTS=&amp;quot;--height 40% --reverse --border --prompt &amp;#39;&amp;gt;&amp;gt;&amp;gt;&amp;#39; \
    --bind &amp;#39;alt-j:preview-down,alt-k:preview-up,?:toggle-preview&amp;#39; \
    --header &amp;#39;A-j/k: preview down/up, A-v: open in vim, C-y: copy, ?: toggle preview&amp;#39; \
    --preview &amp;#39;tree -C {}&amp;#39;&amp;quot;
bindkey &amp;#39;^Y&amp;#39; fzf-completion
bindkey &amp;#39;^I&amp;#39; $fzf_default_completion
[ -f ~/.dotfiles/lib/fzf-extras.sh ] &amp;amp;&amp;amp; source ~/.dotfiles/lib/fzf-extras.sh
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sun, 01 Apr 2018 04:38:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-04-01:/posts/fzf-ming-ling-xing-mo-hu-cha-zhao-qi.html</guid><category>后端</category><category>计算机</category></item><item><title>fd - 更好的 find 命令（fd - A nicer find command）</title><link>/posts/fd-geng-hao-de-find-ming-ling-fd-a-nicer-find-command.html</link><description>&lt;p&gt;&lt;code&gt;fd&lt;/code&gt;（https://github.com/sharkdp/fd） 是 &lt;code&gt;find&lt;/code&gt; 命令的一个更现代的替换。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fd&lt;/code&gt;（https://github.com/sharkdp/fd）is a modern and nicer replacement to the traditional &lt;code&gt;find&lt;/code&gt; command.&lt;/p&gt;
&lt;h1&gt;对比一下 Some comparisons&lt;/h1&gt;
&lt;h2&gt;查找名字含有某个字符的文件 Find a filename with certain string&lt;/h2&gt;
&lt;p&gt;OLD&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-&amp;gt; % find . -name &amp;quot;*hello*&amp;quot;
./courses/hello_world.go
./courses/chapter_01/hello_world.go
./courses/chapter_01/hello_world
./examples/01_hello_world.go
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;NEW&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-&amp;gt; % fd hello
courses/chapter_01/hello_world
courses/chapter_01/hello_world.go
courses/hello_world.go
examples/01_hello_world.go
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;使用正则表达式查找 Find files using regular expression&lt;/h2&gt;
&lt;p&gt;比如说查找符合 &lt;code&gt;\d{2}_ti&lt;/code&gt; 模式的文件。&lt;code&gt;find&lt;/code&gt; 使用的正则表达式非常古老，比如说在这里我们不能使用 &lt;code&gt;\d&lt;/code&gt;，也不能使用 &lt;code&gt;{x}&lt;/code&gt;  这种语法。因此我们需要对我们的正则表达式做一些改写。关于&lt;code&gt;find&lt;/code&gt;支持的正则表达式这里就不展开了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fd&lt;/code&gt; 默认就是使用的正则表达式作为模式，并且默认匹配的是文件名；而 &lt;code&gt;find&lt;/code&gt; 默认匹配的是完整路径。另外 &lt;/p&gt;
&lt;p&gt;For example, let's find a file whose name matches &lt;code&gt;\d{2}_ti&lt;/code&gt;. &lt;code&gt;find&lt;/code&gt; uses a very ancient form of regular expression. Neither can we use &lt;code&gt;\d&lt;/code&gt;, nor can we use &lt;code&gt;{x}&lt;/code&gt;. So we have to adjust our expression to these kind of limitations.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fd&lt;/code&gt;, by default, uses regular expression as patter, and matches filenames; on the other hand, &lt;code&gt;find&lt;/code&gt; uses the &lt;code&gt;-regex&lt;/code&gt; option to specify a regular expression, and it matches the whole path.&lt;/p&gt;
&lt;p&gt;OLD &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-&amp;gt; % find . -regex &amp;quot;.*[0-9][0-9]_ti.*&amp;quot;
./examples/33_tickers.go
./examples/48_time.go
./examples/28_timeouts.go
./examples/50_time_format.go
./examples/32_timers.go
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;NEW&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-&amp;gt; % fd &amp;#39;\d{2}_ti&amp;#39;
examples/28_timeouts.go
examples/32_timers.go
examples/33_tickers.go
examples/48_time.go
examples/50_time_format.go
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;指定目录 Find in a specific directory&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;find&lt;/code&gt; 的语法是 &lt;code&gt;find DIRECTORY OPTIONS&lt;/code&gt;；而 &lt;code&gt;fd&lt;/code&gt; 的语法是 &lt;code&gt;fd PATTERN [DIRECTORY]&lt;/code&gt;。注意其中目录是可选的。这点个人认为非常好，因为大多数情况下，我们是在当前目录查找，每次都要写 &lt;code&gt;.&lt;/code&gt; 非常烦。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;find&lt;/code&gt; follows the syntax &lt;code&gt;find &amp;lt;directory&amp;gt; &amp;lt;options&amp;gt;&lt;/code&gt;; meanwhile, &lt;code&gt;fd&lt;/code&gt; uses &lt;code&gt;fd &amp;lt;pattern&amp;gt; [&amp;lt;directory&amp;gt;]&lt;/code&gt;. Note that the directory part is optional. AFAIK, this is very convenient. Most of the times, we are just trying to find something in the working directory, typing &lt;code&gt;.&lt;/code&gt; each time is very annoying.&lt;/p&gt;
&lt;p&gt;OLD&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-&amp;gt; % find examples -name &amp;quot;*hello*&amp;quot;
examples/01_hello_world.go
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;NEW&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-&amp;gt; % fd hello examples
examples/01_hello_world.go
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;直接执行命令 Execute the command without arguments&lt;/h2&gt;
&lt;p&gt;find 会打印帮助信息，而 fd 则会显示当前目录的所有文件。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;find&lt;/code&gt; will print help message, &lt;code&gt;fd&lt;/code&gt; will print all the files in current directory&lt;/p&gt;
&lt;p&gt;OLD&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-&amp;gt; % find
usage: find [-H | -L | -P] [-EXdsx] [-f path] path ... [expression]
       find [-H | -L | -P] [-EXdsx] -f path [path ...] [expression]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;NEW&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-&amp;gt; % fd
courses
courses/chapter_01
courses/chapter_01/chapter_1.md
courses/chapter_01/chapter_1.pdf
courses/chapter_01/hello_world
courses/chapter_01/hello_world.go
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;按后缀名查找文件 Find files by extension&lt;/h2&gt;
&lt;p&gt;这是一个很常见的需求，&lt;code&gt;find&lt;/code&gt; 中需要使用 &lt;code&gt;-name "*.xxx"&lt;/code&gt; 来过滤，而 &lt;code&gt;fd&lt;/code&gt; 直接提供了 &lt;code&gt;-e&lt;/code&gt; 选项。&lt;/p&gt;
&lt;p&gt;It's a very common use case. With &lt;code&gt;find&lt;/code&gt;, you have to use &lt;code&gt;-name "*.xxx"&lt;/code&gt;, while &lt;code&gt;fd&lt;/code&gt; provides &lt;code&gt;-e&lt;/code&gt; option directly.&lt;/p&gt;
&lt;p&gt;OLD&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-&amp;gt; % find . -name &amp;quot;*.md&amp;quot;
./courses/chapter_01/chapter_1.md
./courses/chapter_1.md
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;NEW&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-&amp;gt; % fd -e md
courses/chapter_01/chapter_1.md
courses/chapter_1.md
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;查找中过滤掉 &lt;code&gt;.gitignore&lt;/code&gt; 中的文件 Exclude files listed in &lt;code&gt;.gitignore&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;find&lt;/code&gt; 并没有提供对 &lt;code&gt;.gitingnore&lt;/code&gt; 文件的原生支持，更好的方法可能是使用 &lt;code&gt;git ls-files&lt;/code&gt;。而作为一个现代工具，&lt;code&gt;fd&lt;/code&gt; 则默认情况下就会过滤 &lt;code&gt;gitignore&lt;/code&gt; 文件，更多情况请查阅文档。&lt;/p&gt;
&lt;p&gt;可以使用 &lt;code&gt;-I&lt;/code&gt; 来包含这些文件，使用 &lt;code&gt;-H&lt;/code&gt; 添加隐藏文件。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;find&lt;/code&gt; does not natively support &lt;code&gt;.gitignore&lt;/code&gt; files, a practical way would be using &lt;code&gt;git ls-files&lt;/code&gt;. As a modern tool, &lt;code&gt;fd&lt;/code&gt; ignores files listed in &lt;code&gt;.gitignore&lt;/code&gt; and hidden files by default.&lt;/p&gt;
&lt;p&gt;You could use &lt;code&gt;-I&lt;/code&gt; to include those files, &lt;code&gt;-H&lt;/code&gt; to also include hidden files.&lt;/p&gt;
&lt;p&gt;OLD&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-&amp;gt; % git ls-files | grep xxx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;NEW&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-&amp;gt; % fd xxx
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;排除某个文件夹 Exclude a directory&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;fd&lt;/code&gt; provides a &lt;code&gt;-E&lt;/code&gt; option to exclude directories. You could put the directories in &lt;code&gt;.fdignore&lt;/code&gt;, too.&lt;/p&gt;
&lt;p&gt;OLD&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-&amp;gt; % find . -path ./examples -prune -o -name &amp;#39;*.go&amp;#39;
./courses/hello_world.go
./courses/chapter_01/hello_world.go
./examples
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;NEW&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-&amp;gt; % fd -E examples &amp;#39;.go$&amp;#39;
courses/chapter_01/hello_world.go
courses/hello_world.go
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;使用 xargs Using xargs&lt;/h2&gt;
&lt;p&gt;一般来说，如果使用管道过滤的话，需要使用 '\0' 来作为字符串结尾，避免一些潜在的空格引起的问题。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;find&lt;/code&gt; 中需要使用 &lt;code&gt;-print0&lt;/code&gt; 来调整输出 '\0' 结尾的字符串，在 &lt;code&gt;xargs&lt;/code&gt; 中需要使用 &lt;code&gt;-0&lt;/code&gt; 表示接收这种字符串。而在 &lt;code&gt;fd&lt;/code&gt; 中，和 &lt;code&gt;xargs&lt;/code&gt; 保持了一直，使用 &lt;code&gt;-0&lt;/code&gt; 参数就可以了。&lt;/p&gt;
&lt;p&gt;If you are using pipes to filter results, using &lt;code&gt;\0&lt;/code&gt; other than &lt;code&gt;\n&lt;/code&gt; would be a better option to avoid some potential problems.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;find&lt;/code&gt; with &lt;code&gt;-print0&lt;/code&gt; will output &lt;code&gt;\0&lt;/code&gt;-terminated strings, and &lt;code&gt;xargs&lt;/code&gt;'s option is &lt;code&gt;-0&lt;/code&gt; to process them. &lt;code&gt;fd&lt;/code&gt; chooses &lt;code&gt;-0&lt;/code&gt; as its option, which is consistent with &lt;code&gt;xargs&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;OLD&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-&amp;gt; % find . -name &amp;quot;*.go&amp;quot; -print0 | xargs -0 wc -l
       7 ./courses/hello_world.go
       7 ./courses/chapter_01/hello_world.go
      50 ./examples/07_switch.go
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;NEW&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-&amp;gt; % fd -0 -e go | xargs -0 wc -l
       7 courses/chapter_01/hello_world.go
       7 courses/hello_world.go
       7 examples/01_hello_world.go
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;总之，fd 命令相对于 find 来说相当简单易用了&lt;/p&gt;
&lt;p&gt;As you can see, using &lt;code&gt;fd&lt;/code&gt; can save you a lot of keystrokes.&lt;/p&gt;
&lt;h1&gt;PS&lt;/h1&gt;
&lt;h2&gt;使用 exec Using exec&lt;/h2&gt;
&lt;p&gt;OLD&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-&amp;gt; % find . -name &amp;quot;*.md&amp;quot; -exec wc -l {} \;
     114 ./courses/chapter_01/chapter_1.md
     114 ./courses/chapter_1.md
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;NEW&lt;/p&gt;
&lt;p&gt;You could also omit the &lt;code&gt;{}&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-&amp;gt; % fd -e md --exec wc -l {}
     114 courses/chapter_1.md
     114 courses/chapter_01/chapter_1.md
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sun, 01 Apr 2018 04:33:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-04-01:/posts/fd-geng-hao-de-find-ming-ling-fd-a-nicer-find-command.html</guid><category>命令行</category><category>后端</category><category>计算机</category></item><item><title>MyISAM vs InnoDB: mysql 的两种存储引擎的区别</title><link>/posts/myisam-vs-innodb-mysql-de-liang-chong-cun-chu-yin-qing-de-qu-bie.html</link><description>&lt;ul&gt;
&lt;li&gt;InnoDB 有行级别的锁，而 MyISAM 只能锁定到表级别。&lt;/li&gt;
&lt;li&gt;InnoDB 有更好的故障恢复机制.&lt;/li&gt;
&lt;li&gt;MyISAM 有全文索引，InnoDB 直到5.6(Feb 2013)才拥有。&lt;/li&gt;
&lt;li&gt;InnoDB 实现了事物、外键和关系限制, MyISAM 没有.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ref: https://dba.stackexchange.com/questions/1/what-are-the-main-differences-between-innodb-and-myisam&lt;/p&gt;
&lt;p&gt;总的来说，引用完整性和事物才是数据库的本质，所以说：“MyISAM is a file system that understands SQL. There’s no comparison. If you want a database engine with MySQL, use InnoDB.”&lt;/p&gt;
&lt;p&gt;ref: https://jeremystein.com/journal/innodb-versus-myisam-no-comparison/&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sat, 17 Mar 2018 22:11:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-03-17:/posts/myisam-vs-innodb-mysql-de-liang-chong-cun-chu-yin-qing-de-qu-bie.html</guid><category>数据库</category><category>计算机</category></item><item><title>《结网》阅读笔记</title><link>/posts/jie-wang-yue-du-bi-ji.html</link><description>&lt;ol&gt;
&lt;li&gt;Alan Key：热爱软件的人应该制造自己的硬件。&lt;/li&gt;
&lt;li&gt;不要自以为是，要通过 A/B 测来进行&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;比如有用户反馈糗百审核界面将“通过”按钮改成“笑了”按钮很不好，因为这样的话，感人的温情帖不容易就通过了。
3. 在美团之前，过期不退是团购行业的创收的商业模式之一，而美团提供了退款服务，做到了理念领先，没有放弃为用户创造价值的初衷。
4. 大多数时候，你想到的原创概念可能早就有其他人想到了，所以不要拘泥于非要有一个原创概念才能碾压别人。如果能找到已经存在的实现，通过研究它可以节省很多探索的时间。
5. 既有概念的转化：比如从博客简化一点就到了微博，再从微博降低门槛就得到了快手。
6. Web 2.0 公司的 7 种能力
  1. 服务，而不是打包的软件
  2. 控制独特的难以再造的数据源，并且用户越多内容越丰富
  3. 把用户当做共同开发者来信任
  4. 借力于集体智慧
  5. 通过用户的自助服务来发挥长尾的力量
  6. 超越单一设备层次的软件
  7. 轻量级的用户界面、开发模式和商业模式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其实总结起来就是两个词：服务和UGC，而不是软件和PGC。
7. 通过差异化和低成本来实现创新价值，从而在蓝海中时间段内达到理性的用户规模或者足够高的竞争壁垒。
8. web 2.0 就是提供一个社区让用户来主动参与创作内容，而不是需要网站的运营者组织编辑团队来创作。下面的几个例子
  1. QDB（bash.org）海外版糗事百科，只提供了一套内容体系来让用户提交内容
  2. 作者自己的博客的友情链接：本来应该是由作者来维护的，但是作者选择让评论最多的五个人自动成为友情链接。
9. &lt;a href="https://assets.strategyzer.com/assets/resources/the-business-model-canvas.pdf"&gt;商业模式画布&lt;/a&gt;
  1. 哪些用户可以通过产品受益，他们是男是女，年龄多大，有多少人？
  2. 这个产品为目标用户带来什么价值？
  3. 产品所实现的价值如何传递给用户？
  4. 如何建立和维护产品和用户之间的关系？
  5. 能获得收入吗？
  6. 核心资源哪些已经具备了，哪些还是欠缺的？
  7. 需要完成什么关键业务才能达到里程碑？
  8. 需要外部合作伙伴吗？
  9. 上述问题的成本是？
10. 项目是否能够真正落地？
  1. 可以使用“朋友测试法”。我身边的某个朋友是不是会成为用户？他为什么要使用这款产品？我的父母会不会使用这款产品？为什么？如果测试下来发现身边没有一个“真人”想要使用它，这个概念就有很大问题。
  2. 可以使用“真实世界投射法”。把互联网中的概念投射到真实世界中普遍存在的事物上，通过已经被验证的真实世界案例来推断互联网产品的可行性。比如在 facebook 的 news feed 之前，要了解某个好友的动态需要到他的主页去看，现实世界中我们显然不想要去好友家里打听他的最新状况，而是不经意间就会听说，而news feed 显然满足了这个需求。
11. 产品是为用户提供价值的，如果能更好地为用户提供价值，那就要及早革命自己。比如新浪推出了新浪微博，直接去看新闻的人就少了，算是革掉自己的命。但是新浪新闻自身实际上还是没有意识到危机，最终被今日头条取而代之
12. 未来的行业划分
  1. 不应该是 农业-工业-服务业，而因该是&lt;strong&gt;制造业-服务业-体验页&lt;/strong&gt;。如果你为物品和有形的东西收费，那么你所从事的就是商品业，如果你为自己开展的活动收费，那么你从事的就是服务业，只有当你为消费者和你一起度过的时间收费的时候，你才算进入了体验业。——《体验经济》。比如网游、QQ会员等。
13. 互联网公司中的两种重要产品：
  1. 现金牛：利润率超级高，占了公司总利润的很大比例，比如九城代理的魔兽世界
  2. 平台产品：能通过自身的资源优势拉动其他产品的产品，比如QQ。
  一款产品的用户规模时候会变得很大，最终成长为平台型产品，要看这款产品有没有满足用户的强需求和频发需求。
  很多用户都是在注册这个流程中流失的，所以平台提供自己的账号体系是非常有必要的，比如 Google 的 Gmail 账号。
14. 获得投资，王潇总结的三大问题：
  1. 产品概念是否 处于 趋势 上，是否 在 满足 强 需 求和 频 发 需求？ 
  2. 是否 找到了 有效 的 突破口， 突破 之后 如何 建立 壁垒？
  3. 团队 能力 与 产品 概念 是否 匹配？
  突破口的作用在于让用户觉得产品有用，壁垒的作用在于让这种有用变得难以复制。App Store 里的大量应用，淘宝卖家服务市场里的大量应用，微信中沉淀的关系链，都是非常高的壁垒，竞争对手们很难复制一些功能来获得这些特殊的资源。
15. 使用焦点小组对用户进行概念测试
  1. 焦点小组就是邀请6-9个人，具有代表性的用户对某一主题或观念进行深入讨论的方法。
  2. 用户的历史行为比他们的当前意愿更有价值，因为用户不一定表达的是真实观点。
  3. 其他的方法包括体验观察室（感觉不太现实），更重要的是 A/B试验。
  最重要的意识是，网站做出重要觉得的时候，要依赖数据，而不能想当然，比如 picasa 的下载按钮试验。&lt;/p&gt;
&lt;h2&gt;产品经理的具体工作&lt;/h2&gt;
&lt;h3&gt;产品设计文档&lt;/h3&gt;
&lt;p&gt;把概念变成图纸。YN：这算是产品经理的一项具体工作了，当然网页这个概念在移动互联网时代也应该改成应用。&lt;/p&gt;
&lt;p&gt;需要三个图纸：网页(App)结构图、网页(App)线框图、网页(App)描述表&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;网页(App)结构图。描述了整个网站或者应用的架构，确定了模块划分和网页（应用界面）的个数。（很多时候根绝这个确定url规则和title规则）。描述结构图应该使用MESE法则，相互独立，完全穷尽。&lt;strong&gt;其中标注的优先级可以将项目进一步细分为几个阶段：phase1、phase2、phase3，这对网站的开发很有帮助，可以让项目成员知道，完成了phase1基本上网站就可用了。&lt;/strong&gt; &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以使用面向对象的方法来做产品规划，在实验过程中更容易达到用户人物的闭环，比如对于书的CRUD，基本满足了对用户买书的闭环。&lt;/p&gt;
&lt;p&gt;考虑成本的时候，想着研发成本只占20%。剩下的问题是确认这80%的非研发成本都在哪里？YN: 为什么？&lt;/p&gt;
&lt;p&gt;PS：消灭拖延的最好方法，就是把任务分解为连续的，在能力范围内的小任务。
&lt;img alt="[糗事百科的功能]" src="https://ws3.sinaimg.cn/large/006tNc79ly1fpfxrkcmqbj30do0cgjv6.jpg" height=200px/&gt;
&lt;img alt="[糗事百科用户角色划分]" src="https://ws4.sinaimg.cn/large/006tNc79ly1fpfxrup5mdj30ou0dwq91.jpg" height=200px /&gt;
  2. 网页(App)线框图。图片越抽象，读者理解起来就有越大的发挥空间。使用 balsamiq mockup 绘制线框图。
  3. 网页描述表是包含了一份网页所需要战士的元素和他背后的逻辑，而不包含这些元素在页面中的布局。
    1. 将产品经理的工作和交互设计师的工作区分开，茶品经理关注的是传递&lt;em&gt;什么&lt;/em&gt;信息，交互设计师关注的是&lt;em&gt;怎样&lt;/em&gt;传递信息。
    2. 向研发团队说明信息背后的逻辑，方便他们实现。
    描述表和线框图一起构成了一个网页的完整描述，有了这个研发才能评估开发量。
  除此之外还有一些非功能需求，比如网页的加载延时等等，需要作为整体需求一并提交。&lt;/p&gt;
&lt;p&gt;产品设计文档是伴随产品整个生命周期的链接概念和执行的重要工具，它帮助产品团队与研发团队和高层之间达成共识，进而明确研发计划并指导研发过程。&lt;/p&gt;
&lt;p&gt;有以下几点需要注意：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设计文档需要有 FAQ，当项目进行了很久之后，很可能没有人记得当初某个需求是如何确定的，这时候附加信息就能帮助团队找出最初的背景。&lt;/li&gt;
&lt;li&gt;应该使用 wiki 而不是 word 文档来记录产品开发文档，好处太多了，不再赘述。&lt;/li&gt;
&lt;li&gt;产品经理不应该对别人（尤其是研发人员）指手画脚。&lt;/li&gt;
&lt;li&gt;产品开发文档应该使用肯定的语言，不要提模糊的需求。&lt;/li&gt;
&lt;li&gt;不要过分关注文档而忽视了沟通&lt;/li&gt;
&lt;li&gt;文档的模板并不重要，关键是内容&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;用户体验&lt;/h2&gt;
&lt;p&gt;网络广告在产品认知中只能排名第二，排名第一的是朋友也在用。而用户体验决定口碑，口碑决定产品成败。&lt;/p&gt;
&lt;p&gt;用户体验的三要素：别让我等、别让我想、别让我烦。&lt;/p&gt;
&lt;p&gt;用户的耐心是非常有限的，他们对于速度的追求&lt;em&gt;超过了对于画面的追求&lt;/em&gt;。实际上这是一个响应问题，而不是性能问题，比如程序打开时候的图标放大动画。而且如果牺牲完整性在可以容忍的范围内，就要牺牲完整性，而让性能更好。&lt;/p&gt;
&lt;p&gt;如果万一出现了问题，要加强信息的披露和用户的沟通，争取用户的谅解和支持。&lt;/p&gt;
&lt;p&gt;布什内尔：谁低估美国人的智商，谁就会发财。用户是懒得想的。&lt;/p&gt;
&lt;p&gt;设备当前位置和目标位置的距离，距离越短，所用时间越短。面积越大，所用时间越短。尽量减少用户的操作时间。另外采用温柔的提示方法，不要弹出警告对话框。&lt;/p&gt;
&lt;p&gt;对于一些用户会感到很烦的按钮，比如“注册”，可以替换成“继续”，让用户顺便创建一个账户，这样更好。&lt;/p&gt;
&lt;p&gt;用户喜欢消灭数字，比如“豆邮(1)”，从头条的实践来看，这个小红点还是很管用的。但是不要让数字太大，这样用户直接放弃治疗了。&lt;/p&gt;
&lt;h2&gt;项目管理&lt;/h2&gt;
&lt;p&gt;项目经理对项目负责，产品经理对产品负责。&lt;/p&gt;
&lt;p&gt;首先，产品经理提出产品概念，梳理好用户的任务。设计团队中的交互设计师会和产品经理一起设计表现层的信息展现和交互。有了线框图后，图形用户界面设计师开始设计形状、色彩、质感等视觉元素，确定产品在表现层的最终展现。同时，研发团队中的系统架构师会根据产品经理的产品设计文档，规划好业务逻辑层要做的事情并确认要存储哪些数据，也会确定表现层、业务逻辑层、数据持久层和辅助系统都要用到哪些技术，并且估算不同用户规模下需要的服务器数量和带宽；研发同事会按照系统架构师的规划领取自己的研发任务，这些研发任务完成后会被组合好安装到服务器上。图形用户界面设计师的工作和研发团队的工作会在表现层整合到一起，形成兼具视觉效果和特性的产品表现层。然后，测试团队通过测试确认产品是否符合产品设计文档，测试通过后通知产品经理进行最终的测试和体验。这一切完成之后，产品就可以发布和用户见面了。&lt;/p&gt;
&lt;p&gt;常见的方案：从 app 开始，然后平移到 wap 页，然后在拓展到 web 和 iPad。原因是从一个精简的基础做加法容易，而从一个大而全的基础上割肉很难。&lt;/p&gt;
&lt;p&gt;开发项目往往是由虚拟团队负责的，项目成员不是产品经理或者项目经理的直接下属，所以产品经理也没有恐吓他们的大棒，也触碰不到他们的评级和奖金。&lt;/p&gt;
&lt;p&gt;世界语是指项目组所有成员通用的语言，世界语的教科书就是项目字典。项目字典并不是一份文档，它是项目经理在项目团队中所推广的一份虚拟文档，它存在于产品需求文档和日常的沟通中。首先，项目经理在日常的沟通中发现大家经常出现语言不通的地方，然后对这些地方进行更精确的命名以消除歧义，并且在日后的沟通中不断强化。&lt;/p&gt;
&lt;p&gt;对于项目中的资源和实施环节，需要预先评估风险，然后考虑到如果发生了这样的情况，是否可以忍受，或者有什么补救的方法。&lt;/p&gt;
&lt;p&gt;墨菲定律&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一项工作如果只有一个人负责，这个人肯定会休假或者离职&lt;/li&gt;
&lt;li&gt;人为没有技术难点的部分，都会成为技术难点或者是性能瓶颈&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;选用轻量级、对团队现有工作习惯入侵小的工具，可以事半功倍，太重的工具往往因为懒得启动而变成鸡肋，与团队工作习惯差异太大则难以有效执行。&lt;/p&gt;
&lt;p&gt;《失控》：要想洞悉一个系统所蕴藏的涌现结构，最快捷、最直接也是唯一可靠的方法就是运行它。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sat, 10 Mar 2018 21:15:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-03-10:/posts/jie-wang-yue-du-bi-ji.html</guid><category>读书笔记</category></item><item><title>Linux 命令行查看系统信息</title><link>/posts/linux-ming-ling-xing-cha-kan-xi-tong-xin-xi.html</link><description>&lt;h1&gt;查看机器名&lt;/h1&gt;
&lt;p&gt;uname -a # view system name
arch # show arch&lt;/p&gt;
&lt;h1&gt;查看 ubuntu 版本&lt;/h1&gt;
&lt;p&gt;show ubuntu version&lt;/p&gt;
&lt;p&gt;cat /etc/*release&lt;/p&gt;
&lt;h1&gt;查看内存使用&lt;/h1&gt;
&lt;p&gt;free -mh&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(master)kongyifei@localhost ~ $ free -mh
             total       used       free     shared    buffers     cached
Mem:          251G       241G       9.8G       5.9G       4.3G        76G
-/+ buffers/cache:       161G        90G
Swap:           0B         0B         0B
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;含义，第一行表示实际的内存占用情况，linux的机制是尽可能多的占用内存，所以free往往很小；但是占用的内存不一定都在被使用，也就是最后的buffers和cached内存是被系统预先占用的。
在第二行把这两项抛出，就是你的实际内存占用161G，实际可使用内存90G&lt;/p&gt;
&lt;h1&gt;iostat 和 vmstat&lt;/h1&gt;
&lt;p&gt;vmstat -awS M&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(master)kongyifei.rocks@n8-147-097 ~/repos/crawl_deploy/svc_ctl $ vmstat -a
procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
 r  b   swpd   free  inact active   si   so    bi    bo   in   cs us sy id wa st
57  0      0 197155680 3614480 57558348    0    0     8    39    0    0  6  2 91  0  0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查看内存使用情况，其中最重要的是free和si、so三列，其中free表示空闲内存，si表示swap in，so表示 swap out&lt;/p&gt;
&lt;p&gt;vmstat INTERVAL TIMES 执行vmstat每INTERVAL秒，并且执行TIMES次&lt;/p&gt;
&lt;p&gt;http://www.orczhou.com/index.php/2010/03/iostat-detail/&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sat, 03 Mar 2018 05:23:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-03-03:/posts/linux-ming-ling-xing-cha-kan-xi-tong-xin-xi.html</guid><category>后端</category><category>计算机</category></item><item><title>安卓证书与代理自动配置</title><link>/posts/an-zhuo-zheng-shu-yu-dai-li-zi-dong-pei-zhi.html</link><description>&lt;p&gt;Go to Settings &amp;gt; Security &amp;gt; Install from storage.&lt;/p&gt;
&lt;p&gt;install programatically can be achived by from command line, by moving certs to &lt;/p&gt;
&lt;p&gt;replacing bks file solely is useless, it has to be combined with the password&lt;/p&gt;
&lt;p&gt;https://github.com/danzeeeman/meerkat-decompiled/blob/master/io/fabric/sdk/android/services/network/PinningInfoProvider.java&lt;/p&gt;
&lt;p&gt;set proxy programatically&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;set mannully for one&lt;/li&gt;
&lt;li&gt;pull /data/misc/wifi/ipconfig.txt&lt;/li&gt;
&lt;li&gt;push to other devices&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如何安装证书&lt;/p&gt;
&lt;p&gt;make certs like this tutorial,  http://forum.xda-developers.com/google-nexus-5/help/howto-install-custom-cert-network-t2533550
but push it to /data/misc/user/0/cacerts-added/&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sat, 24 Feb 2018 18:08:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-02-24:/posts/an-zhuo-zheng-shu-yu-dai-li-zi-dong-pei-zhi.html</guid><category>大前端</category><category>Android</category><category>计算机</category></item><item><title>命令行的一些小技巧</title><link>/posts/ming-ling-xing-de-yi-xie-xiao-ji-qiao.html</link><description>&lt;p&gt;最近工作中经常用到的一些组合命令，本来想提交到 commandlinefu.com 上，但是忘记了密码，怎么也登录不上去了，记到这里吧&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;脚本所在的目录&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dirname $0
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;文件夹下面按照占用空间大小排序&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;du -sh `ls` | sort -rh
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;返回上一个目录&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd -
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;显示所有的日志的最后几行&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tail *
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;set&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;set -x # 显示每个执行的命令
set -e # 当有程序返回非0值时直接退出，相当于抛出异常
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;here doc&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat &amp;lt;&amp;lt; EOF &amp;gt; /tmp/yourfilehere
These contents will be written to the file.
        This line is indented.
EOF
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;删除包含某个关键字的所有行&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fd -t f -0 | xargs -0 sed -i /KeyWord/d
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;在 shell 中，所有字符串都要用引号包围&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Always quote strings in bash. If you string is empty and you are testing it with == or !=, then there will be a "== is not uniary operator" error&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;替换一个文件夹下的所有文件&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find ./ -type f -exec sed -i -e &amp;#39;s/apple/orange/g&amp;#39; {} \;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;from: https://stackoverflow.com/questions/6758963/find-and-replace-with-sed-in-directory-and-sub-directories&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sun, 28 Jan 2018 19:51:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-01-28:/posts/ming-ling-xing-de-yi-xie-xiao-ji-qiao.html</guid><category>命令行</category><category>后端</category><category>计算机</category></item><item><title>搭建 git 服务器（中心仓库）</title><link>/posts/da-jian-git-fu-wu-qi-zhong-xin-cang-ku.html</link><description>&lt;h1&gt;gitlab&lt;/h1&gt;
&lt;p&gt;建议使用 gitlab 搭建，只需要一个命令就可以了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run --detach \
    --hostname gitlab.example.com \
    --publish 443:443 --publish 80:80 --publish 22:22 \
    --name gitlab \
    --restart always \
    --volume /srv/gitlab/config:/etc/gitlab \
    --volume /srv/gitlab/logs:/var/log/gitlab \
    --volume /srv/gitlab/data:/var/opt/gitlab \
    gitlab/gitlab-ce:latest
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;source: https://docs.gitlab.com/omnibus/docker/README.html&lt;/p&gt;
&lt;h1&gt;手工搭建 git 服务器&lt;/h1&gt;
&lt;p&gt;假设服务器的名字是 git.example.com.
首先，添加一个叫做git的用户&lt;code&gt;adduser git&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;然后如果不存在的话, 为这个用户新建一个主目录&lt;code&gt;mkdir /home/git&lt;/code&gt;，然后把这个目录设为git所有&lt;code&gt;chown git ~git&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;再在本地把你的ssh公钥拷贝到服务器上 
    ssh-copy-id git@git.example.com&lt;/p&gt;
&lt;p&gt;服务器就这样搞好了&lt;/p&gt;
&lt;h2&gt;使用&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;在服务器上新建仓库&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;首先，在服务器新建一个项目, 其中 new_project 是你的项目的名字.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh git@git.example.com &amp;quot;mkdir &amp;lt;new_project&amp;gt;.git &amp;amp;&amp;amp; cd &amp;lt;new_project&amp;gt;.git &amp;amp;&amp;amp; git init -bare&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当然这么一长串实在是太烦了, 我们可以把它写成一行脚本new_repo.sh&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
ssh git@git.example &lt;span class="s2"&gt;&amp;quot;mkdir &lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;\.git &amp;amp;&amp;amp; cd &lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;\.git &amp;amp;&amp;amp; git init --bare&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;New git repo git@git.example.com:&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;.git&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;然后 chmod +x new_repo.sh
以后就可以这样调用了 ./new_repo.sh foobar 就可以了&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;和本地建立连接&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果是新项目&lt;/p&gt;
&lt;p&gt;然后 clone 到本地就好了：&lt;/p&gt;
&lt;p&gt;git clone git@git.example.com:new_project.git&lt;/p&gt;
&lt;p&gt;如果是老项目&lt;/p&gt;
&lt;p&gt;如果你已经在本地有了项目, 并且初始化了 git 仓库, 不是采用clone，而是直接设置上游服务器，那就推送到服务器上&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git remote add origin git@git.example.com:new_project.git
git push -u origin master
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sat, 20 Jan 2018 22:50:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-01-20:/posts/da-jian-git-fu-wu-qi-zhong-xin-cang-ku.html</guid><category>后端</category><category>计算机</category></item><item><title>一些 vim 小技巧</title><link>/posts/yi-xie-vim-xiao-ji-qiao.html</link><description>&lt;h3&gt;重新对齐文本到固定长度&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gq&amp;lt;motion&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;check if mapping is replaced&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;:verbose map &amp;lt;Key&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;using map may cause infinite recursion!&lt;/p&gt;
&lt;h3&gt;force set syntax&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;# vim: set filetype=javascript&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;exit&lt;/h3&gt;
&lt;p&gt;使用 Ctrl-C 而不是esc
使用ZZ而不是:wq&lt;/p&gt;
&lt;h3&gt;window management&lt;/h3&gt;
&lt;p&gt;use ctrl-w r to swap pane&lt;/p&gt;
&lt;h3&gt;folding&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;{selection}zf&lt;/code&gt; or &lt;code&gt;zf{motion}&lt;/code&gt; for manual folding&lt;/p&gt;
&lt;h3&gt;history&lt;/h3&gt;
&lt;p&gt;Ctrl-O to go back to files
Ctrl-I to go to new files&lt;/p&gt;
&lt;p&gt;:%s/pattern//gn&lt;/p&gt;
&lt;h3&gt;delete blank lines&lt;/h3&gt;
&lt;p&gt;:g/^$/d&lt;/p&gt;
&lt;h3&gt;run python from vim&lt;/h3&gt;
&lt;p&gt;:w !python&lt;/p&gt;
&lt;h3&gt;nerdtree的使用&lt;/h3&gt;
&lt;p&gt;使用i和s分别在split中打开文件&lt;/p&gt;
&lt;p&gt;不要使用chardet来检测过长的网页，可以检测前一千个字符 chardet.detect(text[:1000])&lt;/p&gt;
&lt;h3&gt;交换两列&lt;/h3&gt;
&lt;p&gt;:%!awk '{print $2, $1}'&lt;/p&gt;
&lt;p&gt;:set fileencoding=utf8
:w myfilename&lt;/p&gt;
&lt;h3&gt;add utf-8 BOM&lt;/h3&gt;
&lt;p&gt;:set bomb  # add BOMB&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Thu, 18 Jan 2018 06:26:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-01-18:/posts/yi-xie-vim-xiao-ji-qiao.html</guid><category>vim</category><category>小技巧</category><category>计算机</category><category>通用工具</category></item><item><title>django auth and user</title><link>/posts/django-auth-and-user.html</link><description>&lt;h1&gt;激活&lt;/h1&gt;
&lt;p&gt;django 自带的 auth 模块需要收先创建数据库才能够使用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python manage.py migrate auth
python manage.py migrate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;request.user.is_anonymous 检查用户是否&lt;/p&gt;
&lt;p&gt;django comes with login/logout forms and views&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.auth&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;auth_views&lt;/span&gt;
&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^login/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;auth_views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;login&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^logout/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;auth_views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;logout&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^admin/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;By default, the django.contrib.auth.views.login view will try to render the registration/login.html template.  and will redirct to the /accouts/profile page&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;base.html&amp;#39;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
 &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;title&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;Login&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt; 
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Login&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt; 
&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;csrf_token&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt; 
&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;form.as_p&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Login&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt; 
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can change what django renders&lt;/p&gt;
&lt;p&gt;&lt;code&gt;url(r'^login/$', auth_views.login, {'template_name': 'core/login.html'}, name='login'),&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can change where django redirects&lt;/p&gt;
&lt;p&gt;&lt;code&gt;LOGIN_REDIRECT_URL = 'home' # in settings.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;logout&lt;/p&gt;
&lt;p&gt;by default, renders the registration/logged_out.html&lt;/p&gt;
&lt;p&gt;&lt;code&gt;url(r'^logout/$', auth_views.logout, {'template_name': 'logged_out.html'}, name='logout'),&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;url(r'^logout/$', auth_views.logout, {'next_page': '/'}, name='logout'),&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Note the difference, you don't have to do anything when visiting /logout, the system will just log you out and send you to another page or render a logged out page&lt;/p&gt;
&lt;p&gt;~~Side notes: why changing the redirect url is different with login? find it out later~~&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 17 Jan 2018 22:53:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-01-17:/posts/django-auth-and-user.html</guid><category>Django</category><category>后端</category><category>计算机</category></item><item><title>tiller for docker</title><link>/posts/tiller-for-docker.html</link><description>&lt;h1&gt;Yifei's Notes&lt;/h1&gt;
&lt;p&gt;Tiller SUCKS&lt;/p&gt;
&lt;p&gt;The only good part of tiller is that it makes a docker image can read environment variables and generate config files based on predefined templates, this functionality should easily be achieved by python and jinja2&lt;/p&gt;
&lt;h1&gt;Tiller&lt;/h1&gt;
&lt;p&gt;tiller runs program such as nginx inside docker instead of bare-bone nginx. tiller dynamically generates config files for different environment such as dev and QA.&lt;/p&gt;
&lt;p&gt;tiller is only useful because &lt;strong&gt;your program reads config files only&lt;/strong&gt; instead of environment variables&lt;/p&gt;
&lt;p&gt;you define variables and pass the variables to tiller, tiller generate config files and the start corresponding program.&lt;/p&gt;
&lt;p&gt;Before: Docker -&amp;gt; nginx
After: Docker -&amp;gt; tiller -&amp;gt; nginx&lt;/p&gt;
&lt;p&gt;you copy the config file template when building image
and run the container with you env vars&lt;/p&gt;
&lt;h1&gt;Downsides&lt;/h1&gt;
&lt;p&gt;We have to pre-define several environments in the image, then we choose which to use when starting the container.
It's fine to use if we have limited envs, but what if we want to change the environment, we have to repack the image&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 17 Jan 2018 20:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-01-17:/posts/tiller-for-docker.html</guid><category>后端</category><category>计算机</category><category>Docker</category></item><item><title>读《数学之美》</title><link>/posts/du-shu-xue-zhi-mei.html</link><description>&lt;ol&gt;
&lt;li&gt;文字只是信息的载体，而非信息本身&lt;/li&gt;
&lt;li&gt;翻译之所以能够进行，是因为人类的语言本质上都是等价的&lt;/li&gt;
&lt;li&gt;信息的冗余是信息安全的保障&lt;/li&gt;
&lt;li&gt;自然语言是上下文相关文法，而人工语言往往是上下文无关文法。&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sun, 07 Jan 2018 03:30:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-01-07:/posts/du-shu-xue-zhi-mei.html</guid><category>读书笔记</category></item><item><title>按部就班与业余时间的想法</title><link>/posts/an-bu-jiu-ban-yu-ye-yu-shi-jian-de-xiang-fa.html</link><description>&lt;p&gt;感觉很难在工作和学习之间找到平衡。倒也不是说每天的工作有多么枯燥无味，但是总归每天涉及的领域比较单一，也经常要做一些很不优雅的折中。&lt;/p&gt;
&lt;p&gt;这么多年的成长经历和习惯是，总要搞些“副业”才能心里安生，也的确没有吃亏，如果只是按部就班的话，可能高中毕业最终会上一个普通二本、或者从数学系毕业了去做一个银行柜员？&lt;/p&gt;
&lt;p&gt;然而现在呢，收获的确是有的，我也不确定是不是其实这已经是最快的速度了，自己总是思维跳跃是不是反倒在浪费宝贵的学习机会，只感觉时间过的特别快，而来不及抓住什么。总有人催，心里也很厌烦。有时候觉得同事们是由一些很好的思路，另外的时候也觉得好多事情其实稍微多一点时间停下来解决一下以后会省很多时间，然而总是一个漏洞补另一个漏洞。有时候又在想是不是边际效益已经变得很小了，该去干一些别的事情。&lt;/p&gt;
&lt;p&gt;如果有机会开一家公司的话，一定要多给工程师一些时间吧。还是觉得很多事情能提升很大的效率，但是确总在很低的效率做。&lt;/p&gt;
&lt;p&gt;也许只是能力不够吧，好多东西可能自己遇到了要花30分钟了解一下，而别人五分钟就够了。。&lt;/p&gt;
&lt;p&gt;有些东西的确不懂也可以干好每天的工作，比如 Linux 上 C 编程，比如编译原理，比如 https 的原理，但是确实有些时候会成为瓶颈，另外遇到了但却不能弄痛总感觉心有不甘。&lt;/p&gt;
&lt;p&gt;之前在一家外企工作，应该说 work-life balance 很好了，不过自知能力不够，业余时间还是看看书好。现在 work-life balance 没有了，倒也没有什么，问题是 work-study balance 也很难维持。。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 02 Jan 2018 07:06:00 +0800</pubDate><guid isPermaLink="false">tag:None,2018-01-02:/posts/an-bu-jiu-ban-yu-ye-yu-shi-jian-de-xiang-fa.html</guid><category>反思与总结</category></item><item><title>学习写一个编译器</title><link>/posts/xue-xi-xie-yi-ge-bian-yi-qi.html</link><description>&lt;h1&gt;为什么？&lt;/h1&gt;
&lt;p&gt;有一个很好的比喻：不懂编译器写程序就好比没有学过人体解剖学就去画人像一样，能当让是能，但是核心上总有些不对的地方&lt;/p&gt;
&lt;p&gt;每个成功的项目都有很多的语言构成，拿一个简单的 Python Web 项目来说，我们可能需要 Python、yml、jinja、ini 等等多种语言（不一定是完备的变成语言）。总有一天你对发现现有的语言并不能特别好得满足你的特定需求的时候，而这时候你就需要一个编译器了。&lt;/p&gt;
&lt;p&gt;设计一门语言还是一个很好的联系&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.craftinginterpreters.com/image/a-map-of-the-territory/mountain.png"&gt;&lt;/p&gt;
&lt;h1&gt;编译的步骤&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" src="http://www.craftinginterpreters.com/image/a-map-of-the-territory/string.png"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Scanning，也就是词法分析（Lexical Analysis）&lt;/li&gt;
&lt;li&gt;Parsing&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 18 Dec 2017 07:14:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-12-18:/posts/xue-xi-xie-yi-ge-bian-yi-qi.html</guid><category>编译原理</category><category>计算机</category></item><item><title>Python 的单元测试</title><link>/posts/python-de-dan-yuan-ce-shi.html</link><description>&lt;h1&gt;编写测试的基本原则&lt;/h1&gt;
&lt;p&gt;每一个测试单元必须是完全独立的。每一个必须能够独立运行以及在其他的测试组中运行，不管他们的顺序如何。加载和清空数据应该使用 setUp() 和 tearDown() 方法（如果使用unittest）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;sans-io&lt;/strong&gt;。也就是把逻辑和 IO 分开来，这样在测试的时候方便指定输入，以及捕获输出。&lt;/p&gt;
&lt;p&gt;尽量让测试跑的快一点。如果一个测试在几毫秒之内跑不完的话，开发就会慢下来，以至于没有人再去跑这些测试了。如果实在有很花时间的测试，把他们单独放在一起定期执行。&lt;/p&gt;
&lt;p&gt;如果你正在开发某样东西的过程中被打断的话，可以写一个测试，这样当你回过头来的时候还能很快想起来需要做什么。&lt;/p&gt;
&lt;p&gt;使用有描述性的长名字。实际代码中你可能使用 &lt;code&gt;square()&lt;/code&gt; 这样的名字，但是在测试用你要用 &lt;code&gt;test_square_of_number_2&lt;/code&gt; 这样的名字。&lt;/p&gt;
&lt;p&gt;测试代码的另一个用途是作为新手的介绍。让别人来看你的代码的时候，看看测试就知道他是干什么的了。&lt;/p&gt;
&lt;h1&gt;编写测试的思路&lt;/h1&gt;
&lt;p&gt;按照代码逻辑分支测试，把代码的每一个分支的&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;入口参数是什么&lt;/li&gt;
&lt;li&gt;出口参数是什么&lt;/li&gt;
&lt;li&gt;副作用是什么&lt;/li&gt;
&lt;li&gt;产生的异常是什么&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;都测试到。&lt;/p&gt;
&lt;h1&gt;工具选择&lt;/h1&gt;
&lt;p&gt;Python 常用的测试工具有三种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;标准库自带的 unittest&lt;/li&gt;
&lt;li&gt;nose[2]&lt;/li&gt;
&lt;li&gt;pytest&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其中 unittest 完全是从 JUnit 移植过来的，用起来稍微有些别扭。nose 和 pytest 相比的话，网友大多推荐 pytest。详细的比较可一件参考文档。&lt;/p&gt;
&lt;h1&gt;pytest&lt;/h1&gt;
&lt;p&gt;测试函数使用test_开头, pytest 默认会查找当前目录中的 &lt;code&gt;test_&lt;/code&gt; 开头或者 &lt;code&gt;_test&lt;/code&gt; 结尾的文件中的测试并运行。使用assert来验证语句。&lt;/p&gt;
&lt;h2&gt;测试某个异常抛出：&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;SystemExit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_mytest&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;SystemExit&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;执行顺序&lt;/h2&gt;
&lt;p&gt;如果在一个文件中定义了多个测试函数，那么 pytest 将按照函数定义的顺序执行。&lt;/p&gt;
&lt;h2&gt;setup 和 teardown&lt;/h2&gt;
&lt;p&gt;setup 和 teardown 用来在测试开始前加载资源，并在测试结束后卸载资源。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以在文件中定义 setup_module 和 teardown_module 中&lt;/li&gt;
&lt;li&gt;可以在类中定义 setup_class 和 teardown_class 中定义加载和卸载方法。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;pytest 命令行选项&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pytest some_mod.py&lt;/code&gt; 运行某个文件中的中的测试&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pytest tests/&lt;/code&gt; 运行某个目录中的测试&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pytest -x&lt;/code&gt; 在第一个错误的地方结束&lt;/p&gt;
&lt;p&gt;pytest --pdb，当出现异常的时候, 打开pdb&lt;/p&gt;
&lt;h2&gt;mock 和 patch&lt;/h2&gt;
&lt;h1&gt;unittest&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# bootstrapping&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tearDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;#clean up&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Unittest 中的 assert 方法：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;assertEqual(a, b)&lt;/td&gt;
&lt;td&gt;a == b&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;assertNotEqual(a, b)&lt;/td&gt;
&lt;td&gt;a != b&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;assertTrue(x)&lt;/td&gt;
&lt;td&gt;bool(x) is True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;assertFalse(x)&lt;/td&gt;
&lt;td&gt;bool(x) is False&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;assertIs(a, b)&lt;/td&gt;
&lt;td&gt;a is b&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;assertIsNot(a, b)&lt;/td&gt;
&lt;td&gt;a is not b&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;assertIsNone(x)&lt;/td&gt;
&lt;td&gt;x is None&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;assertIsNotNone(x)&lt;/td&gt;
&lt;td&gt;x is not None&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;assertIn(a, b)&lt;/td&gt;
&lt;td&gt;a in b&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;assertNotIn(a, b)&lt;/td&gt;
&lt;td&gt;a not in b&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;assertIsInstance(a, b)&lt;/td&gt;
&lt;td&gt;isinstance(a, b)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;assertNotIsInstance(a, b)&lt;/td&gt;
&lt;td&gt;not isinstance(a, b)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;save it as fun_test.py and run it by:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python -m unittest fun_test
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;doctest&lt;/h1&gt;
&lt;p&gt;Note: only method starts with test is run by unittest module&lt;/p&gt;
&lt;p&gt;unittest这个库没有按照PEP8来, 看着就不爽&lt;/p&gt;
&lt;p&gt;注意docstring&lt;/p&gt;
&lt;p&gt;需要用 unicode, 需要用u prefix&lt;/p&gt;
&lt;p&gt;需要转义 \n&lt;/p&gt;
&lt;p&gt;需要使用&lt;BLANKLINE&gt;来代表空行&lt;/p&gt;
&lt;h1&gt;参考文档&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;https://www.reddit.com/r/Python/comments/50nqlp/is_nose_still_relevant_how_about_unittest/&lt;/li&gt;
&lt;li&gt;https://agopian.info/presentations/2015_06_djangocon_europe/?full#pythonic&lt;/li&gt;
&lt;li&gt;http://docs.python-guide.org/en/latest/writing/tests/&lt;/li&gt;
&lt;li&gt;https://realpython.com/python-testing/&lt;/li&gt;
&lt;li&gt;https://pytest-benchmark.readthedocs.io/en/latest/&lt;/li&gt;
&lt;li&gt;https://medium.com/@yeraydiazdiaz/what-the-mock-cheatsheet-mocking-in-python-6a71db997832&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sun, 17 Dec 2017 20:26:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-12-17:/posts/python-de-dan-yuan-ce-shi.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>[ZZ]如何做创业的品类选择</title><link>/posts/zzru-he-zuo-chuang-ye-de-pin-lei-xuan-ze.html</link><description>&lt;p&gt;转自：http://mp.weixin.qq.com/s/WdK1umJkeeQdgpFS9wZh7Q&lt;/p&gt;
&lt;p&gt;我们先看共享单车。&lt;/p&gt;
&lt;p&gt;移动支付、移动定位、地图、无桩、电子锁等等东西都不是突然出现的技术革新，但当这些东西的普及、覆盖、技术成熟度等都达到了一个临界点，ofo、摩拜就出现了。&lt;/p&gt;
&lt;p&gt;在这个例子下，Friction 是购买成本、是使用成本、是付费便捷度、是持有成本等等。&lt;/p&gt;
&lt;p&gt;再看共享充电宝。&lt;/p&gt;
&lt;p&gt;基本所有的技术基础和共享单车区别不大，但从 Friction 角度来看，有几点不同，而正是这几点不同，带来了本质的区别。&lt;/p&gt;
&lt;p&gt;首先，充电宝很便宜，购买成本很低，所以人们可以随手购买；其次，充电宝体积很小，持有成本很低，所以人们可以随身携带；最后，充电宝无法像单车一样随处停放，所以还多出了一个归还成本。&lt;/p&gt;
&lt;p&gt;也就是说，从 Friction 的角度来看，购买充电宝本身已经 Friction 很低，而共享充电宝的归还还反过来增加了 Friction。所以共享充电宝不如共享单车的品类好。&lt;/p&gt;
&lt;p&gt;那比较这两种其实我们可以发现，体积大的东西才有持有成本，而有持有成本才有 Friction 可以减少，也就是才有增值点，而人们无法携带体积更大的东西，所以就需要这类东西自带移动属性，也就是类交通工具才可以。&lt;/p&gt;
&lt;p&gt;而体积小的东西必须是人们愿意随身携带的，而且购买成本或持有成本高的，才能弥补（计算 Friction 总和）。这样的品类还有什么？&lt;/p&gt;
&lt;p&gt;这就到了第三种公司，衣二三这类的服装租赁。&lt;/p&gt;
&lt;p&gt;衣服这个品类非常有意思。衣服作为一个类别，是人们每天都要穿的（也就是每个人都随身携带的），但对于单件衣服来说，却有购买成本高，使用频次低（更换频次高）的问题。&lt;/p&gt;
&lt;p&gt;所以说，衣服租赁这个品类也是个好品类。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sun, 17 Dec 2017 08:55:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-12-17:/posts/zzru-he-zuo-chuang-ye-de-pin-lei-xuan-ze.html</guid><category>创业</category></item><item><title>Google 关于Machine Leaning 的笔记</title><link>/posts/google-guan-yu-machine-leaning-de-bi-ji.html</link><description>&lt;p&gt;前几天看了 Google 的一个关于 Machine Learning 的&lt;a href="https://docs.google.com/presentation/d/1kSuQyW5DTnkVaZEjGYCkfOxvzCqGEFzWBy4e9Uedd9k/preview"&gt;slides&lt;/a&gt;，感觉不错，整理一下学习笔记&lt;/p&gt;
&lt;h1&gt;ML 的定义&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;An approach to achieve artificial intelligence through systems that can learn from experience to find patterns in that data&lt;/p&gt;
&lt;p&gt;ML teaches a computer to recognise patterns by examples, rather than programming it with specific rules.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一个例子：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://ws1.sinaimg.cn/large/006tNc79gy1fmjv6ugbr4j31jw0mo4qp.jpg"&gt;&lt;/p&gt;
&lt;h1&gt;feature&lt;/h1&gt;
&lt;p&gt;一般来说，几个属性就代表了几个维度。&lt;/p&gt;
&lt;p&gt;&lt;img width=300 src=https://ws3.sinaimg.cn/large/006tNc79gy1fmjllksmxfj30ma0omwg0.jpg /&gt;&lt;/p&gt;
&lt;p&gt;有时候更多的维度，更容易做出分类：参考&lt;a href="http://www.visiondummy.com/2014/04/curse-dimensionality-affect-classification/"&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img width=300 src=https://ws2.sinaimg.cn/large/006tNc79gy1fmjnimu1pyj30qw0uaqe7.jpg /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img width=300 src=https://ws3.sinaimg.cn/large/006tNc79gy1fmjnptevb6j30mk0gkwhb.jpg /&gt;&lt;/p&gt;
&lt;h1&gt;机器学习的分类&lt;/h1&gt;
&lt;h2&gt;监督学习&lt;/h2&gt;
&lt;p&gt;数据是标注过的&lt;/p&gt;
&lt;h2&gt;无监督的学习&lt;/h2&gt;
&lt;p&gt;从没有标注的数据中学习&lt;/p&gt;
&lt;p&gt;&lt;img width=300 src=https://ws3.sinaimg.cn/large/006tNc79gy1fmjnt7mzroj30os0nowg1.jpg /&gt;&lt;/p&gt;
&lt;h2&gt;强化学习&lt;/h2&gt;
&lt;p&gt;通过带有激励的试错来学习&lt;/p&gt;
&lt;h1&gt;例子&lt;/h1&gt;
&lt;h2&gt;线性回归（Linear Regression）&lt;/h2&gt;
&lt;p&gt;&lt;img width=300 src=https://ws1.sinaimg.cn/large/006tNc79gy1fmjo16iq86j30hy0b4gmc.jpg /&gt;&lt;/p&gt;
&lt;h2&gt;聚类&lt;/h2&gt;
&lt;p&gt;&lt;img width=300 src=https://ws4.sinaimg.cn/large/006tNc79gy1fmjo292bd4j30nu0o475r.jpg /&gt;&lt;/p&gt;
&lt;h2&gt;KNN&lt;/h2&gt;
&lt;p&gt;&lt;img width=300 src=https://ws4.sinaimg.cn/large/006tNc79gy1fmjo31w9wnj30nm0iuq3r.jpg /&gt;&lt;/p&gt;
&lt;h2&gt;神经网络&lt;/h2&gt;
&lt;p&gt;&lt;img src=https://ws2.sinaimg.cn/large/006tNc79gy1fmjo8g08s2j31ie0h07b4.jpg /&gt;&lt;/p&gt;
&lt;h2&gt;fully-connected 神经网络&lt;/h2&gt;
&lt;p&gt;&lt;img src=https://ws3.sinaimg.cn/large/006tNc79gy1fmjo81ka29j31kw0l9wr1.jpg /&gt;&lt;/p&gt;
&lt;h2&gt;深度神经网络（DNN）&lt;/h2&gt;
&lt;p&gt;深度的意思就是有很多的层。比如说，对于人脸识别，其中某些层可能会识别出线条，然后有的层会识别出眼睛等等&lt;/p&gt;
&lt;h2&gt;卷积神经网络（CNN）&lt;/h2&gt;
&lt;p&gt;CNN 可以用来处理图片数据，以及可以表示为图片的数据。要确定一组数据可不可以表示为图片，可以尝试交换任意两行，或者任意两列，如果交换后对数据没有影响，那么就不可以被认为是图片数据。更多细节参看这个 &lt;a href="https://youtu.be/FmpDIaiMIeA"&gt;Video&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;算法的分类&lt;/h1&gt;
&lt;p&gt;详细讲解请看&lt;a href="https://docs.google.com/presentation/d/1kSuQyW5DTnkVaZEjGYCkfOxvzCqGEFzWBy4e9Uedd9k/preview"&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Regression&lt;/h2&gt;
&lt;p&gt;回归首先要有一个评价误差的方法，然后迭代的求出模型。回归是一类从统计中得出的方法，比如上面说到的 线性回归（用最小二乘法），还有逻辑回归等等。&lt;/p&gt;
&lt;p&gt;&lt;img width=300 src=https://ws3.sinaimg.cn/large/006tNc79gy1fmjq0fm7qsj30fa0euabi.jpg /&gt;&lt;/p&gt;
&lt;h2&gt;Instance Based&lt;/h2&gt;
&lt;p&gt;Instance Based 是一个决策方法。通过相似度计算找出最接近的实例。比如KNN&lt;/p&gt;
&lt;p&gt;&lt;img width=300 src=https://ws2.sinaimg.cn/large/006tNc79gy1fmjpzyw85ej30f40h2dhc.jpg /&gt;&lt;/p&gt;
&lt;h2&gt;Decision Tree&lt;/h2&gt;
&lt;p&gt;自定向下，做出决策&lt;/p&gt;
&lt;p&gt;&lt;img width=300 src=https://ws2.sinaimg.cn/large/006tNc79gy1fmjpzktongj30ho0guwg1.jpg /&gt;&lt;/p&gt;
&lt;h2&gt;Bayesian&lt;/h2&gt;
&lt;p&gt;&lt;img width=300 src=https://ws2.sinaimg.cn/large/006tNc79gy1fmjq298126j30fs0fe404.jpg /&gt;&lt;/p&gt;
&lt;h2&gt;clustering&lt;/h2&gt;
&lt;p&gt;&lt;img width=300 src=https://ws1.sinaimg.cn/large/006tNc79gy1fmjsnszjsnj30ea0fajsp.jpg /&gt;&lt;/p&gt;
&lt;h2&gt;association rules&lt;/h2&gt;
&lt;p&gt;&lt;img width=300 src=https://ws3.sinaimg.cn/large/006tNc79gy1fmjsp79sk7j30eo0h4abg.jpg /&gt;&lt;/p&gt;
&lt;h2&gt;Artificial Neural Network&lt;/h2&gt;
&lt;p&gt;模拟人的神经系统，比如感知机&lt;/p&gt;
&lt;p&gt;&lt;img width=300 src=https://ws4.sinaimg.cn/large/006tNc79gy1fmjsqfb0uij30ge0hejsj.jpg /&gt;&lt;/p&gt;
&lt;h2&gt;深度学习&lt;/h2&gt;
&lt;p&gt;其实就是很多层的神经网络，比如CNN&lt;/p&gt;
&lt;p&gt;&lt;img width=300 src=https://ws2.sinaimg.cn/large/006tNc79gy1fmju4bxxz6j30fs0goq5h.jpg /&gt;&lt;/p&gt;
&lt;h2&gt;降维 (Dimensionality Reduction)&lt;/h2&gt;
&lt;p&gt;找到数据的内在属性，然后缩减维度，以便能够使用监督学习方法&lt;/p&gt;
&lt;p&gt;&lt;img width=300 src=https://ws1.sinaimg.cn/large/006tNc79gy1fmju5kon3tj30fu0hc3zm.jpg /&gt;&lt;/p&gt;
&lt;p&gt;还有一个ensemble没看懂&lt;/p&gt;
&lt;h1&gt;机器学习的输出&lt;/h1&gt;
&lt;h2&gt;连续输出&lt;/h2&gt;
&lt;p&gt;比如拟合好的线性回归跟定一个数值，可以预测另一个数值&lt;/p&gt;
&lt;h2&gt;概率预测&lt;/h2&gt;
&lt;h2&gt;分类&lt;/h2&gt;
&lt;p&gt;比如分辨出小猫小狗，或者是识别数字&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sat, 16 Dec 2017 19:09:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-12-16:/posts/google-guan-yu-machine-leaning-de-bi-ji.html</guid><category>计算机</category><category>机器学习</category></item><item><title>知识付费是一个伪需求</title><link>/posts/zhi-shi-fu-fei-shi-yi-ge-wei-xu-qiu.html</link><description>&lt;p&gt;从分答开始，互联网似乎掀起了一股知识付费的热潮。然而在我看着这股热潮实在是个大大的泡沫，只不过是乘着支付宝和微信支付普及的东风创造出来的一个伪需求，热乎劲一过估计也就偃旗息鼓了。&lt;/p&gt;
&lt;p&gt;互联网的精神是开放共享，而知识付费则是建立了一个付费的围墙，显然和大势是相悖的。&lt;/p&gt;
&lt;h1&gt;回答欲&lt;/h1&gt;
&lt;p&gt;对于付费的问题和收费的问题，人们的回答欲望是有天壤之别的。有时候看个问题不错，就是按耐不住体内的洪荒之力，想写上几千字。但是突然有个人过来说，来回答这个问题给你5块钱，瞬间就不想答了。。&lt;/p&gt;
&lt;p&gt;本来回答问题实际上是自己的一种精神享受，而一旦加上钱以后，人们潜意识里就会觉得这是再给别人干活儿了，所以几块钱反倒会坏了事。&lt;/p&gt;
&lt;p&gt;真正有价值的东西要么根本不会公开传播，要么那就是要出书立传，流芳千古的，会卖着屈屈几块钱？&lt;/p&gt;
&lt;p&gt;比如说我，去开一场live，5块一个人，有1000人来听，那我也得准备上个一两天吧，但是我能教啥呢，我可以说一些爬虫的基础知识啥的，但是说深了，我也不能暴露我们的业务数据吧？比我级别高一点的，手里期权一大把，会缺这点钱？会有时间挣这点钱？哪怕是个愿意分享知识，建立自己影响力的人，那肯定会去写博客啊，这样才能扩大影响力嘛&lt;/p&gt;
&lt;h1&gt;眼下的红火&lt;/h1&gt;
&lt;p&gt;付费问答现在还是一个噱头，所以还会有一些名人／大V来做问答，但是这更多意义上算是粉丝经济，名人要的是曝光度，而不是在乎那屈屈几款钱。名人的话更多的是增加了曝光，这个潜在价值太大，不过说了。但是主流的开live的人，如果是邀请来的人水平够了，那人家根本不缺这点钱，花这么长时间就能在这么一点人之间扩大影响力太不值啊，也就图个新鲜。如果邀请来的人愿意长期赚live这个钱，那水平肯定高不了啊，不然谁吃这点苍蝇肉啊，所以就是大量的零基础入门python了。还有就是要想让受众广，就只能开这种基础课&lt;/p&gt;
&lt;h1&gt;在线教育&lt;/h1&gt;
&lt;p&gt;广义的说，知识付费也包括 K12 在内的在线教育，这部分我倒是非常看好。毕竟有的人就是学习能力差，或者说愿意听人嚼碎了再讲给他听，这种需求在线下是刚需，把线下的培训搬到线上，能够更好的传播，能够突破线下教育的地理限制，相信会有很好的发展。&lt;/p&gt;
&lt;h1&gt;付费问答的水平悖论&lt;/h1&gt;
&lt;p&gt;现在的这些付费问答就是听众想花5块钱卖价值百万的商业问题，回答的人要么不懂，要么也没法说。&lt;/p&gt;
&lt;p&gt;一样，你想聊的人不稀罕这点钱，稀罕这点钱的人你不想和他聊&lt;/p&gt;
&lt;p&gt;真正的知识付费是几百万的商业策划，几百万的UI设计。公开的问题可能是 “前端程序员怎么规划学习路径”，然而付费问答则可能是现在你花五块钱就想问“我现在会js，会一点css，会一点vue，blah，blah，”&lt;/p&gt;
&lt;h1&gt;真正的知识付费&lt;/h1&gt;
&lt;p&gt;其实知识付费早就存在。小说就是最好的例子，并不是什么高大上的新东西&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Fri, 15 Dec 2017 18:37:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-12-15:/posts/zhi-shi-fu-fei-shi-yi-ge-wei-xu-qiu.html</guid><category>创业</category><category>运营与产品</category></item><item><title>lispy 笔记</title><link>/posts/lispy-bi-ji.html</link><description>&lt;p&gt;阅读 norvig 文章&lt;a href="http://norvig.com/lispy.html"&gt;(How to Write a (Lisp) Interpreter (in Python))&lt;/a&gt;的笔记。&lt;/p&gt;
&lt;p&gt;作为从数学系转过来的学生，之前并没有学过编译原理，只是自己在一些文章中读过关于编译器的只言片语，借这篇文章了解一些编辑器的基本知识吧。&lt;/p&gt;
&lt;p&gt;这篇文章主要是用 Python 实现了一个 lisp 的解释器。lisp 语言的语法非常简单，可以说lisp语言本身就是 AST 。一个解释器基本有两个部分。一部分是 parser，生成AST，另一部分是执行，运行AST。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;code --&amp;gt; (parse)  --&amp;gt; AST --&amp;gt; (eval) --&amp;gt; result
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;也就是我们只要去实现 parse 和 eval 两个函数就好了～&lt;/p&gt;
&lt;h1&gt;类型定义&lt;/h1&gt;
&lt;p&gt;这里使用了几个类型，都是直接衍生自Python 的原生类型&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Symbol = str  # 变量
Number = (int, float)
Atom = (Symbol, Number)
List = list
Exp = (Atom, List)
Env = dict
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;parse&lt;/h1&gt;
&lt;p&gt;parse 传统意义上应该分为两部分，一部分是词法分析(Lexical Analysis)，也就是 tokenize，把代码转换成一系列的 token。另一部分是语法分析，也就是合成 AST。常用的工具有 lex，ply 等&lt;/p&gt;
&lt;p&gt;在 Lispy 中，我们直接使用 Python 的 str.split 来实现 tokenize&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def tokenize(chars: str) -&amp;gt; list:
    return chars.replace(&amp;#39;(&amp;#39;, &amp;#39; ( &amp;#39;).replace(&amp;#39;)&amp;#39;, &amp;#39; ) &amp;#39;).split()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后使用 read_from_tokens 构建一颗语法树。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def read_from_tokens(tokens: list) -&amp;gt; Exp:
    if len(tokens) == 0:
        raise SyntaxError(&amp;#39;unexpected EOF&amp;#39;)
    token = tokens.pop(0)  # 从左向右依次处理
    if token == &amp;#39;(&amp;#39;:
        L = []
        while token[0] != &amp;#39;)&amp;#39;:
            L.append(read_from_tokens(tokens))  # 构建子树
        tokens.pop(0)  #  弹出 &amp;#39;(&amp;#39;
        return L
    elif token == &amp;#39;)&amp;#39;:
        raise SyntaxError(&amp;#39;unexpected )&amp;#39;)
    else:
        return atom(token)

def atom(token: str) -&amp;gt; Atom:
    try:
        return int(token)
    except ValueError:
        try:
            return float(token)
        except ValueError:
            return Symbol(token)

def parse(program: str) -&amp;gt; Exp:
    return read_from_tokens(tokenize(program))
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;environment&lt;/h1&gt;
&lt;p&gt;环境大概和scope是相关的一个概念了。比如 &lt;code&gt;sqrt&lt;/code&gt; 和 &lt;code&gt;max&lt;/code&gt; 都是全局环境中的函数。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;outer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;outer&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;




&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;operator&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;op&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;standard_env&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Env&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;# 引入python math 模块的方法&lt;/span&gt;
    &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;truediv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;gt;=&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ge&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;=&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;le&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;=&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;abs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;append&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;apply&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;proc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;proc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;begin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;car&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;cdr&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:],&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;cons&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;eq?&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;expt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;equal?&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;length&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;list?&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;map&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;max&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;min&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;not&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;not_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;null?&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;number?&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;print&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;procedure?&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;callable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;round&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;symbol?&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;

&lt;span class="n"&gt;global_env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;standard_env&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;eval&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表达式&lt;/th&gt;
&lt;th&gt;语法&lt;/th&gt;
&lt;th&gt;语义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;变量引用&lt;/td&gt;
&lt;td&gt;symbol&lt;/td&gt;
&lt;td&gt;写出变量名就是表示引用这个变量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;常量&lt;/td&gt;
&lt;td&gt;number&lt;/td&gt;
&lt;td&gt;&lt;code&gt;10&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;条件式&lt;/td&gt;
&lt;td&gt;(if test conseq alt)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(if  (&amp;gt; 10 20) (+ 1 1) (+ 3 3)&lt;/code&gt; =&amp;gt; 6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;定义变量&lt;/td&gt;
&lt;td&gt;(define symbol exp)&lt;/td&gt;
&lt;td&gt;定义一个新的变量 &lt;code&gt;(define r 10)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;过程调用&lt;/td&gt;
&lt;td&gt;(proc args...)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(sqrt (* 2 8))&lt;/code&gt; =&amp;gt; 4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;quotation&lt;/td&gt;
&lt;td&gt;(quote exp)&lt;/td&gt;
&lt;td&gt;返回表达式，而不是执行它。&lt;code&gt;(quote (+ 1 2))&lt;/code&gt; =&amp;gt; &lt;code&gt;(+ 1 2)&lt;/code&gt;而不是3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;赋值&lt;/td&gt;
&lt;td&gt;(set! symbol exp)&lt;/td&gt;
&lt;td&gt;注意和定义变量的区别&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;过程&lt;/td&gt;
&lt;td&gt;(lambda (symbols...) exp)&lt;/td&gt;
&lt;td&gt;定义一个新的过程 &lt;code&gt;(lambda (r) (* pi (* r r)))&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Procedure&lt;/span&gt;:
    &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;env&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;: &lt;span class="kt"&gt;Exp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;global_env&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Exp&lt;/span&gt;:
    &lt;span class="kt"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;      &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;变量引用&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="nx"&gt;elif&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;List&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;常量&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;
    &lt;span class="nx"&gt;op&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;op&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;quote&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="nx"&gt;elif&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;if&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;            &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;条件表达式&lt;/span&gt;
       &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;conseq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;
       &lt;span class="nx"&gt;exp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;conseq&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;elif&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;define&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;定义变量&lt;/span&gt;
       &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;exp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;
       &lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;elif&lt;/span&gt; &lt;span class="nx"&gt;op&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;set!&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;         &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;变量赋值&lt;/span&gt;
        &lt;span class="nx"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;exp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;
        &lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="nx"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;elif&lt;/span&gt; &lt;span class="nx"&gt;op&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;lambda&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;定义过程&lt;/span&gt;
        &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Procedure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;                        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;过程调用&lt;/span&gt; &lt;span class="nx"&gt;List&lt;/span&gt;
        &lt;span class="nx"&gt;proc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;arg&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;proc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;repl&lt;/h1&gt;
&lt;p&gt;repl 的意思是 Read-Eval-Print-Loop，也就是我们常用的“解释器”。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def repl(prompt=&amp;#39;lis.py&amp;gt; &amp;#39;):
    while True:
        val = eval(parse(input(prompt)))
        if val is not None:
            print(schemestr(val))

def schemestr(exp):
    if isinstance(exp, List):
        return f&amp;#39;({&amp;quot; &amp;quot;.join(map(schemestr, exp))})&amp;#39;)
    else:
        return str(exp)
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sun, 10 Dec 2017 05:44:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-12-10:/posts/lispy-bi-ji.html</guid><category>编程语言</category><category>计算机</category></item><item><title>bug 错题本</title><link>/posts/bug-cuo-ti-ben.html</link><description>&lt;p&gt;发现有一些错误是自己经常犯的，不记录下来回顾一下，总是会一直犯。高中的时候还有习惯来记录错题，然而这么好的习惯，到了大学里却莫名其妙的没有了，知道毕业两年后的今天才突然想起。所以第一个场贩的错误就是思想上的——学习是一件终身的事，要延续好习惯。&lt;/p&gt;
&lt;p&gt;对于各种持有资源的连接池对象等，要时刻注意它们是否是线程安全的。&lt;/p&gt;
&lt;h1&gt;Python&lt;/h1&gt;
&lt;h2&gt;更新变量的value的时候，变量名写错了，导致创建了一个没有用的新变量，老变量的value却没有更新&lt;/h2&gt;
&lt;p&gt;解决：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用pylint 检查代码，会提示 unused variable；&lt;/li&gt;
&lt;li&gt;在写代码的时候多用自动补全，而不要手动打出每一个变量。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Python 的变量声明和赋值没有分开，这个是一个坑，只能通过多用工具检查来实现&lt;/p&gt;
&lt;h1&gt;故障排查&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;有时候删文件删不掉但是空间还在占用是因为还有程序在使用这个文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CPU wait 比较高说明在做io&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;操作系统相关问题（OOM）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;dmesg -T&lt;/code&gt; 或 &lt;code&gt;tail -200 /var/log/kern.log&lt;/code&gt; 查看系统kill进程的日志，可以看到被kill掉时候的内存占用，再用free -m 查看一下是否超出了内存&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Thu, 30 Nov 2017 22:30:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-11-30:/posts/bug-cuo-ti-ben.html</guid><category>想法</category><category>计算机</category></item><item><title>pdb</title><link>/posts/pdb.html</link><description>&lt;p&gt;常用命令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[n]ext 下一步&lt;/li&gt;
&lt;li&gt;[s]tep into 进入函数&lt;/li&gt;
&lt;li&gt;[r]eturn 跳出函数&lt;/li&gt;
&lt;li&gt;[b]reakpoint 打断点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;pdb&lt;/p&gt;
&lt;p&gt;pdb is fine, just don’t have so many features&lt;/p&gt;
&lt;p&gt;Usage: import pdb; pdb.set_trace()&lt;/p&gt;
&lt;p&gt;Ipdb is better&lt;/p&gt;
&lt;p&gt;Usage: import ipdb; ipdb.set_trace()
n   next
p   print
pp  pprint
s   setp into
c   continue to next breakpoint
b   breakpoint
a   args&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 27 Nov 2017 23:47:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-11-27:/posts/pdb.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>暂时没用到的软件清单</title><link>/posts/zan-shi-mei-yong-dao-de-ruan-jian-qing-dan.html</link><description>&lt;p&gt;DNS&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://mp.weixin.qq.com/s?__biz=MzIwMzg1ODcwMw==&amp;amp;mid=2247487141&amp;amp;idx=1&amp;amp;sn=d8e3d8bb867e65d0f09ed38f58949956&amp;amp;chksm=96c9b8c5a1be31d3368334a5c0b7ade1cad89185f4a643d1be2778fe0198f6a48dc593792ae1#rd"&gt;PowerDNS 拥有web管理界面的DNS&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://xiaqunfeng.cc/2017/02/03/Dm-cache-vs-Bcache/"&gt;bcache&lt;/a&gt; &lt;a href="https://blog.lilydjwg.me/2015/5/11/self-made-sshd-with-bcache.92025.html"&gt;另一篇&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://man7.org/linux/man-pages/man7/vdso.7.html"&gt;vdso&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://zhuanlan.zhihu.com/clickhouse"&gt;clickhouse&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/major/MySQLTuner-perl"&gt;Mysql Tunner&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.maptiler.com/"&gt;切割地图 maptiler&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sat, 25 Nov 2017 18:30:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-11-25:/posts/zan-shi-mei-yong-dao-de-ruan-jian-qing-dan.html</guid><category>计算机</category></item><item><title>sklearn 入门笔记</title><link>/posts/sklearn-ru-men-bi-ji.html</link><description>&lt;p&gt;前一阵看了一个叫做 &lt;a href="https://morvanzhou.github.io/tutorials/machine-learning/sklearn/1-1-why/"&gt;莫烦Python&lt;/a&gt; 的教程，还有 &lt;a href="http://scikit-learn.org/stable/tutorial/basic/tutorial.html"&gt;sklearn的官方教程&lt;/a&gt; 初步了解了一下 sklearn 的基本概念，不过教程毕竟有些啰嗦，还是自己记录一下关键要点备忘。&lt;/p&gt;
&lt;h1&gt;机器学习要解决的问题&lt;/h1&gt;
&lt;h2&gt;什么是机器学习？&lt;/h2&gt;
&lt;p&gt;sklearn 给了一个定义&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In general, a learning problem considers a set of n samples of data and then tries to predict properties of unknown data. If each sample is more than a single number and, for instance, a multi-dimensional entry (aka multivariate data), it is said to have several attributes or features.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;翻译过来：&lt;/p&gt;
&lt;p&gt;总的来说，“学习问题”通过研究一组 n 个样本的数据来预测未知数据的属性。比如说，如果每个样本都不止包含一个数字，而是多维的向量，那么就称它为有多个feature属性。&lt;/p&gt;
&lt;h2&gt;问题&lt;/h2&gt;
&lt;p&gt;机器学习的方法不外乎这几类，现在自己用到的应该是分类比较多。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Classification 分类，也就是离散的&lt;/li&gt;
&lt;li&gt;Regression 回归，也就是连续的&lt;/li&gt;
&lt;li&gt;Clustering 聚类&lt;/li&gt;
&lt;li&gt;Dimensionality reduction 数据降维&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;要实现上面几个目标，可能需要下面的步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Model Selection 模型选择&lt;/li&gt;
&lt;li&gt;Preprocessing 数据预处理&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;要去判定自己的任务需要用哪种方法，优先参考 sklearn 官方推出的 &lt;a href="http://scikit-learn.org/stable/tutorial/machine_learning_map/index.html"&gt;cheatsheet&lt;/a&gt;（小抄）&lt;/p&gt;
&lt;p&gt;&lt;img alt="sklearn-leanr cheatsheet" src="http://scikit-learn.org/stable/_static/ml_map.png"&gt;&lt;/p&gt;
&lt;h1&gt;sklearn 的数据库&lt;/h1&gt;
&lt;p&gt;sklearn 为了方便学习自带了一些数据库，可以说是非常方便了。包括了 iris 花瓣数据库，手写数字数据库等。这些例子可以说相当于编程语言的 hello world 或者是图形学届的 utah teapot 了。&lt;/p&gt;
&lt;p&gt;除了真实的数据集，还可以使用&lt;code&gt;datasets.make_*&lt;/code&gt;系列函数来直接生成一些数据集用来测试。&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datasets&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;iris&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datasets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_iris&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;          &lt;span class="c1"&gt;# iris 花瓣数据库&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;digits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datasets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_digits&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;      &lt;span class="c1"&gt;# 手写数字数据库&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                   &lt;span class="c1"&gt;# 数据库的输入&lt;/span&gt;
&lt;span class="p"&gt;[[&lt;/span&gt;  &lt;span class="mf"&gt;0.&lt;/span&gt;   &lt;span class="mf"&gt;0.&lt;/span&gt;   &lt;span class="mf"&gt;5.&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="mf"&gt;0.&lt;/span&gt;   &lt;span class="mf"&gt;0.&lt;/span&gt;   &lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="mf"&gt;0.&lt;/span&gt;   &lt;span class="mf"&gt;0.&lt;/span&gt;   &lt;span class="mf"&gt;0.&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mf"&gt;10.&lt;/span&gt;   &lt;span class="mf"&gt;0.&lt;/span&gt;   &lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="mf"&gt;0.&lt;/span&gt;   &lt;span class="mf"&gt;0.&lt;/span&gt;   &lt;span class="mf"&gt;0.&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mf"&gt;16.&lt;/span&gt;   &lt;span class="mf"&gt;9.&lt;/span&gt;   &lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="mf"&gt;0.&lt;/span&gt;   &lt;span class="mf"&gt;0.&lt;/span&gt;   &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="mf"&gt;6.&lt;/span&gt;   &lt;span class="mf"&gt;0.&lt;/span&gt;   &lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="mf"&gt;0.&lt;/span&gt;   &lt;span class="mf"&gt;0.&lt;/span&gt;   &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mf"&gt;12.&lt;/span&gt;   &lt;span class="mf"&gt;0.&lt;/span&gt;   &lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="mf"&gt;0.&lt;/span&gt;   &lt;span class="mf"&gt;0.&lt;/span&gt;  &lt;span class="mf"&gt;10.&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mf"&gt;12.&lt;/span&gt;   &lt;span class="mf"&gt;1.&lt;/span&gt;   &lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;                        &lt;span class="c1"&gt;# 数据库的输出&lt;/span&gt;
&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中data属性是一个二维数组，格式是&lt;code&gt;(n_samples, n_features)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;关于如何载入外部数据库，可以看这里，实际上我也还没看，科科&lt;/p&gt;
&lt;h1&gt;学习与预测&lt;/h1&gt;
&lt;p&gt;以识别手写数字为例，我们要做的是根据图像识别出数字是什么来。我们需要 &lt;em&gt;fit&lt;/em&gt; （训练）出来一个 estimator，然后用来 &lt;em&gt;predict&lt;/em&gt; （预测）未知数据的类型。在 sklearn 中，一个 &lt;code&gt;estimator&lt;/code&gt; 就是一个实现了 &lt;code&gt;fit&lt;/code&gt; 和 &lt;code&gt;predict&lt;/code&gt; 方法的 object。estimator 常用的属性还有 &lt;code&gt;get_params&lt;/code&gt;, &lt;code&gt;score&lt;/code&gt; 等。&lt;/p&gt;
&lt;p&gt;比如我们使用支持向量机模型：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s s-Atom"&gt;from&lt;/span&gt; &lt;span class="s s-Atom"&gt;sklearn&lt;/span&gt; &lt;span class="s s-Atom"&gt;import&lt;/span&gt; &lt;span class="s s-Atom"&gt;svm&lt;/span&gt;
&lt;span class="s s-Atom"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s s-Atom"&gt;classifier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;svm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;SVC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;gamma&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.001&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;C&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;100.&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="s s-Atom"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s s-Atom"&gt;classifier&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[:-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s s-Atom"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;target&lt;/span&gt;&lt;span class="p"&gt;[:-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;注意第一个参数是数据，第二个参数是结果&lt;/span&gt;
&lt;span class="nv"&gt;SVC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;C&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;100.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;cache_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;class_weight&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;coef0&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s s-Atom"&gt;decision_function_shape=&amp;#39;ovr&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;degree&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;gamma&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.001&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;kernel=&amp;#39;rbf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s s-Atom"&gt;max_iter=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;probability&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;random_state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;shrinking&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s s-Atom"&gt;tol&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.001&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;verbose&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 现在我们开始预测最后一个数据&lt;/span&gt;
&lt;span class="s s-Atom"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s s-Atom"&gt;classifier&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="nf"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;得出的结果是&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;实际上的图像是&lt;/p&gt;
&lt;p&gt;&lt;img alt="last digit" src="http://scikit-learn.org/stable/_images/sphx_glr_plot_digits_last_image_001.png"&gt;&lt;/p&gt;
&lt;p&gt;刚刚的例子是使用前面的数据做训练，然后识别了最后一个数字，其实我们还可以使用 sklearn 自带的 &lt;code&gt;train_test_split&lt;/code&gt; 函数来分割数据&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.model_selection&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;train_test_split&lt;/span&gt;

&lt;span class="n"&gt;X_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;X_test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;train_test_split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;iris_X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;iris_y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;test_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 注意其中训练数据被sklearn打乱了. 在机器学习中, 数据比较乱是比较好的, 算法其实也一样, 数组是乱的最好.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;完整的例子在这里：http://scikit-learn.org/stable/auto_examples/classification/plot_digits_classification.html&lt;/p&gt;
&lt;h2&gt;保存模型&lt;/h2&gt;
&lt;p&gt;训练模型还是很花费时间的，我们不可能每次都去训练一个模型，所以一般都是离线训练好了之后，保存下模型来，然后在线调用。保存模型可是直接使用 Python 内置的 pickle 模块，但是一般模型数据都比较大，pickle 对大文件支持不好，最好采用 sklearn 自带的 joblib.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.externals&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;joblib&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;joblib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;classifier&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;filename.pkl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;clf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;joblib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;filename.pkl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;很简单吧&lt;/p&gt;
&lt;h1&gt;其他的一些技巧&lt;/h1&gt;
&lt;h2&gt;一些约定&lt;/h2&gt;
&lt;p&gt;上面说到 sklearn 约定了 fit 和 predict 方法，还有一些其他的约定&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;所有的输入都会被转化为 float64 类型&lt;/li&gt;
&lt;li&gt;一半习惯用 &lt;code&gt;X&lt;/code&gt; 表示样本数据, &lt;code&gt;y&lt;/code&gt; 表示预测结果&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;可视化&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; X, y = datasets.make_regression(n_samples=100, n_features=1, n_targets=1, noise=10)
&amp;gt;&amp;gt;&amp;gt; plt.scatter(X, y)
&amp;gt;&amp;gt;&amp;gt; plt.show()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;会有下面的图&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://morvanzhou.github.io/static/results/sklearn/2_3_3.png"&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Fri, 24 Nov 2017 19:35:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-11-24:/posts/sklearn-ru-men-bi-ji.html</guid><category>计算机</category><category>机器学习</category></item><item><title>网页与API的常见频次限制与破解</title><link>/posts/wang-ye-yu-apide-chang-jian-pin-ci-xian-zhi-yu-po-jie.html</link><description>&lt;p&gt;上线一个新的页面或者接口的时候都需要考虑被爬取，滥用的情况。这篇文章总结一下常见的限制与反制方法。&lt;/p&gt;
&lt;p&gt;从接口的角度来说，匿名的接口一定是可以滥用的，只是破解成本的问题；而有登录状态的接口一般不容易被滥用。&lt;/p&gt;
&lt;h1&gt;第一个例子，自增ID被滥用&lt;/h1&gt;
&lt;p&gt;什么值得买的评测页面，https://test.smzdm.com/pingce/p/40205/，这个链接的最后一个数字就是评测的问题ID，大小才不过几万，也就是说，我只要遍历一下这个数字，就可以把“什么值得买”这个网站的所有评测都爬取一遍，这个是在太容易被利用了。&lt;/p&gt;
&lt;p&gt;对于这个问题，可以不要直接使用数据库的主键作为页面的ID，而是尽量使用没有规律的数字（比如UUID）或者至少大一点的数字作为ID，避免被穷举遍历。&lt;/p&gt;
&lt;h1&gt;第二个例子，列表页面被滥用&lt;/h1&gt;
&lt;p&gt;链家的二手房页面，https://bj.lianjia.com/ershoufang/101102279987.html，这个页面的ID就比较大了，但是我们没办法去遍历这样一个数字。这时候可以从列表页入手，https://bj.lianjia.com/ershoufang/rs/，只要从页面上找到所有二手房的页面地址就可以了。&lt;/p&gt;
&lt;p&gt;对于这种滥用的情形，&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;只能限制每个用户的访问频次了。&lt;/li&gt;
&lt;li&gt;或者直接屏蔽掉一些非法的请求。比如说User-Agent是curl的先屏蔽掉。但是这些总是可以伪造的，甚至可以直接用一个headless chrome来访问页面，链家网总不能把chrome屏蔽掉吧。。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上两个问题，还有一个共同的特点，用户都是没有登录状态的，都是匿名的。比如说链家网，总不能让每个人登录了才能看房子吧，那估计客户流失会很严重。这时候识别每个用户常用的一些方法主要是通过cookies和IP。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过IP识别用户&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这种方法简单粗暴，直接根据来源IP来判定是否是同一个用户，如果访问过快，屏蔽请求或者需要输入验证码。但是有一个问题，好多学校或者公司都是使用为数不多的几个IP地址来作为出口IP，方便管理，如果这种地方有一两个人在恶意请求，那么可能屏蔽会造成很多人访问异常。&lt;/p&gt;
&lt;p&gt;对于这种限制来说，可以放慢请求速度，或者使用多个代理IP来伪装自己。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过Cookies来识别用户&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上面说过直接通过 IP 来识别用户的话比较暴力，可能误伤，另一种方法就是通过 Cookie 来标示用户，如果有一个用户访问过多的话，就对这个Cookie做限制。&lt;/p&gt;
&lt;p&gt;对于这种限制来说，可以直接每次请求不带 Cookie，或者预先多申请一些 Cookie，然后负载均衡一下。&lt;/p&gt;
&lt;p&gt;对于传统的静态页面的限制和破解基本上就是这些方法。不过现在很多页面都是操作丰富的动态页面，也就是我们感兴趣的消息可能是通过ajax加载的，我们只需要访问这个api就可以了。另外现在不少的产品都是直接提供应用，根本没有网页版了。所以接下来简单谈下API的攻防。&lt;/p&gt;
&lt;h1&gt;API 的攻防&lt;/h1&gt;
&lt;p&gt;有一些 API 没有任何防护，对于这种 API 直接刷就好了，不过可能有的 API 会有根据 IP 的频次限制。&lt;/p&gt;
&lt;p&gt;有一些 API 访问必须通过Token，如果含有这个 token 并且合法，就认为访问是合法的。一般来说在使用了 token 验证访问合法性的时候，服务端就不会再对 IP 等做限制了。&lt;/p&gt;
&lt;p&gt;Token 的计算过程往往有三个因素需要参与，分别是 key、secret 和签名算法。比如说下面的 API:&lt;/p&gt;
&lt;p&gt;GET api.example.com/v1/search?q=XXX&amp;amp;type=XXX&amp;amp;limit=5&amp;amp;timestamp=1501230129&amp;amp;app_key=424242token=XXX&lt;/p&gt;
&lt;p&gt;其中 app_key 等于 424242，表示请求方的唯一ID，secret是服务器授予请求方的密码，比如123456。而&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;secret = md5(sorted([&amp;quot;k=v&amp;quot; for k, v in params] + [&amp;quot;secret=123456&amp;quot;]).join(&amp;quot;&amp;quot;) + )
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;也就是把所有参数都排序之后，拼接成字符串然后再计算某个hash值，作为token附在参数后面。&lt;/p&gt;
&lt;p&gt;一般来说常用的签名算法都是这样实现的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;参数中加上时间戳，同时附在请求上，这样服务器可以只接受当前时间附近的真实请求，从而避免某个请求被保存下来，用作重放攻击。&lt;/li&gt;
&lt;li&gt;添加参数secret＝123456到需要计算的参数中，但是secret并不会出现在请求中。&lt;/li&gt;
&lt;li&gt;把所有需要加密的参数都按照字典排序，然后拼接成字符串，这样是为了计算出来的值唯一。&lt;/li&gt;
&lt;li&gt;计算出的token也附在请求上，一起发给服务器。&lt;/li&gt;
&lt;li&gt;服务器根据app_key，取出对应的app_secret，用同样的方法计算token，验证合法性。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;app_key 的分配和含义&lt;/h2&gt;
&lt;p&gt;一般有两种理解，一种是把 app_key 作为某种类型客户端的标示，比如安卓客户端使用一个appkey，iOS客户端使用一个appkey。另一种是每个用户使用一个appkey，把appkey作为用户的标示。&lt;/p&gt;
&lt;p&gt;对于网页中通过 ajax 请求 API 来说，因为 js 实际上相当于是源码公开的，所以隐藏secret和算法实际上是不现实的。这时候可以有两种做法，一种是把secret和加密算法等放到Flash里面去，flash是可以编译成二进制的，所以相对来说更安全一些，不过随着flash的死亡，这种做法应该是逐渐淘汰了。另一种做法是secret动态获取，控制secret的来提高破解难度，同时把加密算法做一些混淆。&lt;/p&gt;
&lt;p&gt;对于应用中来说，简单一点的做法可直接把secret和算法都直接放到代码里面，但是一般来说因为通用的加密方法大家套路基本也都那么几样，通过反编译之后加上一些基于经验的猜测很容易才出来。所以进一步可以把加密算法写到native层，编译成so文件，这样就大大提高了反编译的难度，基本可以认为是安全的。&lt;/p&gt;
&lt;p&gt;更严厉一点的话，可以限制只有登录用户可以访问某些敏感接口，这样就完全由服务端来控制接口的访问量了，只需要注意用户注册的接口不要被滥用即可。&lt;/p&gt;
&lt;h1&gt;一个例子&lt;/h1&gt;
&lt;p&gt;比如淘宝H5站的接口&lt;/p&gt;
&lt;p&gt;当请求不带任何cookie时，会返回一个_m_h5_tk 和 _m_h5_tk_enc，通过下面的算法算出sign值再次请求&lt;/p&gt;
&lt;p&gt;sign算法：&lt;em&gt;m_h5_tk值的'&lt;/em&gt;'前部分+时间戳+appkey+data  中间用&amp;amp;分隔，如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo -n &amp;#39;ddc882e0e69bb8babbfdecc479439252&amp;amp;1450260485494&amp;amp;12574478&amp;amp;{&amp;quot;platform&amp;quot;:&amp;quot;8&amp;quot;,&amp;quot;asac&amp;quot;:&amp;quot;D679AU6J95PHQT67G0B5&amp;quot;,&amp;quot;days&amp;quot;:50,&amp;quot;cinemaid&amp;quot;:&amp;quot;24053&amp;quot;,&amp;quot;showid&amp;quot;:141207}&amp;#39;|md5sum|cut -d &amp;#39; &amp;#39; -f1
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Fri, 17 Nov 2017 20:28:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-11-17:/posts/wang-ye-yu-apide-chang-jian-pin-ci-xian-zhi-yu-po-jie.html</guid><category>计算机</category><category>爬虫</category></item><item><title>如何评价红黄蓝事件？</title><link>/posts/ru-he-ping-jie-hong-huang-lan-shi-jian.html</link><description>&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;作者：夏木
链接：https://www.zhihu.com/question/68546899/answer/264622524
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;红黄蓝粉碎了我阶层跃迁的梦，即便年薪百万，也保护不了在意的人。
不久之前，上海的携程幼儿园爆出虐童丑闻，因为孩子不好管，就喂孩子吃芥末、安眠药，对孩子拳打脚踢，我很愤怒，但我并不绝望。
因为我想，我才二十多岁，只要我够努力，我就能让我的孩子上一个好点的私立幼儿园，那个幼儿园会请特别好的老师，带着我的孩子做游戏，给他讲道理。
可是这次红黄蓝幼儿园真的彻彻底底粉碎了我的白日梦。
不是说我不能完成阶层跃迁，不能从一个农村的穷小子变成一个中产，不是说我供不起孩子上每个月5000的幼儿园，而是就算我有钱了，那我也保护不了我爱的人。
而且他们不仅会对我的孩子拳打脚踢，还会把他们送到一群狼的嘴里。
注射药剂、喂不明白色药丸、针扎、裸体罚站、拳打脚踢……
对不起，我真的害怕了。&lt;/p&gt;
&lt;p&gt;作为一个男生，我不用经历怀胎十月，也不用体验分娩的剧痛。
我只需要多多赚钱，给孩子买最好的奶粉，这样，他就不会被毒奶粉弄成大头娃娃；
我买最好的家具，给他弄一个没有污染的房间，不让他接触甲醛；
我把他能触碰到的地方全都铺上软垫，不让他磕碰撞到；
我给他请最好的最有良心的保姆，每天照顾好她的心情，不让孩子被纵火烧死；
我把他送进最好的幼儿园，为了让老师好好对他，我不仅每个月交5000块，还“无偿捐赠”给幼儿园几十万；
每次放学的时候，我都提前半小时，自己去接孩子，这样他就不会被人贩子拐走了；
路上我都开车，遵守交通规则，安两个行车记录仪，这样即便被碰瓷，也能尽快解决，不给孩子留下坏的印象；
我请健身教练、武术教练、跆拳道教练，教孩子健身、武术、跆拳道，这样学校里有人欺负他的时候，他就能够反击了……
你看，这一路上，我避开了毒奶粉、污染、碰撞，躲开了纵火的保姆、黑心的幼教、人贩子，赶走了碰瓷的老人、校园的霸凌，我就像玩一个大型的游戏一样，小心翼翼，步步为营，哪怕一步走错，就全盘皆输。
我害怕了，我真的害怕了，我怕我走不对，我怕那些我信任的奶粉、保姆、老师会像饿狼一样，我稍不注意，他们就对我的孩子露出獠牙。&lt;/p&gt;
&lt;p&gt;我以为，只要我能够从一个穷小子变成中产，我就能保护好我的爱人，保护好我可能会有的孩子。
可是这次红黄蓝幼儿园的家长，正是我朝思暮想心心念念想要成为的中产。
多么讽刺啊。
毫无疑问，我是爱国的，毫无疑问，我也是能够看到国家不足并且想要努力改变那些的。但是每天都会看到一些负面新闻，我觉得我活在一个很矛盾的世界上。
我知道哪里都有好人和坏人，可是当他们出现的时候，我要怎么保护自己，保护自己在乎的人呢？
美国有枪，有毒品，我害怕，我不想去。
欧洲有难民，有绿色，我害怕，我不想去。
可是在国内，我就能安全地活下来吗？我会不会在火灾中被迫让领导先走？我会不会在医院被医闹打得头破血流？我会不会被碰瓷的碰到倾家荡产？
我一直在告诉自己，会好的会好的，人渣到处都有，只要过几年就会好。
可是一个私立幼儿园啊，中国中上阶层才能供得起，我这一辈子可能也就只能完成从一穷二白到中层的跨越，可是我这样的跨越又有什么用呢？最稚嫩最该保护的人被最残忍最肆无忌惮地对待，我又该怎么保护在意的人不受那样的虐待呢？&lt;/p&gt;
&lt;p&gt;我可以想象到十年之后的我的样子。
为了钱，为了尊严，我心甘情愿地过上了996的生活。我把自己的开销压到最低，贷款买一套学区房，跟爱人省吃俭用把孩子送去了一家连锁的上市的幼儿园。
我以为，这样的我，是有尊严的。
可是我没想到，我有的，只是自己的白日梦。
事情出现了，媒体们都在避重就轻，说什么幼教虐童，可事实上更严重的，是对幼儿的集体猥亵，集体强奸。
我也不知道为什么事情被爆出来了之后，知乎禁止提问，微博删除热搜，人民日报的评论也一度消失不见。
我更不知道为什么好多次采访里，施虐者的脸上都是马赛克，而被害人就是一张全脸，我们保护的究竟是谁呢？是被害人的隐私更重要，还是施虐者的隐私更重要？
国家强大了，我知道。这二十几年我深切体会到了国家的强大和富裕，从土坯房住到砖瓦房再住到楼房，我是中国发展的红利的享受者。可是这种时候，我就可以不要尊严、不要未来了吗？
看着那些被迫离开北京的人，看着那些徘徊在幼儿园门口的家长，我好像看到了未来。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Fri, 17 Nov 2017 04:45:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-11-17:/posts/ru-he-ping-jie-hong-huang-lan-shi-jian.html</guid><category>未分类</category></item><item><title>安卓开发中的Context</title><link>/posts/an-zhuo-kai-fa-zhong-de-context.html</link><description>&lt;p&gt;在安卓当中，Context几乎是无处不在的，每一个Activity是一个Context，每一个Service也是一个Context。&lt;/p&gt;
&lt;p&gt;但是如果你新起了一个线程的话，你需要显式地把Context传递进去。&lt;/p&gt;
&lt;p&gt;比如下面的例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class DumpLocationLog extends Thread {
    LocationManager lm;
    LocationHelper loc;
    public DumpLocationLog(Context context) {
        loc = new LocationHelper();
        lm = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);
    }
    public void run() {
        lm.requestLocationUpdates(LocationManager.GPS_PROVIDER, 1000L, 500.0f, loc);
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后使用这个线程的时候，把this，也就是一个context的实例传递进去&lt;/p&gt;
&lt;p&gt;&lt;code&gt;new DumpLocationLog(this);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;if you are in a fragment, use getAcitvity()&lt;/p&gt;
&lt;p&gt;if you are in an anoynmous onclicklistener, &lt;code&gt;this&lt;/code&gt; is MainActivity.this&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 15 Nov 2017 05:29:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-11-15:/posts/an-zhuo-kai-fa-zhong-de-context.html</guid><category>大前端</category><category>Android</category><category>计算机</category></item><item><title>为安卓编译64位的dropbear</title><link>/posts/wei-an-zhuo-bian-yi-64wei-de-dropbear.html</link><description>&lt;h2&gt;如何使用dropbear&lt;/h2&gt;
&lt;p&gt;这里主要是需要在安卓上生成 host key，以及把自己的公钥传到安卓上&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dropbearkey -t rsa -f /data/local/dropbear_host_key # 在安卓上生成key
adb push ~/.ssh/id_rsa.pub /data/local/authorized_keys # 在宿主机把自己的密钥传过去
dropbear -F -E -r /data/local/dropbear_host_key -A -N root -C jk -R /data/local/authorized_keys # 按照给定的key启动dropbear
dropbear -P /data/local/dropbear.pid -r /data/local/dropbear_host_key -A -N root -C jk -R /data/local/authorized_keys # 以daemon形式启动dropbear
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;如何为64位的安卓机器编译 dropbear&lt;/h2&gt;
&lt;p&gt;需要更改如下代码（svr-chansession.c）:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;addnewvar(&amp;quot;LD_LIBRARY_PATH&amp;quot;, &amp;quot;/system/lib&amp;quot;);

to:

addnewvar(&amp;quot;LD_LIBRARY_PATH&amp;quot;, &amp;quot;/system/lib64&amp;quot;);
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;使用AIL把dropbear添加为服务&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;service sshd /system/xbin/dropbear -s
   user  root
   group root
   oneshot
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;试过了，但是没有成功&lt;/p&gt;
&lt;h2&gt;如何重启adb(wifi)&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;setprop service.adb.tcp.port 5555
stop adbd
start adbd
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;关闭 ssh key 验证&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Host *
    StrictHostKeyChecking no
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;mount -o remount,rw /system&lt;/p&gt;
&lt;p&gt;参考&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;http://forum.xda-developers.com/nexus-7-2013/general/guide-compiling-dropbear-2016-73-t3351671&lt;/li&gt;
&lt;li&gt;http://forum.xda-developers.com/nexus-7-2013/general/guide-compiling-dropbear-2015-67-t3142412/page3&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 15 Nov 2017 05:13:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-11-15:/posts/wei-an-zhuo-bian-yi-64wei-de-dropbear.html</guid><category>大前端</category><category>Android</category><category>计算机</category></item><item><title>安卓反编译的一些笔记</title><link>/posts/an-zhuo-fan-bian-yi-de-yi-xie-bi-ji.html</link><description>&lt;h1&gt;工具&lt;/h1&gt;
&lt;p&gt;apk studio&lt;/p&gt;
&lt;p&gt;如何 sign：https://www.nevermoe.com/?p=373&lt;/p&gt;
&lt;p&gt;smali code tutorial： https://forum.xda-developers.com/showthread.php?t=2193735&lt;/p&gt;
&lt;p&gt;一篇很好的pdf的文档，利用smali code：http://www.security-assessment.com/files/documents/whitepapers/Bypassing%20SSL%20Pinning%20on%20Android%20via%20Reverse%20Engineering.pdf&lt;/p&gt;
&lt;h1&gt;安卓中 pinning 的原理&lt;/h1&gt;
&lt;p&gt;使用自己的keystore实例化 TrustManagerFactory&lt;/p&gt;
&lt;p&gt;关键语句&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;InputStream in = resources.openRawResource(certificateRawResource);//file name of res/raw keyStore = KeyStore.getInstance(&amp;quot;BKS&amp;quot;); keyStore.load(resourceStream, password);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;http://fdwills.github.io/diary/2014/06/13/ssl-pinning.html&lt;/p&gt;
&lt;p&gt;一些现成的工具&lt;/p&gt;
&lt;p&gt;https://github.com/ac-pm/SSLUnpinning_Xposed  xposed 插件，已测试不好用
https://github.com/iSECPartners/Android-SSL-TrustKiller 需要cydia&lt;/p&gt;
&lt;p&gt;豌豆荚商店中有一个 xposed installer miui专版，使用这个可以很好地安装 xposed&lt;/p&gt;
&lt;p&gt;之后安装&lt;/p&gt;
&lt;p&gt;另一种思路，找到bks文件，替换掉，重新打包，签名&lt;/p&gt;
&lt;p&gt;https://stackoverflow.com/questions/30708548/how-to-modify-the-data-in-the-assets-folder-in-existing-apk-programmatically&lt;/p&gt;
&lt;p&gt;另外一些工具&lt;/p&gt;
&lt;p&gt;https://github.com/ac-pm/Inspeckage&lt;/p&gt;
&lt;p&gt;https://github.com/iSECPartners/Android-SSL-TrustKiller  需要cydia&lt;/p&gt;
&lt;p&gt;https://github.com/iSECPartners/android-ssl-bypass 一个基础工具，通过替换trust manager实现&lt;/p&gt;
&lt;h1&gt;arm 汇编教程&lt;/h1&gt;
&lt;p&gt;https://mp.weixin.qq.com/s/DKeXqzE6bj5t0eWTkLLCBQ&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 15 Nov 2017 05:09:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-11-15:/posts/an-zhuo-fan-bian-yi-de-yi-xie-bi-ji.html</guid><category>大前端</category><category>Android</category><category>计算机</category></item><item><title>安卓的 AsyncTask</title><link>/posts/an-zhuo-de-asynctask.html</link><description>&lt;p&gt;asynchronusally run task without explicitly creating thread.&lt;/p&gt;
&lt;h1&gt;Usage&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;doInBackground(Params...)
onProgressUpdate(Progress...)
onPostExecute(Result)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here is an example of subclassing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; private class DownloadFilesTask extends AsyncTask&amp;lt;URL, Integer, Long&amp;gt; {
     protected Long doInBackground(URL... urls) {
         int count = urls.length;
         long totalSize = 0;
         for (int i = 0; i &amp;lt; count; i++) {
             totalSize += Downloader.downloadFile(urls[i]);
             publishProgress((int) ((i / (float) count) * 100));
             // Escape early if cancel() is called
             if (isCancelled()) break;
         }
         return totalSize;
     }

     protected void onProgressUpdate(Integer... progress) {
         setProgressPercent(progress[0]);
     }

     protected void onPostExecute(Long result) {
         showDialog(&amp;quot;Downloaded &amp;quot; + result + &amp;quot; bytes&amp;quot;);
     }
 }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once created, a task is executed very simply: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;new DownloadFilesTask().execute(url1, url2, url3);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;template parameters can be &lt;code&gt;Void, Void, Void&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;see https://developer.android.com/reference/android/os/AsyncTask.html&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 15 Nov 2017 05:05:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-11-15:/posts/an-zhuo-de-asynctask.html</guid><category>大前端</category><category>Android</category><category>计算机</category></item><item><title>Linux 内存与进程管理（ps/top/kill...）</title><link>/posts/linux-nei-cun-yu-jin-cheng-guan-li-pstopkill.html</link><description>&lt;h1&gt;ps 命令&lt;/h1&gt;
&lt;p&gt;比较有用的选项有&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-e 显示所有的进程
-f 显示 uid, pid, ppid, cpu, starttime, tty, cpu usage, command
-j 显示 user, pid, ppid, pgid, sess, jobc, state, tt, time, command。个人更喜欢 -j 一点
-l 显示 uid, pid, ppid, flags, cpu, pri, nice, vsz=SZ, rss, wchan, state=S, paddr=ADDR, tty, time, and command=CMD.
-v 显示 pid, state, time, sl, re, pagein, vsz, rss, lim, tsiz, %cpu, %mem, and command

-L 显示能够排序的关键字（mac）
L 显示能排序的关键字（Linux）
-o/-O 指定显示的列，-o 只显示指定的列，-O有默认的几列，等价于：-o pid,format,state,tname,time,command

-S 把所有已经退出的进程的时间计算到父进程上（mac）
S 把所有已经退出的进程的时间计算到父进程上（Linux）
-u 按照 uid/username 过滤
-p/--pid 限制 pid
-g/--gid 限制 gid
-C 按照命令过滤
--ppid 按照 ppid 过滤
--ssid 按照 ssid 过滤
--tid 按照 tty 过滤

-E 显示环境变量
-H/--forest 按照进程树显示

--sort 按照某一列排序

-ww 不要限制显示的输出宽度
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;例子&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;使用ps显示占用内存最多的进程&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% ps -eo pid,ppid,cmd,%mem,%cpu --sort=-%mem | head&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;显示所有进程树&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% ps -ejH&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;其他相关命令&lt;/h2&gt;
&lt;p&gt;pstree 查看进程树&lt;/p&gt;
&lt;p&gt;pgrep process_name 按照名字查找进程 pid&lt;/p&gt;
&lt;h1&gt;top 命令&lt;/h1&gt;
&lt;p&gt;定时刷新系统的进程状态的监控程序。mac 上的默认排序是pid，Linux 上是 %CPU。mac 上的 top 程序和 Linux 上非常不一样。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;top 教程：https://linoxide.com/linux-command/linux-top-command-examples-screenshots/&lt;/li&gt;
&lt;li&gt;htop 教程：http://www.cnblogs.com/lizhenghn/p/3728610.html&lt;/li&gt;
&lt;li&gt;atop 教程：http://www.cnblogs.com/bangerlee/archive/2011/12/23/2294090.html&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;atop&lt;/h2&gt;
&lt;p&gt;atop 用来分析机器在历史上的负载情况。通过 crontab 固定时间采样，组合起来形成一个 atop 日志文件，可以使用 atop -r XXX 对日志文件查看。&lt;/p&gt;
&lt;p&gt;atop 每天以一个 &lt;code&gt;/var/log/atop/atop_YYYYMMDD&lt;/code&gt; 的形式生成一个日志文件。&lt;/p&gt;
&lt;p&gt;常用命令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;b mm:ss 到指定时间&lt;/li&gt;
&lt;li&gt;t 查看后十秒&lt;/li&gt;
&lt;li&gt;T 查看前十秒&lt;/li&gt;
&lt;li&gt;m 按照内存排序&lt;/li&gt;
&lt;li&gt;C 按照CPU排序&lt;/li&gt;
&lt;li&gt;c 查看详细命令&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;kill 命令系列&lt;/h1&gt;
&lt;p&gt;kill -s SIGNAL pid&lt;/p&gt;
&lt;p&gt;或者 pkill xxx，不要使用 killall ，&lt;a href="https://unix.stackexchange.com/questions/91527/whats-the-difference-between-pkill-and-killall"&gt;use pkill over killall&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;调整 nice 值&lt;/h1&gt;
&lt;p&gt;使用 nice 和 renice。nice 的范围是 -20 ~ 19，nice值越低，优先级越高。&lt;/p&gt;
&lt;p&gt;nice -n 10 COMMAND  # 以 10 为初始nice值启动命令
renice 10 -p pid&lt;/p&gt;
&lt;h1&gt;jobs 命令相关&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;jobs&lt;/code&gt; list all jobs&lt;/p&gt;
&lt;p&gt;&lt;code&gt;command &amp;amp;&lt;/code&gt;  put job in the background&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fg N&lt;/code&gt; to put it in the foreground&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bg N&lt;/code&gt; to put it in the background&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl-z&lt;/code&gt; to put a job to sleep&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kill %n&lt;/code&gt; to kill job number n&lt;/p&gt;
&lt;h1&gt;lsof&lt;/h1&gt;
&lt;p&gt;lsof -i:port  列出指定端口对应的进程&lt;/p&gt;
&lt;p&gt;lsof -u username 指定用户&lt;/p&gt;
&lt;p&gt;lsof -c process_name 指定进程名&lt;/p&gt;
&lt;p&gt;lsof -p pid 指定pid&lt;/p&gt;
&lt;p&gt;使用dmesg 查看当前的内核日志，debian上可以查看 /var/log/kern.log /var/log/dmesg.0&lt;/p&gt;
&lt;p&gt;RSS is Resident Set Size (physically resident memory - this is currently occupying space in the machine's physical memory), and VSZ is Virtual Memory Size (address space allocated - this has addresses allocated in the process's memory map, but there isn't necessarily any actual memory behind it all right now).[1]&lt;/p&gt;
&lt;p&gt;[1] https://stackoverflow.com/questions/7880784/what-is-rss-and-vsz-in-linux-memory-management&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 15 Nov 2017 04:55:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-11-15:/posts/linux-nei-cun-yu-jin-cheng-guan-li-pstopkill.html</guid><category>后端</category><category>计算机</category></item><item><title>分布式系统中的锁</title><link>/posts/fen-bu-shi-xi-tong-zhong-de-suo.html</link><description>&lt;p&gt;分布式系统需要使用分布锁。首先我们来回忆一下在单机情况下的锁。&lt;/p&gt;
&lt;p&gt;当我们的程序在需要访问临界区的时候，我们可以加一个锁，如果是多线程程序，可以使用线程锁，如果是多进程程序，可以使用进程级别的锁。但是在分布式的环境中，如果在不同主机上部署的程序要访问同一个临界区是该怎么做呢？这时候我们需要分布式的锁。&lt;/p&gt;
&lt;p&gt;当部署的服务或者脚本不在同一台机器上时,使用分布式的锁，可以使用zookeeper或者redis实现一个分布式锁。这里主要介绍一下基于redis的分布式锁。&lt;/p&gt;
&lt;p&gt;redis 官方给出的单机redis分布式锁:&lt;/p&gt;
&lt;p&gt;加锁&lt;/p&gt;
&lt;p&gt;NX 命令指定了只有在不存在的时候才会创建，如果已经存在，则会返回失败。EX指定了过期时间，避免进程挂掉后死锁。值设定为了一个随机数，这样只有加锁的进程才知道锁的值是多少&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SET resource-name my_random_string NX EX max-lock-time
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;解锁&lt;/p&gt;
&lt;p&gt;因为解锁时会检查是否提供了随机数的值，所以只有创建锁的进程才能够解锁。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if redis.call(&amp;quot;get&amp;quot;,KEYS[1]) == ARGV[1] then
    return redis.call(&amp;quot;del&amp;quot;,KEYS[1])
else
    return 0
end
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;EVAL &amp;#39;script...&amp;#39; 1 resource-name my_random_string
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考:&lt;/p&gt;
&lt;p&gt;[1] https://redis.io/topics/distlock&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 15 Nov 2017 04:42:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-11-15:/posts/fen-bu-shi-xi-tong-zhong-de-suo.html</guid><category>架构</category><category>后端</category><category>计算机</category></item><item><title>html 的一些小知识和陷阱</title><link>/posts/html-de-yi-xie-xiao-zhi-shi-he-xian-jing.html</link><description>&lt;h1&gt;如何自定义favicon&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;link rel="shortcut icon" type="image/png" href="/favicon.png"/&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;html中的空格&lt;/h1&gt;
&lt;p&gt;multiple spaces in html is displayed as one, to show multiple space&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;use &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; around the word&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;&amp;amp;nbsp;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 14 Nov 2017 05:53:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-11-14:/posts/html-de-yi-xie-xiao-zhi-shi-he-xian-jing.html</guid><category>大前端</category><category>计算机</category></item><item><title>解决小内存机器 MySQL 总是 OOM 的问题</title><link>/posts/jie-jue-xiao-nei-cun-ji-qi-mysql-zong-shi-oom-de-wen-ti.html</link><description>&lt;p&gt;有一台512M内存的小机器总是报数据库错误, 查看了下日志是OOM了&lt;/p&gt;
&lt;p&gt;解决方案:&lt;/p&gt;
&lt;p&gt;一 Add swap file to cloud instance&lt;/p&gt;
&lt;p&gt;http://www.prowebdev.us/2012/05/amazon-ec2-linux-micro-swap-space.html&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Run dd if=/dev/zero of=/swapfile bs=1M count=1024&lt;/li&gt;
&lt;li&gt;Run mkswap /swapfile&lt;/li&gt;
&lt;li&gt;Run swapon /swapfile&lt;/li&gt;
&lt;li&gt;Add this line /swapfile swap swap defaults 0 0 to /etc/fstab  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Some useful command related to SWAP space:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ swapon -s   
$ free -k
$ swapoff -a
$ swapon  -a
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;二 limit mysql buffersize&lt;/p&gt;
&lt;p&gt;innodb_buffer_pool_size = 8M&lt;/p&gt;
&lt;p&gt;三 limit apache memory cosumption，editing /etc/apache2/mods-enabled/mpm_prefork.conf&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;IfModule&lt;/span&gt; &lt;span class="err"&gt;mpm_prefork_module&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    StartServers        3
    MinSpareServers     3
    MaxSpareServers     5
    MaxRequestWorkers   25
    MaxConnectionsPerChild  0
&lt;span class="nt"&gt;&amp;lt;/IfModule&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 13 Nov 2017 21:54:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-11-13:/posts/jie-jue-xiao-nei-cun-ji-qi-mysql-zong-shi-oom-de-wen-ti.html</guid><category>数据库</category><category>计算机</category></item><item><title>mysql 基础知识(4) - 用户和权限</title><link>/posts/mysql-ji-chu-zhi-shi-4-yong-hu-he-quan-xian.html</link><description>&lt;h2&gt;创建用户&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CREATE USER &amp;#39;newuser&amp;#39;@&amp;#39;%&amp;#39; IDENTIFIED BY &amp;#39;password&amp;#39;;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;授权&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;GRANT ALL PRIVILEGES ON *.* TO &amp;#39;newuser&amp;#39;@&amp;#39;%&amp;#39;;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中的 &lt;code&gt;%&lt;/code&gt; 代表这个用户可以在任意主机登录.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SHOW GRANTS FOR newuser
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;用来显示一个用户的当前授权&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;set password for USERNAME = password(&amp;#39;xxx&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更改用户密码&lt;/p&gt;
&lt;h2&gt;重置密码&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo mysqld_safe --skip-grant-tables --skip-networking &amp;amp;
 
use mysql;
update user set authentication_string=PASSWORD(&amp;quot;&amp;quot;) where User=&amp;#39;root&amp;#39;;
update user set plugin=&amp;quot;mysql_native_password&amp;quot;; # THIS LINE
flush privileges;
quit;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;其他问题&lt;/h2&gt;
&lt;p&gt;EXPLAIN, slow-log&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 13 Nov 2017 14:32:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-11-13:/posts/mysql-ji-chu-zhi-shi-4-yong-hu-he-quan-xian.html</guid><category>数据库</category><category>计算机</category></item><item><title>django templates</title><link>/posts/django-templates.html</link><description>&lt;h1&gt;marco&lt;/h1&gt;
&lt;p&gt;there is no marco in django template, you just have to use include with parameters&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% include &amp;quot;marco.html&amp;quot; with arg=parameter %}
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;variable&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;my_dict.key&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;my_object.attribute&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;my_list.0&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If a variable resolves to a callable, the template system will call it with no arguments and use its result instead of the callable.&lt;/p&gt;
&lt;h1&gt;tags&lt;/h1&gt;
&lt;h1&gt;filters&lt;/h1&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 13 Nov 2017 11:34:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-11-13:/posts/django-templates.html</guid><category>Django</category><category>后端</category><category>计算机</category></item><item><title>mysql 基础知识(2) - 插入删除修改</title><link>/posts/mysql-ji-chu-zhi-shi-2-cha-ru-shan-chu-xiu-gai.html</link><description>&lt;p&gt;我们还是使用上篇文章定义的例子来说明问题&lt;/p&gt;
&lt;h1&gt;插入数据&lt;/h1&gt;
&lt;p&gt;使用 &lt;code&gt;INSERT&lt;/code&gt; 语句.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;insert into students(**field_names) values(**VALUES), values(**VALUES);
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;批量插入&lt;/h2&gt;
&lt;p&gt;如果一次要插入所有数据的话, 可以直接省略前面的字段名. MySQL 可以一次插入多行数据或者一行数据, 但是这并不是SQL标准规定的. 使用批量插入可以大幅度提高性能。&lt;/p&gt;
&lt;p&gt;在批量插入的语句中，如果有一行是错的，那么就会导致整个插入失败，可以使用 insert ignore 语句。&lt;/p&gt;
&lt;p&gt;如果要在批量插入不同的表，可以一次执行多个语句，而不是只执行一个。&lt;/p&gt;
&lt;h1&gt;insert or update&lt;/h1&gt;
&lt;p&gt;如果要实现 insert or update 的功能，可以使用 insert on duplicate update 语句。&lt;/p&gt;
&lt;h1&gt;更新数据&lt;/h1&gt;
&lt;p&gt;使用 &lt;code&gt;UPDATE&lt;/code&gt; 语句.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;update students set math_score = 100 where first_name = &amp;#39;luke&amp;#39;;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;删除数据&lt;/h1&gt;
&lt;p&gt;使用 &lt;code&gt;DELETE&lt;/code&gt; 语句.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;delete from students where name = &amp;#39;luke&amp;#39;;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;参考&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;http://www.mysqltutorial.org/mysql-insert-ignore/&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sun, 12 Nov 2017 15:30:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-11-12:/posts/mysql-ji-chu-zhi-shi-2-cha-ru-shan-chu-xiu-gai.html</guid><category>数据库</category><category>计算机</category></item><item><title>C++ 字面量</title><link>/posts/c-zi-mian-liang.html</link><description>&lt;h1&gt;C++中的字典字面量&lt;/h1&gt;
&lt;p&gt;You can actually do this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;std::map&amp;lt;std::string, int&amp;gt; mymap = &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;one&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;},&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;two&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;},&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;three&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What is actually happening here is that std::map stores an std::pair of the key value types, in this case std::pair&lt;const std::string,int&gt;. This is only possible because of c++11's new uniform initialization syntax which in this case calls a constructor overload of std::pair&lt;const std::string,int&gt;. In this case std::map has a constructor with an std::intializer_list which is responsible for the outside braces.&lt;/p&gt;
&lt;p&gt;So unlike python's any class you create can use this syntax to initialize itself as long as you create a constructor that takes an initializer list (or uniform initialization syntax is applicable)&lt;/p&gt;
&lt;p&gt;https://stackoverflow.com/a/20230177/1061155&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sun, 12 Nov 2017 02:20:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-11-12:/posts/c-zi-mian-liang.html</guid><category>C 语言</category><category>编程语言</category><category>计算机</category></item><item><title>Python 中不爽的地方</title><link>/posts/python-zhong-bu-shuang-de-di-fang.html</link><description>&lt;h1&gt;GIL&lt;/h1&gt;
&lt;p&gt;之前用多线程都是做一些IO密集的内容, 比如爬网页的时候开一个ThreadPool, 处理速度立马就翻了几倍. 所以一直没把GIL放在心上, 前几天要跑一些处理敏感词的数据, 大概要对几百万篇文章做正则匹配. 想都没想就用了多线程, 吃饭回来发现并没有跑完, 这才想起来正则匹配这种东西是CPU密集的, 用Python的线程并没有任何卵用. 这时候换成multiprocessing.Pool速度又飚起来了, 然而使用进程池终究还是不如线程池方便, 所有传入的函数必须是marshallable, 有时候还是不能直接替换的.&lt;/p&gt;
&lt;h1&gt;函数式编程&lt;/h1&gt;
&lt;p&gt;没有真正的闭包, 必须使用nonlocal关键词才能实现一些闭包的功能&lt;/p&gt;
&lt;p&gt;也没有真正的lambda表达式, 自带的lambda表达式局限非常大&lt;/p&gt;
&lt;h1&gt;其他&lt;/h1&gt;
&lt;p&gt;bytes的格式化输出竟然是 b'xxx'&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sat, 11 Nov 2017 11:16:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-11-11:/posts/python-zhong-bu-shuang-de-di-fang.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>RocksDB 基础操作教程</title><link>/posts/rocksdb-ji-chu-cao-zuo-jiao-cheng.html</link><description>&lt;h2&gt;打开一个数据库&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;cassert&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
  &lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;quot;rocksdb/db.h&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

  &lt;span class="n"&gt;rocksdb&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;rocksdb&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Options&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_if_missing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error_if_exists&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;rocksdb&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Status&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rocksdb&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/tmp/testdb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过options制定一些属性, 然后用 &lt;code&gt;rocksdb::DB::Open&lt;/code&gt;打开. RocksDB 会把使用的配置保存在 &lt;code&gt;OPTIONS-xxxx&lt;/code&gt; 文件中.&lt;/p&gt;
&lt;p&gt;注意上面返回的那个status变量, 在RocksDB中所有会遇到错误的函数都会返回这个变量, 可以用来检查有没有出错.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="nt"&gt;rocksdb&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nd"&gt;Status&lt;/span&gt; &lt;span class="nt"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;...;&lt;/span&gt;
   &lt;span class="nt"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="nt"&gt;cerr&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="nt"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ToString&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="nt"&gt;endl&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;关闭数据库, 只需要简单得把指针释放就可以了: &lt;code&gt;delete db&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;读写数据库&lt;/h2&gt;
&lt;p&gt;基本的Put, Get, Delete:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="nt"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nd"&gt;string&lt;/span&gt; &lt;span class="nt"&gt;value&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="nt"&gt;rocksdb&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nd"&gt;Status&lt;/span&gt; &lt;span class="nt"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;db-&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;Get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;rocksdb&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nd"&gt;ReadOptions&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="nt"&gt;key1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;value&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="nt"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="nt"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;db-&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;Put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;rocksdb&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nd"&gt;WriteOptions&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="nt"&gt;key2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;value&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="nt"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="nt"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;db-&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;Delete&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;rocksdb&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nd"&gt;WriteOptions&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="nt"&gt;key1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意其中每次都检查了操作是否成功.&lt;/p&gt;
&lt;p&gt;每次 Get 操作都会导致至少一次的memcpy, 如果不想要这种浪费的话, 可以使用 PinnableSlice 操作.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="nt"&gt;PinnableSlice&lt;/span&gt; &lt;span class="nt"&gt;pinnable_val&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="nt"&gt;rocksdb&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nd"&gt;Status&lt;/span&gt; &lt;span class="nt"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;db-&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;Get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;rocksdb&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nd"&gt;ReadOptions&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="nt"&gt;key1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;pinnable_val&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;原子操作&lt;/h2&gt;
&lt;p&gt;使用&lt;code&gt;WriteBatch&lt;/code&gt;来构成一个原子性的操作. 什么是原子性操作总不用多说吧...原子操作不仅保证了原子性, 而且一般来说对性能也有帮助&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;quot;rocksdb/write_batch.h&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;rocksdb&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Status&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rocksdb&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ReadOptions&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;key1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;rocksdb&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;WriteBatch&lt;/span&gt; &lt;span class="n"&gt;batch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;batch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;batch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rocksdb&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;WriteOptions&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;batch&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;同步与异步读写&lt;/h2&gt;
&lt;p&gt;这块没看明白...&lt;/p&gt;
&lt;p&gt;默认的是异步读写, 如果使用了&lt;code&gt;sync&lt;/code&gt;这个标志, 那么就是同步读写了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="nt"&gt;rocksdb&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nd"&gt;WriteOptions&lt;/span&gt; &lt;span class="nt"&gt;write_options&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="nt"&gt;write_options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;sync&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="nt"&gt;db-&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;Put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;write_options&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;异步读写经常会比同步读写快上1000倍, 但是当机器down掉的时候, 会丢失最后的几个写入. 不过通常来说, 可以认为异步读写安全性也是够的.&lt;/p&gt;
&lt;p&gt;除了可以使用异步读写以外, 还可以使用 &lt;code&gt;WriteBatch&lt;/code&gt; 来批量读写.&lt;/p&gt;
&lt;h2&gt;并发&lt;/h2&gt;
&lt;p&gt;一个数据库同时只能被一个进程读写. 但是一个db实例的&lt;code&gt;Get&lt;/code&gt;操作都是线程安全的, 而&lt;code&gt;WriteBatch&lt;/code&gt;等操作可能需要其他一些同步机制&lt;/p&gt;
&lt;h2&gt;Merge 操作符&lt;/h2&gt;
&lt;p&gt;待续&lt;/p&gt;
&lt;h2&gt;Iterators&lt;/h2&gt;
&lt;p&gt;遍历所有的key&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="nt"&gt;rocksdb&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nd"&gt;Iterator&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nt"&gt;it&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;db-&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;NewIterator&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;rocksdb&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nd"&gt;ReadOptions&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
  &lt;span class="nt"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;it-&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;SeekToFirst&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="nt"&gt;it-&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;Valid&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="nt"&gt;it-&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;Next&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;cout&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="err"&gt;it-&amp;gt;key().ToString()&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="err"&gt;it-&amp;gt;value().ToString()&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="err"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;it-&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;status&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;Check&lt;/span&gt; &lt;span class="nt"&gt;for&lt;/span&gt; &lt;span class="nt"&gt;any&lt;/span&gt; &lt;span class="nt"&gt;errors&lt;/span&gt; &lt;span class="nt"&gt;found&lt;/span&gt; &lt;span class="nt"&gt;during&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;scan&lt;/span&gt;
  &lt;span class="nt"&gt;delete&lt;/span&gt; &lt;span class="nt"&gt;it&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;遍历[start, limit)之间的值&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  for (it-&amp;gt;Seek(start);
       it-&amp;gt;Valid() &amp;amp;&amp;amp; it-&amp;gt;key().ToString() &amp;lt; limit;
       it-&amp;gt;Next()) {
    ...
  }
  assert(it-&amp;gt;status().ok()); // Check for any errors found during the scan
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;反向遍历&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  for (it-&amp;gt;SeekToLast(); it-&amp;gt;Valid(); it-&amp;gt;Prev()) {
    ...
  }
  assert(it-&amp;gt;status().ok()); // Check for any errors found during the scan
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Snapshot(快照)&lt;/h2&gt;
&lt;p&gt;Snapshot 提供了当前系统在某一点的一个只读的状态表示.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="nt"&gt;rocksdb&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nd"&gt;ReadOptions&lt;/span&gt; &lt;span class="nt"&gt;options&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="nt"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;snapshot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;db-&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;GetSnapshot&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="nt"&gt;apply&lt;/span&gt; &lt;span class="nt"&gt;some&lt;/span&gt; &lt;span class="nt"&gt;updates&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="nt"&gt;db&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="nt"&gt;rocksdb&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nd"&gt;Iterator&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nt"&gt;iter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;db-&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;NewIterator&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;options&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="nt"&gt;read&lt;/span&gt; &lt;span class="nt"&gt;using&lt;/span&gt; &lt;span class="nt"&gt;iter&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="nt"&gt;view&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;state&lt;/span&gt; &lt;span class="nt"&gt;when&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;snapshot&lt;/span&gt; &lt;span class="nt"&gt;was&lt;/span&gt; &lt;span class="nt"&gt;created&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="nt"&gt;delete&lt;/span&gt; &lt;span class="nt"&gt;iter&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="nt"&gt;db-&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;ReleaseSnapshot&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意这里通过snapshot读到的都是在做snapshot那个时间点的数据库的值.&lt;/p&gt;
&lt;h2&gt;Slice&lt;/h2&gt;
&lt;p&gt;上面提到的 &lt;code&gt;iter-&amp;gt;key()&lt;/code&gt; 和 &lt;code&gt;iter-value()&lt;/code&gt; 的返回值都是 &lt;code&gt;rocksdb::Slice&lt;/code&gt; 类型的. Slice 仅仅是一个包含了长度和指针的bytearray. 它本身并不储存值, 这样也就避免了拷贝.&lt;/p&gt;
&lt;p&gt;Slice和string的互相转换:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="nt"&gt;rocksdb&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nd"&gt;Slice&lt;/span&gt; &lt;span class="nt"&gt;s1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

   &lt;span class="nt"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nd"&gt;string&lt;/span&gt; &lt;span class="nt"&gt;str&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;world&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="nt"&gt;rocksdb&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nd"&gt;Slice&lt;/span&gt; &lt;span class="nt"&gt;s2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;str&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

   &lt;span class="nt"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nd"&gt;string&lt;/span&gt; &lt;span class="nt"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ToString&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
   &lt;span class="nt"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;str&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nt"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nd"&gt;string&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;未完待续...&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sat, 11 Nov 2017 03:59:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-11-11:/posts/rocksdb-ji-chu-cao-zuo-jiao-cheng.html</guid><category>数据库</category><category>计算机</category></item><item><title>RocksDB 常见问题</title><link>/posts/rocksdb-chang-jian-wen-ti.html</link><description>&lt;h2&gt;RocksDB 会抛出异常吗?&lt;/h2&gt;
&lt;p&gt;不会, RocksDB会返回一个Status表示成功或者失败, 但是RocksDB并没有捕获STL中的异常, 比如bad_alloc这种&lt;/p&gt;
&lt;h2&gt;基础操作是线程安全的吗?&lt;/h2&gt;
&lt;p&gt;是的&lt;/p&gt;
&lt;h2&gt;可以使用多个进程(process)同时读写 RocksDB 吗?&lt;/h2&gt;
&lt;p&gt;不可以, 当然只读模式随意&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sat, 11 Nov 2017 03:34:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-11-11:/posts/rocksdb-chang-jian-wen-ti.html</guid><category>数据库</category><category>计算机</category></item><item><title>RocksDB 基础概念教程</title><link>/posts/rocksdb-ji-chu-gai-nian-jiao-cheng.html</link><description>&lt;p&gt;RocksDB起源于LevelDB, 并且从HBase中吸取了不少代码[1]. RocksDB 设计的初衷是能够利用好SSD和内存的高性能, 而且可以通过配置来承载高强度的读或者高强度的写.&lt;/p&gt;
&lt;p&gt;RocksDB 是一个嵌入式的key-value数据库, 并且所有的键都是有序的. RocksDB 支持的常用操作有 &lt;code&gt;Get(Key)&lt;/code&gt;, &lt;code&gt;Put(Key)&lt;/code&gt;, &lt;code&gt;Delete(Key)&lt;/code&gt;, &lt;code&gt;Scan(Key)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;RocksDB 中三个最基础的结构分别是 memtable, sstfile 和 logfile. memtable 是一个内存数据结构, 新的写入首先写入到memtable, 然后有可能写入到 logfile 中. logfile 是一个在硬盘上顺序写入的文件. 当 memtable 存满了之后, 它会被 flush 到 sstfile, 然后相应的 logfile 就可以安全的删除了. sstfile 中的数据为了方便查找key排序.&lt;/p&gt;
&lt;h2&gt;RocksDB 的功能&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Get&lt;/code&gt; 可以从数据库中读出一个kv对, &lt;code&gt;MultiGet&lt;/code&gt;可以从数据库中读出多个kv对. 数据库中的所有数据在逻辑上都是有序的, 一个应用可以指定一个key的比较方法, 从而让所有的 key 按这种方法有序. 可以通过使用 &lt;code&gt;Iterator&lt;/code&gt; API 可以对数据库做一个 &lt;code&gt;RangeScan&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;Put&lt;/code&gt; 方法可以更新一个数据, 使用&lt;code&gt;Write&lt;/code&gt; 可以原子性的更新多个数据. 这两个操作都会直接覆盖老数据.&lt;/p&gt;
&lt;p&gt;RocksDB 使用 checksum 来校验数据的损坏. 一般来说校验是按照 block 来进行的. 一个 block 如果被写入到硬盘之后就不会再变化了.&lt;/p&gt;
&lt;p&gt;整个数据库写入的吞吐取决于compaction的速率, 据观测, 在SSD上多线程compaction的速率是单线程的10倍. 整个数据库被存储为一系列的sstfile. 当一个memtable满了之后, 他会被写入到一个Level0 的 sstable上. 在写入到L0的过程中, RocksDB会把memtable中的重复的已删除的键全部都清理掉. 一些文件会被周期性的读入合并到一起, 这个行为叫做compaction.&lt;/p&gt;
&lt;p&gt;RocksDB支持两种形式的comapaction. 其中一种叫做Universal Style Compaction. 在这种模式下, 所有的文件都存在L0模式, 并且按照时间排序. 这时候一个compaction会把时间上相连的两组文件合并并组成一个新的文件, 再放回到L0. 所有的文件都有可能有重复的键.&lt;/p&gt;
&lt;p&gt;另一种模式 Level Style Compaction. 数据按层存储, 也就是L0...Ln. 最新的数据存储在L0, 最老的数据存储在Lmax层. 在L0的文件可能会有交叉的key, 但是在其它层就不会有. compaction发生的时候, 去除Ln的一个文件, 和在Ln+1层所有有相同key的文件, 把他们合并之后作为一个新的文件存储在Ln+1层. 通常来说USC比LSC 产生比较小的写入放大, 但是比较大的空间放大.&lt;/p&gt;
&lt;p&gt;MANIFEST 文件存储了数据库的状态.&lt;/p&gt;
&lt;p&gt;程序可以通过定义compaction filter来实现, key的TTL, 清洗数据等功能.&lt;/p&gt;
&lt;p&gt;RocksDB支持压缩. 典型的配置是 L0-L2 没有压缩，中间层使用 snappy 算法压缩，Lmax 使用 zlib 压缩。&lt;/p&gt;
&lt;p&gt;RocksDB 会把所有的transaction都存贮在logfile中, 重启的时候 RocksDB 会再去处理这些logfile. 这些logfile可以和sstfile 存放在不同的目录, 比如为了性能把sstfile存放在性能更高的存储上, 而把logfile存放在性能低一点的存储上.&lt;/p&gt;
&lt;p&gt;[1] https://github.com/facebook/rocksdb/wiki/RocksDB-Basics&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Thu, 09 Nov 2017 09:12:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-11-09:/posts/rocksdb-ji-chu-gai-nian-jiao-cheng.html</guid><category>数据库</category><category>计算机</category></item><item><title>不要把你的业余项目搞得过分复杂</title><link>/posts/bu-yao-ba-ni-de-ye-yu-xiang-mu-gao-de-guo-fen-fu-za.html</link><description>&lt;p&gt;错误一 项目管理&lt;/p&gt;
&lt;p&gt;不要瞎想, 不要试着管理一个还不存在的项目. 写下来大概的idea和预期的时间, 这就够了.&lt;/p&gt;
&lt;p&gt;错误二 过度设计基础架构&lt;/p&gt;
&lt;p&gt;你可能觉得自己的这个主意太棒了, 开始设计一个能够满足几百万用户同时在线的系统. 不要瞎想, 最开始你可能只需要的是一个512内存的DigitalOcean实例&lt;/p&gt;
&lt;p&gt;错误三 担心技术栈&lt;/p&gt;
&lt;p&gt;大部分的软件工程师似乎总是担心潜在客户会很在意他们的技术栈, 实际上他们才不关心呢...那个顺手就用那个吧, 管他是PHP还是Ruby呢...&lt;/p&gt;
&lt;p&gt;错误四 创建自己的框架&lt;/p&gt;
&lt;p&gt;这一点是我最常犯的错误, 本来想要做一个什么东西, 但是感觉现有的框架都不顺手, 于是决定自己写一个框架, 等框架写完了, 发现原本的项目根本不想做了...&lt;/p&gt;
&lt;p&gt;解决方法: 使用现有的框架并且定制他们, 这就足够了.&lt;/p&gt;
&lt;p&gt;错误五 持续没有输出&lt;/p&gt;
&lt;p&gt;过度设计输出系统, Jenkins, Drone, Travis 等等, 导致一直没有输出. 这些东西是好东西, 但是一开始不用纠结于配置他们.&lt;/p&gt;
&lt;p&gt;原文: https://elsyms.com/the-art-of-over-engineering-your-side-projects/&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Thu, 09 Nov 2017 09:07:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-11-09:/posts/bu-yao-ba-ni-de-ye-yu-xiang-mu-gao-de-guo-fen-fu-za.html</guid><category>反思与总结</category></item><item><title>Python 的多线程和多进程</title><link>/posts/python-de-duo-xian-cheng-he-duo-jin-cheng.html</link><description>&lt;h1&gt;高层次多线程&lt;/h1&gt;
&lt;p&gt;使用 threading 模块，threading.Thread&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;thread worker function&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Worker {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;threads&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;worker&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;
    &lt;span class="n"&gt;threads&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;by default, it does not start running&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;t.start  # start executing the thread
t.is_alive
t.join   # wait for a thread, daemon thread can&amp;#39;t be joined
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;直接子类化 Thread 是不推荐的，因为这样会使代码和线程耦合在一起。&lt;/p&gt;
&lt;p&gt;Each Thread has its own stack, so when a child thread throws a exception, the main thread will not catch it&lt;/p&gt;
&lt;p&gt;http://stackoverflow.com/questions/2829329/catch-a-threads-exception-in-the-caller-thread-in-python&lt;/p&gt;
&lt;h1&gt;Daemon 化线程&lt;/h1&gt;
&lt;p&gt;默认情况下，主线程等待所有子线程的执行。设定为 Daemon 线程后，主线程继续执行，并不等待，但当主线程退出时会杀掉所有子线程。如果想要使用Ctrl-C, 必须设定为daemon&lt;/p&gt;
&lt;p&gt;使用 t.daemon = True 设定为 Daemon 线程&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;t.join(timeout)&lt;/code&gt; 等待子线程完成，如果 timeout 之内没有完成，继续执行&lt;/p&gt;
&lt;p&gt;&lt;code&gt;threading.enumerate()&lt;/code&gt; 返回所有活动的线程&lt;/p&gt;
&lt;p&gt;&lt;code&gt;threading.current_thread()&lt;/code&gt; 返回当前进程&lt;/p&gt;
&lt;h1&gt;长时间运行的守护进程&lt;/h1&gt;
&lt;p&gt;头条的代码是如何处理的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;主线程等待&lt;/li&gt;
&lt;li&gt;所有的 worker 线程 daemon 化&lt;/li&gt;
&lt;li&gt;使用 systemd 管理进程&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;关于 coroutine，首先，他们是线程，用户级线程，也就是说虽然他们的代价比较小，但是如果递归调用，很可能会创建大量的协程。在线程中，我们显然不能创建数量过大的线程，因此，也不能无限地创造过多的协程。&lt;/p&gt;
&lt;h1&gt;线程池和进程池&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;multiprocessing.Pool&lt;/code&gt; 进程池，只能接受 marshalable 作为 worker&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multiprocessing.ThreadPool&lt;/code&gt; 线程池，同样受到了 GIL 的影响。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用法如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;multiporcessing.Pool.map(fn, iterable)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;线程池的例子&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing.pool&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ThreadPool&lt;/span&gt;
 
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;square_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
 
&lt;span class="c1"&gt;# function to be mapped over&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculate_parallel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;threads&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ThreadPool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;threads&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;square_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# NOTE close before join&lt;/span&gt;
    &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;
 
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;squared_numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calculate_parallel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;squared_numbers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用pool的一个陷阱是不太好debug, 爆出的异常往往看不清问题, 需要使用单线程调试之后再去使用&lt;/p&gt;
&lt;h1&gt;&lt;code&gt;concurrent.futures&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;https://medium.com/python-pandemonium/asyncio-coroutine-patterns-beyond-await-a6121486656f&lt;/li&gt;
&lt;li&gt;http://lucumr.pocoo.org/2016/10/30/i-dont-understand-asyncio/&lt;/li&gt;
&lt;li&gt;https://medium.com/@yeraydiazdiaz/asyncio-coroutine-patterns-errors-and-cancellation-3bb422e961ff&lt;/li&gt;
&lt;li&gt;https://pymotw.com/2/threading/&lt;/li&gt;
&lt;li&gt;https://news.ycombinator.com/item?id=9793466&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 08 Nov 2017 19:30:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-11-08:/posts/python-de-duo-xian-cheng-he-duo-jin-cheng.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>蛋</title><link>/posts/dan.html</link><description>&lt;p&gt;&lt;a href="http://www.galactanet.com/oneoff/theegg_zh.html"&gt;The Egg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Written by Andy Weir&lt;/p&gt;
&lt;p&gt;Translation: Xiuzhu Shao&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;蛋

你在回家的路上死了。
那是一场车祸。不大，但仍然致命。你留下了妻子和两个孩子。你死的并不痛苦。救护员尽力去救你，但没有成功。你的身体被摔得太彻底了。死了很好，相信我。
这时你遇见了我。
“发生了什么?”你问，“我在那儿？”
“你死了。”我说，没有必要拐弯抹角。
“有一辆。。。一辆卡车失控。。。”
“对。”我说。
“我。。。我死了?”
“对。但别难过，每个人都会死。”我说。
你看了看周围，一片虚空，只有你和我。“这是什么地方？”你问，“是来世吗？”
“差不多吧。”我说。
“你是上帝？”你问。
“对，”我回答，“我是上帝。”
“我的孩子。。。我的老婆。。。”你说。
“怎么了？”
“他们会好吗？”
“这正是我想看到的，”我说，“你刚刚去世，但主要关心的是你的家人。这是好事。”
你充满好奇地看着我。在你眼里，我并不像神。我只像一个普通的男人，或许一个女人，一种模糊的权威形象。比起上帝，我长得更像一位老师。
“别担心，”我说，“他们会好起来的。你的孩子们会把你记得十全十美。他们还来不及发展对你得敌意。你的妻子表面上会哭，但其实会暗暗松一口气。说实在的，你们的婚姻已经破裂了。如果这是任何安慰的话，她会为此感到非常内疚。”
“哦，”你说，“那现在会发生什么？我会去天堂还是地狱还是到哪里？”
“都不会，”我说，“你会重新投胎。”
“啊，”你说，“原来印度教是对的。”
“每一个宗教都有他们自己对的地方，”我说，“和我一起走吧。”
你跟着我大步穿行于虚空。“我们去哪儿呢？”
“不是什么特别的地方，”我说。“刚好我们可以边走边谈。”
“那最终的目的是什么呢？”你问，“我重生的时候，会变成一张白纸，对吗？一个婴儿。所以我此生所有的经历和所做的一切都不再有意义。”
“不是这样！”我说，“你之中包含有你累生累世所有的知识和经验。只是现在你不记得它们了。”
我停下脚步，握住你的肩膀。“你的灵魂比你所能想象的任何东西都更为壮观、美丽和巨大，人类的头脑只可容纳你的一小部分。就像你把手指放进一杯水里试探温度一样，你只把自己小小的一部分放进身体这个容器。但当你把它拿回时，你就获得了这个容器的所有经验。”
“你才在一个人体里过了48年，所以你还没有充分伸展你自己，觉悟到你其余的庞大意识。如果我们在这里逗留足够长的时间，你会开始记起一切。但一生和一生之间没有必要这样做。”
“那我曾转过多少次世呢？”
“哦，很多，很多很多。很多不同的生命。”我说，“接下来，你是一个活在公元540年的中国农家姑娘。”
“等等，什么？”你结结巴巴地说，“你要把我送回过去？”
“理论上说，我想是这样吧。你所知道的时间其实只存在于你的世界里。而在我的世界里，一切都不同。”
“你从哪里来？”你问。
“哦，”我解释道，“我来自某一个地方，另一个地方。那儿有很多和我一样的存在。我知道你想知道那儿是什么样子，但老实说，你不会理解。”
“哦，”你说，有点失望。“但等等。如果我恰巧转世到一个地方，我很可能曾经与我自己在某一点相遇。”
“当然，这种情况经常发生。但每一个生命只晓得它自己的周期，所以你根本不知道它实际在发生。”
“那这一切的意义是什么呢？”
“真的吗？”我问，“当真？你在问我生命的意义？不觉的有点老套？”
“但这的确是一个合理的问题。”你坚持。
我看着你的眼睛。“生命的意义，也是我创造整个宇宙的原因，是为了让你成熟。”
“你是指人类？你想让我们成熟？”
“不，只有你。我为你创造了整个宇宙。你每一次的生命都让你成长和成熟，成为一个更大的、更伟大的智者。”
“只是我吗？其他人怎么办？”
“没有别人，”我说，“这个宇宙里只有你和我。”
你茫然地盯着我，“但地球上所有的人。。。”
“全是你，不同化身的你。”
“等等，我是每个人？！”
“你终于懂了，”我说，祝贺地拍了拍你的背。
“我是每一个活过的人？”
“还是未来每一个将要活的人，对。”
“我是林肯？”
“你也是约翰·布斯。”我说。
“我是希特勒？”你震惊地说。
“你也是被他杀死的几百万人。”
“我是耶稣？”
“你也是跟随他的每一个人。”
你沉默了。
“你每次害了一个人，”我说，“你就在害自己。你每一次善意的行动，都是对自己的善意。任何人所经历的每一个快乐和悲伤的时刻，都曾经被你，或将会被你，所经历。”
你想了很久。
“为什么？”你问我，“为什么你要做这一切？”
“因为有一天，你会变得和我一样。因为这就是你的本来面目，你和我是同类，你是我的孩子。”
“哇，”你难以置信地说，“你的意思是说我是上帝？”
“不，还不是。你还是个胎儿，你还在发育。一旦你活过所有时间的所有人的生命之后，你才会发育到足够成熟去获得新生。”
“那整个宇宙，”你说，“只是一个。。。”
“蛋。”我回答，“现在时间到了，该让你进入下一个生命了。”
然后我把你送上了路。
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 26 Sep 2017 22:13:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-09-26:/posts/dan.html</guid><category>未分类</category></item><item><title>前端框架 Vue 学习笔记</title><link>/posts/qian-duan-kuang-jia-vue-xue-xi-bi-ji.html</link><description>&lt;p&gt;之前在网页里小范围的用了vue, 感觉用起来非常爽, 现在打算做自己的笔记应用. 这次打算做成SPA的形式, 前端全部用vue来写. 需要node的一些东西, 记录下学习过程. 迈向全栈，哈哈 ^_^&lt;/p&gt;
&lt;h1&gt;安装&lt;/h1&gt;
&lt;p&gt;首先, 全局安装vue: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;npm install --global @vue/cli
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;data 属性&lt;/h1&gt;
&lt;p&gt;只有在创建时提供的 data 属性才是响应式的，在创建之后在添加新元素就不管用了。&lt;/p&gt;
&lt;p&gt;当然还可以使用 app.$watch 方法显式创建一些监听器&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// $watch 是一个实例方法
vm.$watch(&amp;#39;a&amp;#39;, function (newValue, oldValue) {
  // 这个回调将在 `vm.a` 改变后调用
})
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;methods 和 computed&lt;/h1&gt;
&lt;p&gt;methods 定义了一些可以调用的方法，他的值也可以用来插值。但是最好使用 computed，因为 computed 是有缓存的。&lt;/p&gt;
&lt;p&gt;computed 属性也可以设置 setter，所以实际上，computed 属性相当于对现有属性的一种映射和变化。&lt;/p&gt;
&lt;h1&gt;v-bind 和 v-model&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;v-bind 用于单项绑定：在 HTML 属性中使用 v-bind 绑定, 标签中使用 &lt;code&gt;{{ }}&lt;/code&gt;。只能使用表达式，而不能使用语句。&lt;/li&gt;
&lt;li&gt;v-model 用于双向绑定：在 input 这类用户可以输入的组件中，需要双向绑定，使用 v-model.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;v-bind 类似的指令还有 v-once 和 v-html&lt;/p&gt;
&lt;p&gt;v-model 实际上等价于&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;input v-model=&amp;quot;searchText&amp;quot;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;input
  v-bind:value=&amp;quot;searchText&amp;quot;
  v-on:input=&amp;quot;searchText = $event.target.value&amp;quot;
&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;要想在自定义输入组件中支持 v-model 的话，就需要使用 v-bind 和 v-on 两个方法了，而不能直接使用 v-model。&lt;/p&gt;
&lt;h1&gt;v-if 和 v-for&lt;/h1&gt;
&lt;p&gt;这两个就和所有模板系统中的 if 和 for 一样。vue 中提供的额外方便之处是，可以使用 template 标签，这样就不会多一个标签了&lt;/p&gt;
&lt;p&gt;vue 是懒渲染的，因此会尽可能地复用组件，可以使用 key 来区分&lt;/p&gt;
&lt;p&gt;v-if 是真正的条件式渲染，v-show 则只是在切换 display 属性&lt;/p&gt;
&lt;p&gt;vue 没有代理数组的赋值方法，所以需要使用 app.$set 方法&lt;/p&gt;
&lt;h1&gt;@&lt;/h1&gt;
&lt;p&gt;如果只是指定一个事件处理函数的话，那么参数就是 event。如果自己指定了参数的话，可以使用 $event 来代表 event&lt;/p&gt;
&lt;p&gt;还可以使用 .prevent 和 .stop 等修饰符&lt;/p&gt;
&lt;h1&gt;component&lt;/h1&gt;
&lt;p&gt;vue 中最终要的概念就是组件了。使用组件来模块式得构建应用。需要通过 props 属性来定义组件中的属性&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;app-7&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ol&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!--&lt;/span&gt;
&lt;span class="c"&gt;      现在我们为每个 todo-item 提供 todo 对象&lt;/span&gt;
&lt;span class="c"&gt;      todo 对象是变量，即其内容可以是动态的。&lt;/span&gt;
&lt;span class="c"&gt;      我们也需要为每个组件提供一个“key”，稍后再&lt;/span&gt;
&lt;span class="c"&gt;      作详细解释。&lt;/span&gt;
&lt;span class="c"&gt;    --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;todo-item&lt;/span&gt;
      &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;item in groceryList&amp;quot;&lt;/span&gt;
      &lt;span class="na"&gt;v-bind:todo=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;item&amp;quot;&lt;/span&gt;
      &lt;span class="na"&gt;v-bind:key=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;item.id&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/todo-item&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ol&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

Vue.component(&amp;#39;todo-item&amp;#39;, {
  // todo-item 组件现在接受一个
  // &amp;quot;prop&amp;quot;，类似于一个自定义特性。
  // 这个 prop 名为 todo。
  props: [&amp;#39;todo&amp;#39;],
  template: &amp;#39;&lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;todo.text&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&amp;#39;
})
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;props 是一个数组，用来声明组建的属性。然后通过属性来传递。&lt;/p&gt;
&lt;p&gt;组件还可以通过 $emit 来发送事件，这些事件可以被所有的组件监听到，就像普通的 DOM 事件一样。&lt;/p&gt;
&lt;h1&gt;声明周期函数&lt;/h1&gt;
&lt;p&gt;在固定的周期，vue 会调用的一些函数 created, mounted 等。需要注意的是，不要使用胖箭头函数。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;new Vue({
  data: {
    a: 1
  },
  created: function () {
    // `this` 指向 vm 实例
    console.log(&amp;#39;a is: &amp;#39; + this.a)
  }
})
// =&amp;gt; &amp;quot;a is: 1&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;创建vue应用&lt;/h1&gt;
&lt;p&gt;因为我们会直接通过&lt;code&gt;*.vue&lt;/code&gt;文件来编写vue的组件, 因此需要使用webpack打包编译. 另外我们需要使用官方的vue-router来&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vue init webpack notelet
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这条命令基于 webpack 这个模板创建了notelet这个应用, 也就是我们的笔记应用.&lt;/p&gt;
&lt;p&gt;打开 &lt;code&gt;src/router/index.js&lt;/code&gt; 可以看到 vue 创建的router的代码, 其中&lt;code&gt;@&lt;/code&gt;是&lt;code&gt;src&lt;/code&gt;目录的缩写.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Vue&lt;/span&gt; &lt;span class="nn"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;vue&amp;#39;&lt;/span&gt;
  &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Router&lt;/span&gt; &lt;span class="nn"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;vue-router&amp;#39;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Hello&lt;/span&gt; &lt;span class="nn"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;@/components/Hello&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;Vue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;¦&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="err"&gt;¦&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="err"&gt;¦&lt;/span&gt; &lt;span class="n"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Hello&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后打开 &lt;code&gt;src/main.js&lt;/code&gt;, 可以看到在里面使用了 &lt;code&gt;App&lt;/code&gt; 来作为我们的跟组件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;Vue&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;load&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="sb"&gt;`import`&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;runtime&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;standalone&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;been&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;webpack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;alias&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Vue&lt;/span&gt; &lt;span class="nn"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;vue&amp;#39;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;App&lt;/span&gt; &lt;span class="nn"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;./App&amp;#39;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;router&lt;/span&gt; &lt;span class="nn"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;./router&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;Vue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;productionTip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;false&lt;/span&gt;

&lt;span class="o"&gt;/*&lt;/span&gt; &lt;span class="n"&gt;eslint&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;disable&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="o"&gt;*/&lt;/span&gt;
&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;#app&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;App/&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;components&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;App&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;执行 &lt;code&gt;npm run dev&lt;/code&gt;, 然后打开 http://localhost:8080/ 就可以看到我们的vue应用了. 注意, 在写这篇文章的时候 node 8.x 下似乎有bug, 导致 app.js 加载不出来, 安装 6.x 就好了. 该死的node.&lt;/p&gt;
&lt;p&gt;打开 &lt;code&gt;App.vue&lt;/code&gt;, 也就是我们的根组件, 可以看到下面的内容&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;app&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  ¦ &lt;span class="nt"&gt;&amp;lt;router-view&amp;gt;&amp;lt;/router-view&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
export default {
  name: &amp;#39;app&amp;#39;
}
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
#app {
  font-family: &amp;#39;Avenir&amp;#39;, Helvetica, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-align: center;
  color: #2c3e50;
  margin-top: 60px;
}
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意其中的 router-view 便签, 意思就是路由的内容都在 router-view 中显示.&lt;/p&gt;
&lt;h1&gt;添加一个新的组件和路由&lt;/h1&gt;
&lt;p&gt;接下来我们添加一个"关于"页面. 打开&lt;code&gt;src/router/index.js&lt;/code&gt;, 改成下面这样:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;export default new Router({
  routes: [
  ¦ {
  ¦ ¦ path: &amp;#39;/&amp;#39;,
  ¦ ¦ name: &amp;#39;Hello&amp;#39;,
  ¦ ¦ component: Hello
  ¦ },
  ¦ {
  ¦ ¦ path: &amp;#39;/about&amp;#39;,
  ¦ ¦ name: &amp;#39;About&amp;#39;,
  ¦ ¦ component: About
  ¦ }
  ]
})
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后添加 &lt;code&gt;src/components/About.vue&lt;/code&gt; 文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  ¦ &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;About Notelet&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  ¦ &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is a simple note app&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
export default {
  name: &amp;#39;About&amp;#39;,
  data () {
  ¦ return {
  ¦ ¦ msg: &amp;#39;Hello Vue&amp;#39;
  ¦ }
  }
}
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后更改 &lt;code&gt;App.vue&lt;/code&gt; 文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;app&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  ¦ &lt;span class="nt"&gt;&amp;lt;router-link&lt;/span&gt; &lt;span class="na"&gt;:to=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{name: &amp;#39;Hello&amp;#39;}&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="nt"&gt;&amp;lt;/router-link&amp;gt;&lt;/span&gt;
  ¦ &lt;span class="nt"&gt;&amp;lt;router-link&lt;/span&gt; &lt;span class="na"&gt;to=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/about&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;About&lt;span class="nt"&gt;&amp;lt;/router-link&amp;gt;&lt;/span&gt;
  ¦ &lt;span class="nt"&gt;&amp;lt;router-view&amp;gt;&amp;lt;/router-view&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意, 我们使用about指向了 About 这个组件, 而使用 hello 指向了 Hello 这个组件, 注意其中还动态传递了参数.&lt;/p&gt;
&lt;p&gt;[1] https://scotch.io/tutorials/getting-started-with-vue-router&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Fri, 22 Sep 2017 04:30:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-09-22:/posts/qian-duan-kuang-jia-vue-xue-xi-bi-ji.html</guid><category>JavaScript</category><category>大前端</category><category>计算机</category></item><item><title>HTTP 认证介绍</title><link>/posts/http-ren-zheng-jie-shao.html</link><description>&lt;p&gt;周末给一个库添加http代理的支持，发现对http basic auth不甚了解，阅读了一下相关的文档，写篇备忘。&lt;/p&gt;
&lt;p&gt;http 中的认证主要是 basic auth 和 digest auth 两种，其中 digest auth 比较复杂，而且也没有提升安全性，已经不建议使用了。&lt;/p&gt;
&lt;p&gt;RFC 7235 [1] 描述了客户端（通常是浏览器）和服务器如何通过http进行身份认证的一些机制。客户端和 http代理之间也可以使用 http auth 来做验证。
  &lt;/p&gt;
&lt;h1&gt;验证流程&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;当客户端访问一个页面时，如果只有验证后才能访问，或者验证后有更多内容，服务器应该发送 401 Unauthorized，提出一个chanllenge，设定 &lt;code&gt;WWW-Authenticate&lt;/code&gt; header，并指定验证的 type 和 realm，具体定义下文有讲。&lt;/li&gt;
&lt;li&gt;客户端这时通常应该提示用户输入密钥，一般是浏览器弹出用户名密码对话框供用户填写，然后使用&lt;code&gt;Authorization&lt;/code&gt; header发送验证的密钥。如果验证通过的话，应该正常访问（200 OK），验证通过但是没有权限的话应该返回 403 Forbidden。&lt;/li&gt;
&lt;li&gt;如果验证不通过，应该服务器返回401，客户端可以重试。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意，如果客户端已经知道需要密钥访问，那么可以在第一个请求直接发送对应的密钥，这样就避免了 401 Unauthorized。&lt;/p&gt;
&lt;p&gt;&lt;img alt="MDN上的流程图" src="https://mdn.mozillademos.org/files/14689/HTTPAuth.png"&gt;
 &lt;/p&gt;
&lt;h1&gt;代理验证的不同&lt;/h1&gt;
&lt;p&gt;如果代理服务器需要验证的话，流程是类似的，有两点细节不同：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;代理服务器应该发送407 Proxy Authentication Required 而不是 401。使用的headers也变成了 Proxy-Authenticate 和 Proxy-Authorization 。&lt;/li&gt;
&lt;li&gt;服务器的头部 WWW-Authenticate 是 end-to-end 的，也就是代理服务器不应该篡改，应该原样传递。而代理服务器的Proxy-头部是 hop-by-hop 的，也就是不能向下传递。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;实现细节&lt;/h1&gt;
&lt;p&gt;服务器或者代理服务器随着4XX发送的头部为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;WWW-Authenticate: &amp;lt;type&amp;gt; realm=&amp;lt;realm&amp;gt;
or
Proxy-Authenticate: &amp;lt;type&amp;gt; realm=&amp;lt;realm&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中 type 指定了使用的验证的类型，也就是用户名和密码加密方式的不同，IANA钦定了一批方法[2]。然鹅，一般来说常用的只有两个 Basic 和 Digest。而其中 Digest 的实现可能会要求服务器明文存储密码，于是大家又angry了[3]，这里也不推荐使用。所以这里只介绍 Basic类型。&lt;/p&gt;
&lt;p&gt;realm 指定了验证的领域，也就是说相同realm下的用户名和密码是一样的，如果你访问的两个页面在同一个realm，那么浏览器在第二次访问就不会问你密码了。&lt;/p&gt;
&lt;p&gt;客户端发送对应的头部和密钥来获得访问权限&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Authorization: &amp;lt;type&amp;gt; &amp;lt;credentials&amp;gt;
or
Proxy-Authorization: &amp;lt;type&amp;gt; &amp;lt;credentials&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中，type就是刚刚的那个 Basic 或者 Digest。credentials 按照对应的方法计算。对于Basic类型 &lt;code&gt;credentials = base64(username + ':' + password)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;一个例子，假设用户名和密码分别是：aladdin和opensesame。那么客户端应该发送的header是：&lt;code&gt;Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;需要注意的地方&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;因为http协议本身是无状态的，所以Auth应该是无状态的，所以每次请求都应该携带。
 &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果是http协议的话，对于Basic Auth，那么密码都是明文发送的，可以使用https来避免这个问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以使用：https://username:password@www.example.com/ 这种形式来预先输入账号密码，但是这种形式已经不鼓励了。不过在设定一些环境变量时，比如 http_proxy，也只能用这种方法来制定用户名和密码&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对应的RFC https://tools.ietf.org/html/rfc7235&lt;/li&gt;
&lt;li&gt;IANA 注册的auth类型 http://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml&lt;/li&gt;
&lt;li&gt;为什么不要使用digest验证  https://stackoverflow.com/questions/2384230/what-is-digest-authentication&lt;/li&gt;
&lt;li&gt;MDN的文章还提供了如何让apache和nginx使用basic auth https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 04 Sep 2017 03:39:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-09-04:/posts/http-ren-zheng-jie-shao.html</guid><category>HTTP</category><category>计算机</category><category>网络</category></item><item><title>xpath generator 是如何实现的?</title><link>/posts/xpath-generator-shi-ru-he-shi-xian-de.html</link><description>&lt;p&gt;写爬虫的话做到最后基本上最终没法自动化的就是指定要抽取的元素的xpath了, 要定向爬一个网站的内容基本上都会归结到去找下一页和数据元素的xpath. 如果能把xpath的生成交给不会写程序的运营同学来做的话, 能够极大地解放程序员的生产力.&lt;/p&gt;
&lt;p&gt;毕竟xpath也算是一个DSL, 对于不会编程的同学还是有一定难度的. SQL写得熟练的PM多得是, 想找一个会写xpath的运营同学则是很困难, 毕竟术业有专攻, 运营需要面对的问题和我们程序猿还是有很大不同. 多年的经验, 感觉能教会他们yaml已经是极限了...&lt;/p&gt;
&lt;p&gt;那么能不能有一个图形化的工具来生成xpath呢? 答案显然是有的, chrome浏览器就内置了生成xpath的工具, 如下图所示:&lt;/p&gt;
&lt;p&gt;&lt;img alt="chrome xpath" src="https://ws4.sinaimg.cn/large/006tNc79ly1flhwpu64uvj31f20keaj4.jpg"&gt;&lt;/p&gt;
&lt;p&gt;这幅图生成的xpath是: &lt;code&gt;//*[@id="fc_B_pic"]/ul[1]/li[1]/a[1]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然而chrome的xpath生成却有几个缺点:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;chrome的xpath只会想上去找带有id的元素, 而根据实际的情况, 往往找到带有class的元素就可以保证找的xpath是对的了.&lt;/li&gt;
&lt;li&gt;chrome生成的元素是尽量保证元素唯一的, 也就是当你想要搞一个能能够选中多个元素的xpath时, chrome 无能为力, 还是需要自己去改写.&lt;/li&gt;
&lt;li&gt;另外就是生成之后不能方便的用图形工具去验证.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;未完待续&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sun, 20 Aug 2017 18:57:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-08-20:/posts/xpath-generator-shi-ru-he-shi-xian-de.html</guid><category>大前端</category><category>浏览器扩展</category><category>计算机</category></item><item><title>对头条的思考</title><link>/posts/dui-tou-tiao-de-si-kao.html</link><description>&lt;h1&gt;读张一鸣微博&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;可假设某位下属提辞职，感受如是『很可惜』『很在意』那么应现在考虑如何给增加回报和空间，相反，如觉得『也好』『更好』甚至轻松，那应考虑是否做出调岗或辞退。&lt;/p&gt;
&lt;p&gt;时常看看旧闻，就知道媒体多么不靠谱&lt;/p&gt;
&lt;p&gt;大剑无锋大巧不工&lt;/p&gt;
&lt;p&gt;在全网的上抓取分析提取信息，遇到的大问题就是 spam 以及 spam 的高级形式软文或者枪文，pangerank 是网页的投票，sns 利用可标识的人行为来投票，sns 平台之外还有好方法吗。&lt;/p&gt;
&lt;p&gt;风景长宜放眼量。往事不可谏，来者犹可追。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;他应该是一个类似张小龙一样，技术出身的优秀的产品经理&lt;/p&gt;
&lt;h1&gt;反思&lt;/h1&gt;
&lt;p&gt;阿里的月饼风波过后，一鸣好像说过：“我们中秋节就不发月饼，因为优秀的工程师不会在乎那一盒月饼的。” 其实这句话就非常傻，优秀的员工可能这样想：“一盒月饼才多少钱，公司连这都舍不得，在其他事情上会舍得为员工付出吗？”。月饼这种东西显然是 ROI 非常高的一个员工福利，所以不要为了彰显和阿里不同而故意说反话。当然，实际上头条的福利很好，不光有月饼，过年也有礼物。&lt;/p&gt;
&lt;p&gt;Google 的价值观就很短：Don't be evil. 以至于大家都知道。而百度的价值观也很短：简单可依赖。虽然不管是 Google 还是百度都没有很好地践行他们的价值观，但是至少起到了宣传作用吧。头条的价值观太长了，而且是五六个独立的词语，到现在我都记不下来。平均下来头条员工在头条的时间可能连两年都不到，你让人记这么长一大串东西，你又不是社会主义核心价值观&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 16 Aug 2017 23:53:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-08-16:/posts/dui-tou-tiao-de-si-kao.html</guid><category>创业</category><category>运营与产品</category></item><item><title>爬虫爬来的数据是否可信</title><link>/posts/pa-chong-pa-lai-de-shu-ju-shi-fou-ke-xin.html</link><description>&lt;p&gt;如果用来分析的数据本来就是错的，那么得出的结论必然也是有问题的。比如2016年美国大选中，由于川普的支持者经常被侮辱，导致在电话调查选民中，大家都声称自己支持希拉里，可是实际上大家都投给了川普。电话调查的结果本来就是错的，所以大家都认为希拉里会赢。川普团队则采取的是问选民你认为你的邻居会投谁，从而得到了正确结果。&lt;/p&gt;
&lt;p&gt;爬虫爬到的数据中也有可能是有问题的，比如租房网站的假房源，招聘网站上的虚假职位，用户故意不填写真实信息以保护隐私等等；微信文章被刷多的阅读数；而且编写不良的爬虫很可能误入蜜罐，得到的数据更有问题。&lt;/p&gt;
&lt;p&gt;比如说借助爬来的新闻分析房产数据，实际上住建部禁止发布涨价相关预测，也就是对于市场的情绪表达是有影响的，那么我们如果按照这个数据来做预测显然是不对的。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 16 Aug 2017 23:25:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-08-16:/posts/pa-chong-pa-lai-de-shu-ju-shi-fou-ke-xin.html</guid><category>计算机</category><category>爬虫</category></item><item><title>十年学会编程</title><link>/posts/shi-nian-xue-hui-bian-cheng.html</link><description>&lt;p&gt;对编程产生感兴趣并因为乐趣而写程序。确信你自始至终都能乐在其中，这样你才愿意将十年光阴投入编程事业.&lt;/p&gt;
&lt;p&gt;与其他程序员交流；阅读别人的代码。这比任何书任何培训都重要。&lt;/p&gt;
&lt;p&gt;记住在 “计算机科学” 中包括”计算机” 这个词。要知道你的计算机执行一条指令需要多久，到内存中取一个字需要多久(缓存是否击中), 到磁盘读取连续的字需要多久，而磁盘的定位又需要多久. &lt;/p&gt;
&lt;p&gt;Fred Brooks (人月神话作者) 在他的文章 没有银弹 中指出，发掘卓越软体设计者的三部曲：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;尽早尽可能地以系统化的方式发掘最佳设计人员。&lt;/li&gt;
&lt;li&gt;给有潜力者指派生涯规划师，并谨慎地规划他们的职业生涯。&lt;/li&gt;
&lt;li&gt;提供机会给正在成长的程序员，让他们能相互影响，彼此激励。&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 16 Aug 2017 23:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-08-16:/posts/shi-nian-xue-hui-bian-cheng.html</guid><category>想法</category><category>计算机</category></item><item><title>左耳朵耗子的绩效观</title><link>/posts/zuo-er-duo-hao-zi-de-ji-xiao-guan.html</link><description>&lt;p&gt;制定目标和绩效，目的不是用来考核人的，而用来改善提高组织和人员业绩和效率的。&lt;/p&gt;
&lt;p&gt;人是复杂的，人是有状态波动的，任何时候都不应该轻易否定人，绩效考核应该考核的是事情，而不是人。&lt;/p&gt;
&lt;p&gt;考核价值观最大的问题就是非常容易的上纲上线，也非常容易的被制造政治斗争，也非常容易的扼杀各种不同思想，老实说，这从很大程度上是一种洗脑的手段——通过对人制造一种紧张或恐惧而达到控制思想的目的。&lt;/p&gt;
&lt;p&gt;KPI适合把人当机器用的行业，而OKR适合人人都是公司一员的创新行业。&lt;/p&gt;
&lt;p&gt;YF:
在一个公司里，每天都会产生很多新的想法，并不是每一个想法都会落到实处，因为有的人没有时间做，有的想法纯属脑洞大开，有的想法有其他位置问题不可能实现，有的可能提出的人只有个创意，实施的人做出了花。&lt;/p&gt;
&lt;p&gt;如果有重大的事，或者一定要做的事，要落到纸面上，有排期，这样才能真正做起来。当然如果做到了管理岗位，切忌把所有事都写下来，因为好大一部分是前面提到的做不做无所谓的事。要给每个人自由，才能让他们发挥到自己的长处。&lt;/p&gt;
&lt;p&gt;所以，要用okr，而不是kpi。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 16 Aug 2017 17:04:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-08-16:/posts/zuo-er-duo-hao-zi-de-ji-xiao-guan.html</guid><category>talks</category></item><item><title>阅读 instagram 的 python 升级文章</title><link>/posts/yue-du-instagram-de-python-sheng-ji-wen-zhang.html</link><description>&lt;p&gt;在 Instagram 的用户数迅速增长的过程中，性能问题还是出现了：服务器数量的增长率已经慢慢的超过了用户增长率。&lt;/p&gt;
&lt;p&gt;为此，他们决定跳过 Python 2 中哪些蹩脚的异步 IO 实现 （可怜的 gevent、tornado、twisted 众），直接升级到 Python 3，去探索标准库中的 asyncio 模块所能带来的可能性。&lt;/p&gt;
&lt;p&gt;在 Instagram，进行 Python 3 的迁移需要必须满足两个前提条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不停机，不能有任何的服务因此不可用&lt;/li&gt;
&lt;li&gt;不能影响产品新特性的开发&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 16 Aug 2017 17:03:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-08-16:/posts/yue-du-instagram-de-python-sheng-ji-wen-zhang.html</guid><category>talks</category></item><item><title>Dropbox CEO's speech</title><link>/posts/dropbox-ceos-speech.html</link><description>&lt;p&gt;Dropbox CEO's speech&lt;/p&gt;
&lt;p&gt;Bill Gates's first company made software for traffic lights. Steve Jobs's first company made plastic whistles that let you make free phone calls. Both failed, but it's hard to imagine they were too upset about it. That's my favourite thing that changes today. You no longer carry around a number indicating the sum of all your mistakes. From now on, failure doesn't matter: you only have to be right once.&lt;/p&gt;
&lt;p&gt;So that’s how 30,000 ended up on the cheat sheet. That night, I realised there are no warmups, no practice rounds, no reset buttons. Every day we're writing a few more words of a story. And when you die, it's not like "here lies Drew, he came in 174th place." So from then on, I stopped trying to make my life perfect, and instead tried to make it interesting. I wanted my story to be an adventure — and that's made all the difference.&lt;/p&gt;
&lt;p&gt;And today on your commencement, your first day of life in the real world, that's what I wish for you. Instead of trying to make your life perfect, give yourself the freedom to make it an adventure, and go ever upward. Thank you.&lt;/p&gt;
&lt;p&gt;It took me a while to get it, but the hardest-working people don't work hard because they're disciplined. They work hard because working on an exciting problem is fun. So after today, it's not about pushing yourself; it's about finding your tennis ball, the thing that pulls you. It might take a while, but until you find it, keep listening for that little voice.&lt;/p&gt;
&lt;p&gt;Fortunately, it doesn't matter. No one has a 5.0 in real life. In fact, when you finish school, the whole notion of a GPA just goes away. When you're in school, every little mistake is a permanent crack in your windshield. But in the real world, if you're not swerving around and hitting the guard rails every now and then, you're not going fast enough. Your biggest risk isn't failing, it's getting too comfortable.&lt;/p&gt;
&lt;p&gt;Honestly, I don't think I've ever been "ready." I remember the day our first investors said yes and asked us where to send the money. For a 24 year old, this is Christmas — and opening your present is hitting refresh over and over on bankofamerica.com and watching your company's checking account go from 60 dollars to 1.2 million dollars. At first I was ecstatic — that number has two commas in it! I took a screenshot — but then I was sick to my stomach. Someday these guys are going to want this back. What the hell have I gotten myself into?&lt;/p&gt;
&lt;p&gt;They say that you're the average of the 5 people you spend the most time with. Think about that for a minute: who would be in your circle of 5? I have some good news: MIT is one of the best places in the world to start building that circle. If I hadn't come here, I wouldn't have met Adam, I wouldn't have met my amazing cofounder, Arash, and there would be no Dropbox.&lt;/p&gt;
&lt;p&gt;And now your circle will grow to include your coworkers and everyone around you. Where you live matters: there’s only one MIT. And there's only one Hollywood and only one Silicon Valley. This isn't a coincidence: for whatever you're doing, there's usually only one place where the top people go. You should go there. Don’t settle for anywhere else. Meeting my heroes and learning from them gave me a huge advantage. Your heroes are part of your circle too — follow them. If the real action is happening somewhere else, move.&lt;/p&gt;
&lt;p&gt;One thing I've learned is surrounding yourself with inspiring people is now just as important as being talented or working hard. Can you imagine if Michael Jordan hadn’t been in the NBA, if his circle of 5 had been a bunch of guys in Italy? Your circle pushes you to be better, just as Adam pushed me.&lt;/p&gt;
&lt;p&gt;I was thrilled for him, but it was a shock for me. Here was my faithful beer pong partner and my little brother in the fraternity, two years younger than me. I was out of excuses. He was off to the Super Bowl and I wasn't even getting drafted. He had no idea at the time, but Adam had given me just the kick I needed. It was time for a change.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 15 Aug 2017 09:25:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-08-15:/posts/dropbox-ceos-speech.html</guid><category>talks</category></item><item><title>爬虫如何尽量模拟浏览器</title><link>/posts/pa-chong-ru-he-jin-liang-mo-ni-liu-lan-qi.html</link><description>&lt;h1&gt;http headers&lt;/h1&gt;
&lt;p&gt;发送http请求时，Host, Connection, Accept, User-Agent, Referer, Accept-Encoding, Accept-Language这七个头必须添加，因为正常的浏览器都会有这7个头。
 
其中：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Host一般各种库都已经填充了&lt;/li&gt;
&lt;li&gt;Connection填Keep-Alive&lt;/li&gt;
&lt;li&gt;Accept一般填text/html 或者application/json&lt;/li&gt;
&lt;li&gt;User-Agent使用自己的爬虫或者伪造浏览器的UA&lt;/li&gt;
&lt;li&gt;Referer一般填当前URL即可，考虑按照真是访问顺序添加referer，初始的referer可以使用google。&lt;/li&gt;
&lt;li&gt;Accept-Encoding 从gzip和deflate中选，好多网站会强行返回gzip的结果&lt;/li&gt;
&lt;li&gt;Aceept-Language根据情况选择，比如zh-CN, en-US&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;cookies&lt;/h1&gt;
&lt;p&gt;cookie是需要更新的
 &lt;/p&gt;
&lt;h1&gt;others&lt;/h1&gt;
&lt;p&gt;可能有一些人类不可见的陷阱链接，不要访问这些链接&lt;/p&gt;
&lt;h1&gt;爬取间隔自适应&lt;/h1&gt;
&lt;p&gt;就是已经限制了你这个IP的抓取，就不要傻傻重复试，怎么也得休息一会。网易云音乐操作起来比较简单，sleep一下就好了。其实sleep的间隔应该按情况累加，比如第一次sleep 10秒，发现还是被约束。那么久sleep 20秒... 这个间隔的设置已经自适应的最终效果是经验值。&lt;/p&gt;
&lt;p&gt;ref&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;http://www.cnblogs.com/jexus/p/5471665.html&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 14 Aug 2017 22:21:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-08-14:/posts/pa-chong-ru-he-jin-liang-mo-ni-liu-lan-qi.html</guid><category>计算机</category><category>爬虫</category></item><item><title>IPython main features</title><link>/posts/ipython-main-features.html</link><description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;use &lt;code&gt;?&lt;/code&gt; to get quick help, and use &lt;code&gt;??&lt;/code&gt; provides additional detail).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Searching through modules and namespaces with * wildcards, both when using the ? system and via the %psearch command.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;magic commands, % or %% prefixed commands&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alias facility for defining your own system aliases.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lines starting with ! are passed directly to the system shell, and using !! or var = !cmd captures shell output into python variables for further use.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;python variable prefixed with $ is expanded. A double $$ allows passing a literal $ to the shell (for access to shell and environment variables like PATH).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Filesystem navigation, via a magic %cd command, along with a persistent bookmark system (using %bookmark) for fast access to frequently visited directories.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A lightweight persistence framework via the %store command, which allows you to save arbitrary Python variables. These get restored when you run the %store -r command.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Automatic indentation and highlighting of code as you type (through the prompt_toolkit library).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;%macro command. Macros can be stored persistently via %store and edited via %edit.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Session logging (you can then later use these logs as code in your programs). Logs can optionally timestamp all input, and also store session output (marked as comments, so the log remains valid Python source code).
Session restoring: logs can be replayed to restore a previous session to the state where you left it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Auto-parentheses via the %autocall command: callable objects can be executed without parentheses: sin 3 is automatically converted to sin(3)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Auto-quoting: using &lt;code&gt;,&lt;/code&gt;, or &lt;code&gt;;&lt;/code&gt; as the first character forces auto-quoting of the rest of the line: &lt;code&gt;,my_function a b&lt;/code&gt; becomes automatically &lt;code&gt;my_function("a","b")&lt;/code&gt;, while ;my_function a b becomes my_function("a b").&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Extensible input syntax. You can define filters that pre-process user input to simplify input in special situations. This allows for example pasting multi-line code fragments which start with &amp;gt;&amp;gt;&amp;gt; or ... such as those from other python sessions or the standard Python documentation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Flexible configuration system. It uses a configuration file which allows permanent setting of all command-line options, module loading, code and file execution. The system allows recursive file inclusion, so you can have a base file with defaults and layers which load other customizations for particular projects.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Embeddable. You can call IPython as a python shell inside your own python programs. This can be used both for debugging code or for providing interactive abilities to your programs with knowledge about the local namespaces (very useful in debugging and data analysis situations).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Easy debugger access. You can set IPython to call up an enhanced version of the Python debugger (pdb) every time there is an uncaught exception. This drops you inside the code which triggered the exception with all the data live and it is possible to navigate the stack to rapidly isolate the source of a bug. The %run magic command (with the -d option) can run any script under pdb’s control, automatically setting initial breakpoints for you. This version of pdb has IPython-specific improvements, including tab-completion and traceback coloring support. For even easier debugger access, try %debug after seeing an exception.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Profiler support. You can run single statements (similar to profile.run()) or complete programs under the profiler’s control. While this is possible with standard cProfile or profile modules, IPython wraps this functionality with magic commands (see %prun and %run -p) convenient for rapid interactive work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Simple timing information. You can use the %timeit command to get the execution time of a Python statement or expression. This machinery is intelligent enough to do more repetitions for commands that finish very quickly in order to get a better estimate of their running time.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;In [1]: %timeit 1+1
10000000 loops, best of 3: 25.5 ns per loop

In [2]: %timeit [math.sin(x) for x in range(5000)]
1000 loops, best of 3: 719 µs per loop
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To get the timing information for more than one expression, use the %%timeit cell magic command.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Doctest support. The special %doctest_mode command toggles a mode to use doctest-compatible prompts, so you can use IPython sessions as doctest code. By default, IPython also allows you to paste existing doctests, and strips out the leading &amp;gt;&amp;gt;&amp;gt; and ... prompts in them.&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sun, 13 Aug 2017 03:31:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-08-13:/posts/ipython-main-features.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>图灵奖获得者John Hopcropt讲座</title><link>/posts/tu-ling-jiang-huo-de-zhe-john-hopcroptjiang-zuo.html</link><description>&lt;h1&gt;revolutions&lt;/h1&gt;
&lt;p&gt;agri revolutions 10000BC&lt;/p&gt;
&lt;p&gt;industrial revolution 1700 AD&lt;/p&gt;
&lt;p&gt;information revolution 2015 AD&lt;/p&gt;
&lt;h1&gt;jobs&lt;/h1&gt;
&lt;p&gt;there used to be elevator operators, but this job disappears, so will drivers&lt;/p&gt;
&lt;p&gt;what if 25% of the work force will be needed to produce all the goods and services&lt;/p&gt;
&lt;p&gt;we are living in a changing world, job in the future will require a sophisticated education well beyond that available today&lt;/p&gt;
&lt;h1&gt;China's education&lt;/h1&gt;
&lt;h1&gt;deep learning&lt;/h1&gt;
&lt;p&gt;many layered network, the first layers learn it's a image, the older layers learn the style and content but lose the iamge pixels&lt;/p&gt;
&lt;p&gt;SVM is a big advance, deep networks is a big advance, but we don't under deep networks&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 08 Aug 2017 17:06:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-08-08:/posts/tu-ling-jiang-huo-de-zhe-john-hopcroptjiang-zuo.html</guid><category>talks</category></item><item><title>小海星的王者荣耀攻略</title><link>/posts/xiao-hai-xing-de-wang-zhe-rong-yao-gong-lue.html</link><description>&lt;h1&gt;选人&lt;/h1&gt;
&lt;p&gt;良好的开始是成功的一半，如果在选人阶段就不和谐，基本就输了一半了。
一般一个队伍必须要的角色是坦克、射手、法师。虽然说不绝对，但是如果你是高手估计就不会来看攻略了，一般来说这三者是缺一不可的。如果你很想玩某个英雄，请直接先选，一般来说后选的人有责任根据阵容去补位，千万不要拖到最后一刻结果选了一个崩溃的阵容。当然游戏的风气基本上法师和射手都会被抢，这个时候如果你想赢，请还是补上坦克吧。其实这种事也就低端局容易出，只要分数稍微高一点，大家都懂，只要是为了赢而不是赌气的话，都会根据阵容换合适的英雄的。我理解大家尝鲜的心情，不过新手尽量还是不要频繁换不会用的英雄坑人坑己，尽量每个位置的英雄都熟一个，这样不论是却哪个位置都有的选。既然是认真用那几个英雄，当然可以搜一下英雄怎么用，倒不用像学习一样认真，但是了解一下别人的使用经验总比自己摸索要强很多，如果对面选了跟你同样的英雄还用的比你好，要多学习一下别人的思路和连招等等。
除了那3个位置之外，还有刺客和辅助可以选，定位多样性是好的，但很多刺客英雄对新手来说上手有难度，实在不行选个自己熟练的其它位置，队友通常也不会说你什么的；高端局不是这样，但也没必要来看攻略了- -。
召唤师技能这个因人而异，但关键还是讲究和英雄本身技能和定位的配合，虽然没有硬性要求，但是例如我就是喜欢闪现我什么英雄都带闪现，这并不是不可以，但是心态就是错的。某些辅助可能拿个治疗术，某些坦克和输出不足的战士可以拿斩杀，位移技能不够强的刺客可以拿急速或闪现等等。&lt;/p&gt;
&lt;h1&gt;开局分路&lt;/h1&gt;
&lt;p&gt;通常的思路，突进型坦克、战士、比较肉的刺客都是单走上路，刺客或者战士打野，法师走中路，射手和辅助走下路。辅助不一定是定位为辅助的英雄，像前期较弱势的坦克、法师等都可以和射手一起走下路。
当然阵容也是千奇百怪，关键是根据这个思路分路就行。射手一直非常脆弱，后期需要它输出很高，否则它就没有用啊，所以一般跟队友一起带线。而有些英雄可能前期并不需要它迅速发力，或者从始至终都只要放放控制技能就好，这样的英雄一般在开局是要辅助射手的。在射手、刺客、坦克的装备都没有太成型的时候，法师的技能放的快，伤害也不低，成为了战场关键，所以一般让法师走中路，中期可以带动全场，而且中路两边的草丛也比较危险，需要一个单打能力强的英雄。上路通常会碰到对面的射手加辅助的组合，想占便宜不是特别容易，所以就由血量高的英雄抗压。野区资源也是游戏中很重要的资源，打野相对安全，刺客后期的输出也是相当需要的，如果中期没有输出抢不上几个人头，后期杀不死人就废了，所以刺客一般不抗压，而是选择打野。1级打野有点困难，一般都会叫队友帮忙打红buff，一般还是不要跟打野的人抢buff。至于打野，一个人在两片野区来回刷应该是可行的，尽量别两个人都打野，每人一片野区不够分的，己方射手还要去抗压，得不偿失。如果队友有空的话倒是可以帮忙打小龙（暴君），前期打龙还是挺伤的，该跑就跑，打龙通常要看兵线，如果龙两侧的两路兵线队友都是劣势被堵在塔下不敢出去，这个时候打龙是非常危险的，尽量不要打。&lt;/p&gt;
&lt;h1&gt;什么是战士&lt;/h1&gt;
&lt;p&gt;比刺客肉，比坦克输出高&lt;/p&gt;
&lt;h1&gt;如何使用坦克&lt;/h1&gt;
&lt;p&gt;坦克一般两个活，一种是绕后别被发现，队友一交火注意力被吸引马上就贴上去打对面射手和好杀的法师，让对方输出高的射手和法师总是找不到位置输出，分隔战场，一打2的话队友暂时就是4打3，不过快没血的时候注意要留下跑路的技能。
另一种是对面刺客已经来打我们的射手了，用控制和减速技能拖住射手，让它尽快解决掉刺客。&lt;/p&gt;
&lt;h1&gt;坦克名字的由来&lt;/h1&gt;
&lt;p&gt;一开始网游里面的战士牧师法师体系，肉盾，治疗，输出三种主要角色。反正在魔兽世界里一直叫坦克的，外国人也是这么叫的。后来游戏里直接都这么写了。
在moba游戏中，这3种角色细分出很多定位。
坦克、战士、刺客。从肉到输出的一种平衡。赵云属于战士/刺客，最起码游戏说明里是这么写的- -。
输出里面分物理和法术两条路线，这也是对坦克出装路线的一个博弈。远程的就是射手和法师，近战的是刺客。
moba游戏里一般都是辅助，治疗只是其中比较小的分支，毕竟如果都治疗满了打不死那还玩毛啊。辅助一般是加状态、控制、治疗。辅助可以和坦克、战士、法师等结合一下，像芈月融合坦克和法师，蔡文姬治疗和控制，庄周也是坦克加法师。&lt;/p&gt;
&lt;h1&gt;大局观&lt;/h1&gt;
&lt;p&gt;我觉得很多队友打的都没有大局观，其实无非就是靠操作、靠脑子、靠经验。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;优势拆不了高地塔，己方输出够的话应该打龙，将优势转化为攻势。&lt;/li&gt;
&lt;li&gt;优势要强势，尽量拆塔，压制对方打兵和打野，压制经济，保证离胜利更近，当然战略上优先保证活着，操作失误死了就罢了，别看对方好几个残血就总想上，上之前一定要想好怎么回来；劣势尽可能不鲁莽开战，找机会打野带线，缩小差距，等待时机。&lt;/li&gt;
&lt;li&gt;打龙被看见也分几种情况，状态不好一定要跑。对面虎视眈眈的情况下，打龙很难，但是防止对面打应该比较容易。如果确实我方人数占优坦克刺客之类的应该有责任去打对面来骚扰的人。&lt;/li&gt;
&lt;li&gt;除了最外面的塔，其它的塔能守尽量守，特别是高地的塔。对面有大龙的情况下，尽量拖到大龙结束。己方刚打完大龙尽量等龙出来了再开战，要不万一团战输了龙都浪费了，最好是一开始保护好龙，当龙到对面半场的时候跟对方缠斗，让龙慢慢磨对方的塔。&lt;/li&gt;
&lt;li&gt;开局对线发现自己打不过对面的时候，要猥琐发育别浪，除非队友特意过来帮忙击杀。合理的利用己方防御塔保护自己甚至反杀实际上是用塔弥补了你英雄的劣势，他家的防御塔只能站着看，输出都浪费了。&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 08 Aug 2017 04:14:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-08-08:/posts/xiao-hai-xing-de-wang-zhe-rong-yao-gong-lue.html</guid><category>生活</category></item><item><title>Deep Learning 的一些思考</title><link>/posts/deep-learning-de-yi-xie-si-kao.html</link><description>&lt;h1&gt;问自己的问题&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;不同的算法对数据输入有不同的假设。应该如何预处理数据呢？&lt;/li&gt;
&lt;li&gt;如何对数据降维，使用什么降维方法呢？&lt;/li&gt;
&lt;li&gt;如何拆分数据集&lt;/li&gt;
&lt;li&gt;怎样知道是否出现了过拟合&lt;/li&gt;
&lt;li&gt;应该是用什么类型的性能指标&lt;/li&gt;
&lt;li&gt;不同的参数调整会如何影响模型的结果&lt;/li&gt;
&lt;li&gt;模型组合可以达到更好的结果吗&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;关于模型的基本假设&lt;/h1&gt;
&lt;p&gt;基本假设是一个系统运行的基础，然而如果假设是错误的呢？what if the grand truth is not true?
 
比如假设A 和 A&lt;em&gt;是类似的，喜欢 A 的用户也会喜欢 A&lt;/em&gt;，但是实际上用户只能在 A 和 A&lt;em&gt;之间选择一个呢，这时候向购买了 A 的顾客再推荐 A&lt;/em&gt;就不合适了.
 
比如用户已经买了钻戒用来求婚, 那么再推荐钻戒就不好了. 但是如果用户买了啤酒, 那再推荐一些啤酒也很好啊, 因为啤酒很快就喝完了...
 
维基百科上讲算法的文章一般都写得不怎么样&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sun, 06 Aug 2017 23:33:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-08-06:/posts/deep-learning-de-yi-xie-si-kao.html</guid><category>计算机</category><category>机器学习</category></item><item><title>我的编码规范</title><link>/posts/wo-de-bian-ma-gui-fan.html</link><description>&lt;h1&gt;指导思想&lt;/h1&gt;
&lt;p&gt;代码要做到&lt;a href="http://jixianqianduan.com/article-translation/2016/06/22/ways-to-write-self-documenting-js.html"&gt;自文档化&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Python&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;util模块使用util.py（单数形式），而不是utils.py，因为python标准库使用的是util&lt;/li&gt;
&lt;li&gt;模块的命名：如果只有一个类，比如ItemProcessor，那么可以命名为item_processor.py，否则不能使用名词命名，使用描述性的短语『名词+动词』&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;django&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用 queryset 的时候尽量使用 &lt;code&gt;.only()&lt;/code&gt;，以减少对数据库的压力&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;devops&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;using mosh is recommended over plain ssh&lt;/li&gt;
&lt;li&gt;using tmux is recommended over screen&lt;/li&gt;
&lt;li&gt;all directories/repositories should use underscore NOT hyphen&lt;/li&gt;
&lt;li&gt;应该使用json schema来验证json是否合规&lt;/li&gt;
&lt;li&gt;每一个调用方都应该使用token或者caller来表明自己的身份，拒绝任何没有声明身份的服务。而生成token应该使用库来实现，而不是服务，以避免所有的服务都依赖token检测。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;coding&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;变量跨越的行数太多，否则不能看懂其中变量的用途，尽量是变量的生存周期短&lt;/li&gt;
&lt;li&gt;函数不能写太多行（20行以内为宜，最多40行），不然读起来太费劲了，根本不知道是什么函数，如果太长，需要拆分&lt;/li&gt;
&lt;li&gt;不要去变换API的签名，如果需要更改，做一个新的版本&lt;/li&gt;
&lt;li&gt;如果没有很好的名字，使用ret作为返回值的名称&lt;/li&gt;
&lt;li&gt;如果协议容易出现问题，那么在thrift中增加一个字version，每次校验是否是同一个版本&lt;/li&gt;
&lt;li&gt;variable names should use simple words if possible&lt;/li&gt;
&lt;li&gt;不要起名字相同的函数&lt;/li&gt;
&lt;li&gt;常量的定义，要把每个维度正交化，使用每个位来表示一个开关，或者几个位来表示一个组合&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;思维&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;如果在编码实现的过程中发现实际情况更加复杂，也不要直接改变思路，先实现原先想好的简单情况，在做拓展&lt;/li&gt;
&lt;li&gt;类应该是 sans-IO的，如果需要IO，就写一些 load 函数，但是不要在构造函数中调用&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Indent, spaces and newline&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;use spaces around &lt;code&gt;+ - * / = ==&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;use spaces only after &lt;code&gt;,&lt;/code&gt; &lt;code&gt;;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;one blank line between functions and two between classes&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;\n&lt;/code&gt; as line endings&lt;/li&gt;
&lt;li&gt;end file with a new line&lt;/li&gt;
&lt;li&gt;always use 4 spaces to indent&lt;/li&gt;
&lt;li&gt;always use K&amp;amp;R braces&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Naming and variables&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;never use HN but prefix &lt;code&gt;is&lt;/code&gt; for bool flags or methods e.g. &lt;code&gt;is_open&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;use CamelCase for class name&lt;/li&gt;
&lt;li&gt;use camelCase or snake_case for function, variable, method name, just be consistent&lt;/li&gt;
&lt;li&gt;declare local variable as late as possible&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;nullptr&lt;/code&gt; not &lt;code&gt;NULL&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Headers&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;header file should use &lt;code&gt;*.hpp&lt;/code&gt; NOT &lt;code&gt;*.h&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;always use #define guards &lt;/li&gt;
&lt;li&gt;Reduce the number of #include files in header files. It will reduce build times. Instead, put include files in source code files and use forward declarations in header files. If a class in a header file does not need to know the size of a data member class or does not need to use the class's members then forward declare the class instead of including the file with #include. To avoid the need of a full class declaration, use references (or pointers) and forward declare the class. &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Namespaces&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;never use &lt;code&gt;using namespace std&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;其他&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;put a space after &lt;code&gt;if&lt;/code&gt; &lt;code&gt;for&lt;/code&gt; &lt;code&gt;while&lt;/code&gt; so that we know it's not invokation&lt;/li&gt;
&lt;li&gt;never use if (someVar == true) or if (someVar == false), it's silly&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Documnetation and comments&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Documentations explain how to use code, and are for the users of your code&lt;/li&gt;
&lt;li&gt;Comments explain why, and are for the maintainers of your code&lt;/li&gt;
&lt;li&gt;use javadoc for documentations&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;FIX&lt;/code&gt; &lt;code&gt;BUG&lt;/code&gt; &lt;code&gt;TODO&lt;/code&gt; &lt;code&gt;???&lt;/code&gt; &lt;code&gt;!!!&lt;/code&gt; to show different kinds of comments&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;p&gt;http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html
http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml
https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Coding_Style
http://www.yolinux.com/TUTORIALS/LinuxTutorialC++CodingStyle.html&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sat, 05 Aug 2017 03:29:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-08-05:/posts/wo-de-bian-ma-gui-fan.html</guid><category>想法</category><category>计算机</category></item><item><title>Python 的 import 系统与 importlib</title><link>/posts/python-de-import-xi-tong-yu-importlib.html</link><description>&lt;p&gt;首先&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;init&lt;/strong&gt;.py is first called before the actual import&lt;/p&gt;
&lt;p&gt;if you have  the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;foobar/
    __init__.py
    baz.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;runing import foobar will not make foobar.baz available
you have to add from . import baz to &lt;strong&gt;init&lt;/strong&gt;.py&lt;/p&gt;
&lt;p&gt;add &lt;strong&gt;all&lt;/strong&gt; to &lt;strong&gt;init.&lt;/strong&gt;.py to control which to be imported by import *&lt;/p&gt;
&lt;h2&gt;relative import&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;grok&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;..B&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;
&lt;span class="n"&gt;relavtive&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;only&lt;/span&gt; &lt;span class="nn"&gt;works&lt;/span&gt; &lt;span class="nn"&gt;when&lt;/span&gt; &lt;span class="nn"&gt;using&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt;
&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;mypackage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spam&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;by calling import foo, foo/&lt;strong&gt;init&lt;/strong&gt;.py will be called&lt;/p&gt;
&lt;h1&gt;常见的问题&lt;/h1&gt;
&lt;p&gt;implicit import&lt;/p&gt;
&lt;p&gt;需要注意的是 python2 中支持隐式的从当前文件import当前目录的文件。 这个功能在python3 中已经被去掉了。&lt;/p&gt;
&lt;h1&gt;Q&amp;amp;A&lt;/h1&gt;
&lt;p&gt;如何处理循环引用的问题？&lt;/p&gt;
&lt;p&gt;把一些import语句放到真正需要他们的地方， 比如某个函数里面&lt;/p&gt;
&lt;h1&gt;importlib&lt;/h1&gt;
&lt;p&gt;之所以想研究importlib，是因为leader提到了Thrift应该把源文件提交到仓库中，而不是把编译后的文件提交到仓库中，而python运行是没有预编译机制的，那么就需要一套机制来在runtime动态的编译加载thrift文件。第一个想法当然是写一个import_thrift函数，大概是这样的：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;import_thrfit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;_compile_thrift&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# compile *.thrift files&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;module_name&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;module_name&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但是，显然直接使用import语句是不可以的，因为import是一个语句，后边跟的不能是变量。这时候就需要import背后的库importlib的帮助了。再者，当多次调用这个函数的时候，我们希望有缓存，而不是每次编译一次&lt;/p&gt;
&lt;h1&gt;介绍importlib&lt;/h1&gt;
&lt;p&gt;importlib实现了两个功能，1. 提供了import的实现，2. 提供了import_module函数，这样我们就可以实现自己的import系统。本文中我们主要关注第二点。&lt;/p&gt;
&lt;h2&gt;importlib.import_module&lt;/h2&gt;
&lt;p&gt;importlib.import_module(name, package=None) 如果name是相对包名，name将从package中相对导入这个包，比如&lt;code&gt;..mod&lt;/code&gt;，package是&lt;code&gt;package.subpkg&lt;/code&gt;，将会导入package.mod这个包。如果name是绝对包名，那就直接导入。需要注意的是在上述例子中，返回的是package.mod这个名字而不是单独的mod名称。&lt;/p&gt;
&lt;p&gt;有了这个函数我们就可以实现 import_thrift 了&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sat, 05 Aug 2017 01:01:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-08-05:/posts/python-de-import-xi-tong-yu-importlib.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>iterm2 tricks</title><link>/posts/iterm2-tricks.html</link><description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果tmux，vim等程序启用了鼠标支持，只需要使用alt+鼠标就可以轻松拷贝了~&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以隐藏标题栏 Profile-&amp;gt;Window-&amp;gt;Style: No Title Bar&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sat, 29 Jul 2017 23:19:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-07-29:/posts/iterm2-tricks.html</guid><category>小技巧</category><category>小工具</category><category>计算机</category><category>通用工具</category></item><item><title>python-readability 源码阅读</title><link>/posts/python-readability-yuan-ma-yue-du.html</link><description>&lt;p&gt;readability 是一个可以从杂乱无章的网页中抽取出无特殊格式，适合再次排版阅读的文章的库，比如我们常见的手机浏览器的阅读模式很大程度上就是采用的这个库，还有 evernote 的 webclipper 之类的应用也都是利用了类似的库。readability 的各个版本都源自readability.js这个库，之前尝试阅读过js版本，无关的辅助函数太多了，而且 js 的 dom api 实在称不上优雅，读起来晦涩难通，星期天终于有时间拜读了一下python-readability的代码。&lt;/p&gt;
&lt;p&gt;readability核心是一个Document类，这个类代表了一个 HTML 文件，同时可以输出一个格式化的文件&lt;/p&gt;
&lt;h1&gt;几个核心方法和概念&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;summary，抽取一篇文章
&lt;/em&gt;get_article， 获得一篇文章&lt;/p&gt;
&lt;h2&gt;summary&lt;/h2&gt;
&lt;p&gt;summary 方法是核心方法，可以抽取出一篇文章。可能需要对文章抽取多次才能获得符合条件的文章，这个方法的核心思想是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. 第一次尝试抽取设定 ruthless，也就是强力模式，可能会误伤到一些标签
2. 把给定的 input 解析一次并记录到 self.html，并去除所有的 script，sytle 标签，因为这些标签并不贡献文章内容
3. 如果在强力模式，使用remove_unlikely_candidates去掉不太可能的候选
4. transform_misused_divs_into_ps把错误使用的 div 转换成 p 标签，这样就不用考虑 div 标签了，其实这步挺关键的。其实还有一些其他的处理需要使用。
5. 使用score_paragraphs给每段（paragraph）打分
6. 使用select_best_candidates获得最佳候选（candidates）
7. 选出最佳候选，如果选出的话，调用 get_article 抽取文章
8. 如果没有选出，恢复到非强力模式再试一次，还不行的话就直接把 html 返回
9. 清理文章，使用 sanitize 方法
10. 如果得到的文章太短了，尝试恢复到费强力模式重试一次

强力模式和非强力模式的区别就在于是否调用了 remove_unlikely_candidates
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Yifei's Notes&lt;/h2&gt;
&lt;p&gt;公司的做法在于： 1）transform那一步修正了更多的错误。2）在得到best node之后记录了xpath，方便抽取下一页内容。3）抽取后检查文章长度。4）如果抽取失败，不是返回文章，而是返回空&lt;/p&gt;
&lt;p&gt;下面按照在 summary 出场顺序依次介绍~&lt;/p&gt;
&lt;h2&gt;remove_unlikely_candidates&lt;/h2&gt;
&lt;p&gt;匹配标签的 class 和 id，根据unlikelyCandidatesRe和okMaybeItsACandidate这个两个表达式删除一部分节点。
unlikelyCandidatesRe：combx|comment|community|disqus|extra|... 可以看出是一些边缘性的词汇
okMaybeItsACandidateRe: and|article|body|column|main|shadow... 可以看出主要是制定正文的词汇&lt;/p&gt;
&lt;h2&gt;transform_misused_divs_into_paragraphs&lt;/h2&gt;
&lt;p&gt;对所有的 div 节点，如果没有 divToPElementsRe 这个表达式里的标签，就把他转化为 p
再对剩下的 div 标签中，如果有文字的话，就把文字转换成一个 p 标签，插入到当前节点，如果子标签有 tail节点的话，也把他作为 p 标签插入到当前节点中
把 br 标签删掉&lt;/p&gt;
&lt;h2&gt;socore_node&lt;/h2&gt;
&lt;p&gt;按照tag、 class 和 id 如果符合负面词汇的正则，就剪掉25分，如果符合正面词汇的正则，就加上25分
div +5 分， pre、td、backquote +3 分
address、ol、ul、dl、dd、dt、li、form -3分
h1-h6 th -5 分&lt;/p&gt;
&lt;h2&gt;score_paragraphs&lt;/h2&gt;
&lt;p&gt;首先定义常量，MIN_LEN 最小成段文本长度
对于所有的 p，pre，td 标签，找到他们的父标签和祖父标签，文本长度小于 MIN_LEN 的直接忽略
对父标签打分（score_node），并放入排序队列
祖父标签也打分，并放入排序队列
开始计算当前节点的内容分（content_socre) 基础分1分，按照逗号断句，每句一分，每100字母+1分，至少三分
父元素加上当前元素的分，祖先元素加上1/2
链接密度 链接 / (文本 + 链接)
最终得分 之前的分 * （1 - 链接密度）&lt;/p&gt;
&lt;p&gt;注意，当期标签并没有加入 candidates，父标签和祖父标签才加入
累计加分，如果一个元素有多个 p，那么会把所有子元素的content score都加上&lt;/p&gt;
&lt;h2&gt;select_best_candidate&lt;/h2&gt;
&lt;p&gt;就是 ordered 中找出最大的&lt;/p&gt;
&lt;h2&gt;get_article&lt;/h2&gt;
&lt;p&gt;对于最佳候选周围的标签，给予复活的机会，以避免被广告分开的部分被去掉，阈值是10分或者最佳候选分数的五分之一。如果是 p 的话，node_length &amp;gt; 80 and link_density &amp;lt; 0.25 或者 长度小于80，但是没有连接，而且最后是句号&lt;/p&gt;
&lt;h1&gt;思考&lt;/h1&gt;
&lt;p&gt;readability之所以能够work的原因，很大程度上是基于html本身是一篇文档，数据都已将在html里了，然后通过操作DOM获得文章。而在前端框架飞速发展的今天，随着react和vue等的崛起，越来越多的网站采用了动态加载，真正的文章存在了页面的js中甚至需要ajax加载，这时在浏览器中使用readability.js虽然依然可以（因为浏览器已经加载出了DOM），但是如果用于抓取目的的话，需要执行一遍js，得到渲染过的DOM才能提取文章，如果能够有一个算法，直接识别出大段的文字，而不是依赖DOM提取文章就好了~&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sat, 29 Jul 2017 22:11:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-07-29:/posts/python-readability-yuan-ma-yue-du.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>忙等待</title><link>/posts/mang-deng-dai.html</link><description>&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;while True:
    pass 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;this is busy waiting&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;while True:
    time.sleep(10)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;this is not busy waiting, bucause cpu are free to do other things, and only need trivial cpu cycles&lt;/p&gt;
&lt;p&gt;http://stackoverflow.com/questions/529034/python-pass-or-sleep-for-long-running-processes&lt;/p&gt;
&lt;p&gt;busy waiting is considered as anti-pattern, but using it in spinning-lock is ok&lt;/p&gt;
&lt;p&gt;should use select if we need to wait for something&lt;/p&gt;
&lt;p&gt;https://en.wikipedia.org/wiki/Busy_waiting&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Thu, 27 Jul 2017 23:34:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-07-27:/posts/mang-deng-dai.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>html Node vs Element</title><link>/posts/html-node-vs-element.html</link><description>&lt;ul&gt;
&lt;li&gt;Node vs Element&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HTML Document consists of different node, element is one type of node.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NodeList vs HTMLCollection&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;NodeList is a collection of node, HTMLCollection is a collection of element.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTMLCollection vs NodeList vs Array&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HTMLCollection 和 NodeList 都是动态的,会随着 DOM 的变化而变化&lt;/p&gt;
&lt;p&gt;Array 是静态的数据结构&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Thu, 27 Jul 2017 02:41:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-07-27:/posts/html-node-vs-element.html</guid><category>JavaScript</category><category>大前端</category><category>计算机</category></item><item><title>make 和 premake</title><link>/posts/make-he-premake.html</link><description>&lt;h1&gt;Rule&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sepreated&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;spaces&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;dependencies&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Basic usage&lt;/h1&gt;
&lt;p&gt;in most projects, we have a &lt;code&gt;.h&lt;/code&gt; file for functiont interfaces, and the whole program depends on it.
typically, all &lt;code&gt;.o&lt;/code&gt; files are compiled from corresponding &lt;code&gt;.c&lt;/code&gt; source files&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;cc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; gcc              &lt;span class="c1"&gt;# marco&lt;/span&gt;
&lt;span class="nv"&gt;prom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; calc
&lt;span class="nv"&gt;deps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; calc.h         &lt;span class="c1"&gt;# the one .h to rule them all&lt;/span&gt;
&lt;span class="nv"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; main.o getch.o getop.o stack.o
&lt;span class="nf"&gt;$(prom)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;obj&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;CC&lt;span class="k"&gt;)&lt;/span&gt; -o &lt;span class="k"&gt;$(&lt;/span&gt;prom&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;obj&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;%.o&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; %.&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;deps&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;      &lt;span class="c"&gt;#pattern rule, which means all .o depends on all .c and $(deps)&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;CC&lt;span class="k"&gt;)&lt;/span&gt; -c $&amp;lt; -o &lt;span class="nv"&gt;$@&lt;/span&gt; &lt;span class="c1"&gt;# $&amp;lt; means the depender and $@ means the dependee&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Functions&lt;/h1&gt;
&lt;p&gt;we can make the file even smarter by using makefile funcions
Makefile function syntax $(func params)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;cc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; gcc
&lt;span class="nv"&gt;prom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; calc
&lt;span class="nv"&gt;deps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;shell find ./ -name &lt;span class="s2"&gt;&amp;quot;*.h&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# find all header files using the builtin shell function&lt;/span&gt;
&lt;span class="nv"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;shell find ./ -name &lt;span class="s2"&gt;&amp;quot;*.c&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;src:%.c&lt;span class="o"&gt;=&lt;/span&gt;%.o&lt;span class="k"&gt;)&lt;/span&gt; 
&lt;span class="nf"&gt;$(prom)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;obj&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;CC&lt;span class="k"&gt;)&lt;/span&gt; -o &lt;span class="k"&gt;$(&lt;/span&gt;prom&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;obj&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;%.o&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; %.&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;deps&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;CC&lt;span class="k"&gt;)&lt;/span&gt; -c $&amp;lt; -o &lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;                              &lt;span class="c"&gt;# empty target to run a commnad&lt;/span&gt;
    rm -rf &lt;span class="k"&gt;$(&lt;/span&gt;obj&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;prom&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Reference&lt;/h1&gt;
&lt;p&gt;http://www.epubit.com.cn/article/546&lt;/p&gt;
&lt;h1&gt;Autotools&lt;/h1&gt;
&lt;p&gt;Autotools is a collection of three tools:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;autoconf — This is used to generate the “configure” shell script. As I mentioned earlier, this is the script that analyzes your system at compile-time. For example, does your system use “cc” or “gcc” as the C compiler?&lt;/li&gt;
&lt;li&gt;automake — This is used to generate Makefiles. It uses information provided by Autoconf. For example, if your system has “gcc”, it will use “gcc” in the Makefile. Or, if it finds “cc” instead, will use “cc” in the Makefile.&lt;/li&gt;
&lt;li&gt;libtool — This is used to create shared libraries, platform-independently.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ autoscan                    &lt;span class="c1"&gt;#--&amp;gt; creates `autoscan.scan` file&lt;/span&gt;
$ mv autoscan.scan to &lt;span class="sb"&gt;`&lt;/span&gt;autoscan.ac&lt;span class="sb"&gt;`&lt;/span&gt; file
$ autoconf                    &lt;span class="c1"&gt;# --&amp;gt; use autoconf.ac to create `configure` file&lt;/span&gt;
&lt;span class="c1"&gt;# we need a `makefile.in` as the template for configure file to use&lt;/span&gt;
$ automake                    &lt;span class="c1"&gt;# --&amp;gt; use `makefile.in` to create `makefile`&lt;/span&gt;
$ autoheader                  &lt;span class="c1"&gt;# --&amp;gt; generate `config.h.in`&lt;/span&gt;
$ ./configure                 &lt;span class="c1"&gt;# --&amp;gt; generate the makefile and config.h&lt;/span&gt;
$ make &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install        &lt;span class="c1"&gt;# horry!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To be continued at:
http://markuskimius.wikidot.com/programming:tut:autotools:5&lt;/p&gt;
&lt;h1&gt;premake 基本用法&lt;/h1&gt;
&lt;p&gt;premake 可以生成makefile
premake gmake
生成的 makefile 支持 
make 默认构建
make help   查看帮助文件
make config=release 按照 release 构建
make clean  清除构建
make config=release clean   清除 release 构建&lt;/p&gt;
&lt;p&gt;premake5脚本的名字是 premake5.lua, 本质上就是一个 lua 脚本, 每一行都是一个函数调用, 因为参数恰好是字符串或者 table, 所以可以省略括号&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-- premake5.lua
workspace &amp;quot;HelloWorld&amp;quot;
   configurations { &amp;quot;Debug&amp;quot;, &amp;quot;Release&amp;quot; }
project &amp;quot;HelloWorld&amp;quot;
   kind &amp;quot;ConsoleApp&amp;quot;
   language &amp;quot;C&amp;quot;
   targetdir &amp;quot;bin/%{cfg.buildcfg}&amp;quot;
files { &amp;quot;**.h&amp;quot;, &amp;quot;**.c&amp;quot; }
filter &amp;quot;configurations:Debug&amp;quot;
      defines { &amp;quot;DEBUG&amp;quot; }
      flags { &amp;quot;Symbols&amp;quot; }
filter &amp;quot;configurations:Release&amp;quot;
      defines { &amp;quot;NDEBUG&amp;quot; }
      optimize &amp;quot;On&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;常用函数&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;workspace   相当于 vs 的 solution   
project project 
kind     指定编译目标类型   ConsoleApp WindowedApp    SharedLib StaticLib     
location     指定编译目标目录   
define   定义常量   
files   添加文件    文件名 *.ext **.ext
removefiles  屏蔽文件   
links   链接库 
libdirs 添加库目录   
configurations  指定不同的编译选项   需要通过 filter {&amp;quot;configurations:&amp;lt;name&amp;gt;&amp;quot;} 指定具体选项
platforms    指定不同的平台    和 vs 的 platform 类似, 但是也需要使用 filter 定义
includedirs 添加 include 目录   
optimize     设置优化选项  Off On
buildoptions    编译选项    比如-std=c99
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;作用范围&lt;/h2&gt;
&lt;p&gt;作用范围会发生继承, 使用 &lt;code&gt;workspce '*'&lt;/code&gt; 或者 &lt;code&gt;project '*'&lt;/code&gt;代表选中了所有workspace 或者 project&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;premake install

newaction {
   trigger     = &amp;quot;install&amp;quot;,
   description = &amp;quot;Install the software&amp;quot;,
   execute = function ()
      -- copy files, etc. here
   end
}
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Thu, 27 Jul 2017 01:21:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-07-27:/posts/make-he-premake.html</guid><category>C 语言</category><category>编程语言</category><category>计算机</category></item><item><title>C的编译、调试与静态检查</title><link>/posts/cde-bian-yi-diao-shi-yu-jing-tai-jian-cha.html</link><description>&lt;h1&gt;使用Clang/gcc 常用的选项&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-std=c11     设定标准为 c11
-Wall   显示所有警告
-O2 二级优化, 通常够用了
-march=native   释放本地CPU所有指令
-g  如果需要使用 gdb 调试的话

-Dmarco=value    定义宏
-Umarco undef 宏
-Ipath   添加到 include
-llibrary   链接到 liblibbrary.a 文件
-Lpath   添加到链接 

-c  只编译而不链接
-S  生成汇编代码, 但是不生成机器代码
-E   只预处理

-fopenmp     打开 OpenMP 支持
-pthread     添加 pthread 支持
-Werror  把所有 warning 显示为 error
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;如何生成静态库, 动态库&lt;/h1&gt;
&lt;p&gt;see:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;http://www.adp-gmbh.ch/cpp/gcc/create_lib.html&lt;/li&gt;
&lt;li&gt;http://stackoverflow.com/questions/2734719/how-to-compile-a-static-library-in-linux&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;静态库&lt;/h2&gt;
&lt;p&gt;静态库的创建原理是把不同的目标文件打包在一起, 所以分两步&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;gcc -c -o mean.o mean.c&lt;/li&gt;
&lt;li&gt;ar rcs libmean.a mean.o
生成的库的名字多了 lib 和. a&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用 &lt;code&gt;gcc -static main.c -L. -lmean -o a.out&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;动态库&lt;/h2&gt;
&lt;p&gt;动态库需要生成 PIC(地址无关代码),&lt;/p&gt;
&lt;p&gt;-Wl  后面的命令会传递给链接器 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gcc -c -fPIC calc_mean.c -o calc_mean.o # 大写的-fPIC 比- fpic 更通用, 虽然在 x86平台上没有区别
gcc -shared -Wl,-soname,libmean.so.1 -o libmean.so.1.0.1  calc_mean.o
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用 &lt;code&gt;gcc main.c -o a.out -L. -lmean&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;LD_LIBRARY_PATH=.
./dynamically_linked
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;最常用的指令&lt;/h2&gt;
&lt;p&gt;cc -Wall -std=c11 source.c -o executable
g++ -Wall -std=c++11 source.cc -o executable&lt;/p&gt;
&lt;h1&gt;tips&lt;/h1&gt;
&lt;p&gt;处理二进制数据时尽量使用uint8_t，而不要使用char&lt;/p&gt;
&lt;p&gt;函数的参数类型（接口）尽量使用 &lt;code&gt;void*&lt;/code&gt;
不要这么做:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;void processAddBytesOverflow(uint8_t *bytes, uint32_t len) {
    for (uint32_t i = 0; i &amp;lt; len; i++) {
        bytes[0] += bytes[i];
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这么做:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;void processAddBytesOverflow(void *input, uint32_t len) {
    uint8_t *bytes = input;
for (uint32_t i = 0; i &amp;lt; len; i++) {
        bytes[0] += bytes[i];
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;来自 &lt;a href="https://matt.sh/howto-c"&gt;https://matt.sh/howto-c&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;提交仓库前，统一格式，而不应该在编写过程中注意&lt;/p&gt;
&lt;p&gt;不要使用malloc，总是使用calloc，因为清零的性能损失太小了，但是却经常忘记. 这一点存疑&lt;/p&gt;
&lt;p&gt;尽量保证在编写内存获取代码的时候就写好释放代码&lt;/p&gt;
&lt;h2&gt;内存泄漏的排查&lt;/h2&gt;
&lt;p&gt;核心思想，malloc/free不配对&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;windows&lt;/span&gt;&lt;span class="err"&gt;，使用&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;crtdbg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define _CRTDBG_MAP_MALLOC&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;crtdbg.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="n"&gt;_CrtDumpMemoryLeaks&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;linux，使用mtrace实现动态检查
使用valgrind实现静态检查
valgrind --leak-check=full ./a.out
注意查看definitely lost和possible lost&lt;/p&gt;
&lt;h2&gt;调试的工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;valgrind 排查内存问题&lt;/li&gt;
&lt;li&gt;strace/ltrace 查看系统调用和库调用&lt;/li&gt;
&lt;li&gt;pmap 查看内存使用情况&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;测试&lt;/h2&gt;
&lt;h2&gt;rr&lt;/h2&gt;
&lt;p&gt;mozilla's rr is a promising tool to replace gdb. it can replay the recored execution of a program, so you can replay it until you find out the bug.&lt;/p&gt;
&lt;p&gt;http://rr-project.org/&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Thu, 27 Jul 2017 01:14:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-07-27:/posts/cde-bian-yi-diao-shi-yu-jing-tai-jian-cha.html</guid><category>C 语言</category><category>编程语言</category><category>计算机</category></item><item><title>PEP8 中需要注意的地方</title><link>/posts/pep8-zhong-xu-yao-zhu-yi-de-di-fang.html</link><description>&lt;h1&gt;spaces&lt;/h1&gt;
&lt;p&gt;If operators with different priorities are used, consider adding whitespace around the operators with the lowest priority(ies). Use your own judgment; however, never use more than one space, and always have the same amount of whitespace on both sides of a binary operator.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Yes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;submitted&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;hypot2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;No&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;submitted&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;hypot2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;comments&lt;/h1&gt;
&lt;p&gt;Compound statements (multiple statements on the same line) are generally discouraged.&lt;/p&gt;
&lt;p&gt;Comments that contradict the code are worse than no comments. Always make a priority of keeping the comments up-to-date when the code changes!&lt;/p&gt;
&lt;p&gt;Comments should be complete sentences. If a comment is a phrase or sentence, its first word should be capitalized, unless it is an identifier that begins with a lower case letter (never alter the case of identifiers!).&lt;/p&gt;
&lt;p&gt;If a comment is short, the period at the end can be omitted. Block comments generally consist of one or more paragraphs built out of complete sentences, and each sentence should end in a period.
You should use two spaces after a sentence-ending period.
When writing English, follow Strunk and White.
Python coders from non-English speaking countries: please write your comments in English, unless you are 120% sure that the code will never be read by people who don't speak your language.&lt;/p&gt;
&lt;p&gt;Conventions for writing good documentation strings (a.k.a. "docstrings") are immortalized in PEP 257 .
&lt;em&gt; Write docstrings for all public modules, functions, classes, and methods. Docstrings are not necessary for non-public methods, but you should have a comment that describes what the method does. This comment should appear after thedef line.
&lt;/em&gt; PEP 257 describes good docstring conventions. Note that most importantly, the """ that ends a multiline docstring should be on a line by itself, e.g.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;&amp;quot;&amp;quot;Return a foobang

Optional plotz says to frobnicate the bizbaz first.
&amp;quot;&amp;quot;&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For one liner docstrings, please keep the closing """ on the same line.&lt;/p&gt;
&lt;h1&gt;Nameing Conventions&lt;/h1&gt;
&lt;p&gt;Overriding Principle
Names that are visible to the user as public parts of the API should follow conventions that reflect usage rather than implementation.&lt;/p&gt;
&lt;p&gt;Names to Avoid
Never use the characters 'l' (lowercase letter el), 'O' (uppercase letter oh), or 'I' (uppercase letter eye) as single character variable names.
In some fonts, these characters are indistinguishable from the numerals one and zero. When tempted to use 'l', use 'L' instead.&lt;/p&gt;
&lt;p&gt;Exception Names
Because exceptions should be classes, the class naming convention applies here. However, you should use the suffix "Error" on your exception names (if the exception actually is an error).&lt;/p&gt;
&lt;p&gt;When implementing ordering operations with rich comparisons, it is best to implement all six operations ( &lt;strong&gt;eq&lt;/strong&gt; ,&lt;strong&gt;ne&lt;/strong&gt; , &lt;strong&gt;lt&lt;/strong&gt; , &lt;strong&gt;le&lt;/strong&gt; , &lt;strong&gt;gt&lt;/strong&gt; , &lt;strong&gt;ge&lt;/strong&gt; ) rather than relying on other code to only exercise a particular comparison.
To minimize the effort involved, the functools.total_ordering() decorator provides a tool to generate missing comparison methods.
PEP 207 indicates that reflexivity rules are assumed by Python. Thus, the interpreter may swap y &amp;gt; x with x &amp;lt; y , y &amp;gt;= xwith x &amp;lt;= y , and may swap the arguments of x == y and x != y . The sort() and min() operations are guaranteed to use the &amp;lt; operator and the max() function uses the &amp;gt; operator. However, it is best to implement all six operations so that confusion doesn't arise in other contexts.&lt;/p&gt;
&lt;h1&gt;lambda&lt;/h1&gt;
&lt;p&gt;Always use a def statement instead of an assignment statement that binds a lambda expression directly to an identifier.
Yes:
def f(x): return 2&lt;em&gt;x
No:
f = lambda x: 2&lt;/em&gt;x
The first form means that the name of the resulting function object is specifically 'f' instead of the generic &lt;code&gt;'&amp;lt;lambda&amp;gt;'&lt;/code&gt;. This is more useful for tracebacks and string representations in general. The use of the assignment statement eliminates the sole benefit a lambda expression can offer over an explicit def statement (i.e. that it can be embedded inside a larger expression)&lt;/p&gt;
&lt;h1&gt;exceptions&lt;/h1&gt;
&lt;p&gt;Design exception hierarchies based on the distinctions that code catching the exceptions is likely to need, rather than the locations where the exceptions are raised. Aim to answer the question "What went wrong?" programmatically, rather than only stating that "A problem occurred" (see PEP 3151 for an example of this lesson being learned for the builtin exception hierarchy)&lt;/p&gt;
&lt;p&gt;Class naming conventions apply here, although you should add the suffix "Error" to your exception classes if the exception is an error. Non-error exceptions that are used for non-local flow control or other forms of signaling need no special suffix.&lt;/p&gt;
&lt;p&gt;Use exception chaining appropriately. In Python 3, "raise X from Y" should be used to indicate explicit replacement without losing the original traceback.&lt;/p&gt;
&lt;p&gt;When deliberately replacing an inner exception (using "raise X" in Python 2 or "raise X from None" in Python 3.3+), ensure that relevant details are transferred to the new exception (such as preserving the attribute name when converting KeyError to AttributeError, or embedding the text of the original exception in the new exception message).&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Thu, 27 Jul 2017 01:04:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-07-27:/posts/pep8-zhong-xu-yao-zhu-yi-de-di-fang.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>python signal</title><link>/posts/python-signal.html</link><description>&lt;p&gt;Any thread can perform an alarm(), getsignal(), pause(), setitimer() or getitimer(); only the main thread can set a new signal handler, and the main thread will be the only one to receive signals&lt;/p&gt;
&lt;h1&gt;default handlers:&lt;/h1&gt;
&lt;p&gt;signal.SIG_DFL&lt;/p&gt;
&lt;p&gt;This is one of two standard signal handling options; it will simply perform the default function for the signal. For example, on most systems the default action for SIGQUIT is to dump core and exit, while the default action for SIGCHLD is to simply ignore it.&lt;/p&gt;
&lt;p&gt;signal.SIG_IGN&lt;/p&gt;
&lt;p&gt;This is another standard signal handler, which will simply ignore the given signal.&lt;/p&gt;
&lt;h1&gt;assign handerls:&lt;/h1&gt;
&lt;p&gt;signal.signal(signalnum, handler)&lt;/p&gt;
&lt;p&gt;Set the handler for signal signalnum to the function handler. handler can be a callable Python object taking two arguments&lt;/p&gt;
&lt;p&gt;handler: handler(signum, frame)&lt;/p&gt;
&lt;h1&gt;example&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Signal handler called with signal&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;signum&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;IOError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Couldn&amp;#39;t open device!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Set the signal handler and a 5-second alarm&lt;/span&gt;
&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGALRM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;alarm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# This open() may hang indefinitely&lt;/span&gt;
&lt;span class="n"&gt;fd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/dev/ttyS0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;O_RDWR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;alarm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;          &lt;span class="c1"&gt;# Disable the alarm&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Reference:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;https://docs.python.org/2/library/signal.html&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 24 Jul 2017 19:15:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-07-24:/posts/python-signal.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>shell 编程教程</title><link>/posts/shell-bian-cheng-jiao-cheng.html</link><description>&lt;h1&gt;变量和值&lt;/h1&gt;
&lt;p&gt;variables are referenced by $var or ${var}. Global variables are visible to all sub bash sessions, and are often called env variables, local variables are only visible to local session, not subsessions.&lt;/p&gt;
&lt;p&gt;Global variables can be viewed as &lt;code&gt;env&lt;/code&gt;, and can be created by &lt;code&gt;export&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;TEST=testing; export $TEST # or
export TEST=testing # NOTE: no $
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Useful variables&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;HOME    Same to ~
IFS 
PATH    Search path
EUID    User id
GROUPS  Groups for current user
HOSTNAME    Hostname
LANG    
LC_ALL  
OLDPWD  
PWD 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;定义和使用变量&lt;/h2&gt;
&lt;p&gt;定义变量，注意因为 shell 中的语法使用空格作为命令分割的限制，等于号前后不能加空格。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;FOO=bar
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用变量，需要添加上 &lt;code&gt;$&lt;/code&gt; 符号。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo $FOO
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;字符串在双引号中可以直接插入，这时候要加上大括号来指示变量名的起始位置。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;FOO&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;xxx&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;变量默认实在当前的回话中可见的，而不会作为环境变量传递给调用的命令。可以使用 export 导出变量，或者在命令前加上指定的环境变量。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;FOO env variable is: &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;FOO&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="n"&gt;FOO&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="bp"&gt;None&lt;/span&gt;

&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;FOO&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="n"&gt;FOO&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;bar&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用 export&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-&amp;gt; % export FOO=bar
-&amp;gt; % python3 env.py
FOO env variable is:  bar
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;一些有用的内置变量&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$HOME     家目录，比如 /home/kongyifei
$IFS      默认的分隔符，和 for 循环紧密相关
$PATH     搜索路径，当你执行 ls 的时候，shell 会在这个变量中查找 ls 命令
$EUID     当前有效用户 ID
$LANG     
$LC_ALL   
$OLDPWD   上一个工作目录
$PWD      当前工作目录
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;数组&lt;/h2&gt;
&lt;p&gt;使用小括号来定义一个数组，关于 for 循环随后会讲&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;A=(1 2 3)

for el in &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;; do
    echo &lt;span class="nv"&gt;$el&lt;/span&gt;
done
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;字符串操作&lt;/h2&gt;
&lt;p&gt;大括号里面的字符串会被展开成独立的字符串&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% echo {1,2,3,4}&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="c"&gt;% mkdir -p test/{a,b,c,d}{1,2,3,4}&lt;/span&gt;
&lt;span class="c"&gt;% ls test/&lt;/span&gt;
&lt;span class="n"&gt;a1&lt;/span&gt;  &lt;span class="n"&gt;a2&lt;/span&gt;  &lt;span class="n"&gt;a3&lt;/span&gt;  &lt;span class="n"&gt;a4&lt;/span&gt;  &lt;span class="n"&gt;b1&lt;/span&gt;  &lt;span class="n"&gt;b2&lt;/span&gt;  &lt;span class="n"&gt;b3&lt;/span&gt;  &lt;span class="n"&gt;b4&lt;/span&gt;  &lt;span class="n"&gt;c1&lt;/span&gt;  &lt;span class="n"&gt;c2&lt;/span&gt;  &lt;span class="n"&gt;c3&lt;/span&gt;  &lt;span class="n"&gt;c4&lt;/span&gt;  &lt;span class="n"&gt;d1&lt;/span&gt;  &lt;span class="n"&gt;d2&lt;/span&gt;  &lt;span class="n"&gt;d3&lt;/span&gt;  &lt;span class="n"&gt;d4&lt;/span&gt;
&lt;span class="c"&gt;% mv test/{a,c}.conf  # 这个命令的意思是：mv test/a.conf test/c.conf&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;切片: &lt;code&gt;${string:start:length}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;默认值 &lt;code&gt;${var:-default}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;设定值 &lt;code&gt;${var:=default}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;长度 &lt;code&gt;${#var}&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;字符串 Expansion and slice&lt;/h3&gt;
&lt;p&gt;[zorro@zorrozou-pc0 bash]$ mkdir -p test/zorro/{a,b,c,d}{1,2,3,4} 
[zorro@zorrozou-pc0 bash]$ ls test/zorro/ 
a1  a2  a3  a4  b1  b2  b3  b4  c1  c2  c3  c4  d1  d2  d3  d4&lt;/p&gt;
&lt;p&gt;[zorro@zorrozou-pc0 bash]$ mv test/{a,c}.conf
这个命令的意思是：mv test/a.conf test/c.conf&lt;/p&gt;
&lt;p&gt;${string:start :length} string slice&lt;/p&gt;
&lt;p&gt;default value: ${var:-default}
set value: ${var:=default}&lt;/p&gt;
&lt;p&gt;${#var} get variable length&lt;/p&gt;
&lt;h1&gt;Redirection&lt;/h1&gt;
&lt;p&gt;input: &amp;lt;, output &amp;gt;, append &amp;gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;cat &amp;gt; file &amp;lt;&amp;lt; EOF
this 
line
will 
be redirected to
file
EOF&lt;/p&gt;
&lt;h1&gt;pipe&lt;/h1&gt;
&lt;p&gt;pipe commands will be run simultaneously, but the second command will wait for the input&lt;/p&gt;
&lt;h1&gt;Sub shell&lt;/h1&gt;
&lt;p&gt;use $(expression)&lt;/p&gt;
&lt;h1&gt;控制语句&lt;/h1&gt;
&lt;h2&gt;条件语句&lt;/h2&gt;
&lt;p&gt;if 语句成立的条件是 &lt;code&gt;expr&lt;/code&gt; 返回值为 0。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if expr; then
    statement;
elif expr; then
    statement;
else
    statement;
fi
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;test command&lt;/h2&gt;
&lt;p&gt;虽然可以使用任意的语句作为判断条件，不过我们一般情况下都是用 &lt;code&gt;[&lt;/code&gt; 这个命令来作为判断条件的，需要注意的是 &lt;code&gt;[&lt;/code&gt; 并不是一个语法，而是一个命令。不过由于 &lt;code&gt;[&lt;/code&gt; 这个上古命令实在功能太少，现在一般采用 &lt;code&gt;[[&lt;/code&gt; 来作为判断条件。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if [[ &amp;quot;a&amp;quot; == &amp;quot;b&amp;quot; ]]; then
    echo &amp;quot;wtf&amp;quot;
else
    echo &amp;quot;meh&amp;quot;
fi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;[[&lt;/code&gt;支持的条件有&lt;/p&gt;
&lt;p&gt;1 数值比较, 仅限整数，注意不能使用 &lt;code&gt;&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;&lt;/code&gt; 等符号。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;n1 -eq n2   equal
n1 -ge n2   greater or equal
n1 -gt n2   greater
n1 -le n2       less or equal
n1 -lt n2   less
n1 -ne n2   not equal
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2 字符串比较&lt;/p&gt;
&lt;p&gt;Note: Variables may contain space, so the best way to comparison is to add quotes: &lt;code&gt;"$var1" = "$var2"&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;str1 == str2    equal
str1 != str2    not equal
str1 &amp;lt; str2 less
str1 &amp;gt; str2 greater
-z str  zero
-n str  not zero length
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3 file comparison&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-d  is directory?
-e  exist?
-f  is regular file?
-r  exist and readable?
-s  exist and has content
-w  exist and writable
-x  exist and executealbe
-O  exist and owned
-G  exist and in same group
file -nt file2  newer than
file1 -ot file2     older than
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;case&lt;/h2&gt;
&lt;p&gt;case var in 
parttern | pattern2) commands;;
pattern3) commands2;
*) default commnads;;
esac&lt;/p&gt;
&lt;h2&gt;Loops&lt;/h2&gt;
&lt;h3&gt;foreach 语句&lt;/h3&gt;
&lt;p&gt;for var in list; do
     echo $var
done&lt;/p&gt;
&lt;p&gt;其中 list 可以是一个数组，也可以是一个被 $IFS 分割的字符串。默认情况下，$IFS 是 " \n\t"。其中包含了空格。&lt;/p&gt;
&lt;p&gt;如果要覆盖 IFS，一般这样使用:&lt;/p&gt;
&lt;p&gt;OLDIFS=$IFS
IFS="\n" # new seperator&lt;/p&gt;
&lt;h1&gt;do things&lt;/h1&gt;
&lt;p&gt;IFS=$OLDIFS&lt;/p&gt;
&lt;h3&gt;while-loop&lt;/h3&gt;
&lt;p&gt;until/while expr; do
    # commands
done&lt;/p&gt;
&lt;h3&gt;pipe&lt;/h3&gt;
&lt;p&gt;the result of a for loop is pipe-able to other command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for city in beijing shanghai; do
    echo $city is big
done &amp;gt; cities.txt
# will save the result in cities.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;输入输出&lt;/h1&gt;
&lt;h2&gt;命令行参数&lt;/h2&gt;
&lt;p&gt;parameters to a script can be obtained as $1, $2, $3...。 $0 is the script name, remember to check whether the parameter is empty. $# is the number of parameters(without script name).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$0  script name / function name
$1...$x command line arguments / parameters
$#  number of arguments(without $0)
$*  all parameters as a string
$@  all parameters as a string list
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;shift&lt;/h3&gt;
&lt;p&gt;processing parameters using shift,&lt;/p&gt;
&lt;p&gt;while [ -n "$1" ]; do
    case "$1" in
        -a) echo "option -a" ;;
        --) shift
            break;;
        *) echo "$1" is not a option ;;
    esac
    shift
done&lt;/p&gt;
&lt;h2&gt;read&lt;/h2&gt;
&lt;p&gt;read OPTIONS VARNAME read input to variables&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;read -p   Prompt&lt;/li&gt;
&lt;li&gt;read -t   timeout&lt;/li&gt;
&lt;li&gt;read -s   hide input&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;we can use read to read file or stdin&lt;/p&gt;
&lt;h2&gt;redirection&lt;/h2&gt;
&lt;p&gt;2&amp;gt;  redirect STDERR
m&amp;gt;&amp;amp;n    redirect fd m to fd n's associated file&lt;/p&gt;
&lt;p&gt;Note: you have to use command &amp;gt;&amp;gt; command.log 2&amp;gt;&amp;amp;1 (put 2&amp;gt;&amp;amp;1 at the end), since this means redirect 2 to 1's 
in a scirpt
exec 2&amp;gt; filename # reopen stdout to filename&lt;/p&gt;
&lt;h1&gt;Signal&lt;/h1&gt;
&lt;p&gt;trap commnad signal is used to handle signals in shell&lt;/p&gt;
&lt;h1&gt;Functions&lt;/h1&gt;
&lt;p&gt;有两种定义函数的方式&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;foo() {&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;要调用上面这个函数，直接就输入&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;foo
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;就好了&lt;/p&gt;
&lt;h2&gt;return&lt;/h2&gt;
&lt;p&gt;shell functions behave like a small script, and it does NOT return a computed value...It retures a exit code, which is between 0 and 255. if no return is specified, the exit code of last command will be returned&lt;/p&gt;
&lt;p&gt;You can read the return value by $? like any normal commands&lt;/p&gt;
&lt;p&gt;the right way to to return a value from function, you will have to echo out the value, and put the function is subshell&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nx"&gt;some&lt;/span&gt; &lt;span class="nx"&gt;compute&lt;/span&gt;
    &lt;span class="nx"&gt;echo&lt;/span&gt; &lt;span class="nx"&gt;$result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;retval&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note: any thing that echos in the function body will be captured, so please keep that from happen&lt;/p&gt;
&lt;h2&gt;parameters&lt;/h2&gt;
&lt;p&gt;like a shell script, $0 holds the function name, $1 ... $9 holds the parameters, $# is the num of parameters&lt;/p&gt;
&lt;h2&gt;local variables&lt;/h2&gt;
&lt;p&gt;use &lt;code&gt;local&lt;/code&gt; to declare local variables&lt;/p&gt;
&lt;h1&gt;alias&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;alias new_name=&amp;#39;command string&amp;#39;
$ \command  # bypass alias
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;debugging&lt;/h1&gt;
&lt;p&gt;DEBUG macro&lt;/p&gt;
&lt;h1&gt;multiprocess&lt;/h1&gt;
&lt;p&gt;PID_ARRAY=()
for file in filelist; do
    md5sum file &amp;amp;;
    PID_ARRAY+=("$!")
done
wait ${PID_ARRAY[@]}&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sun, 16 Jul 2017 01:38:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-07-16:/posts/shell-bian-cheng-jiao-cheng.html</guid><category>命令行</category><category>后端</category><category>计算机</category></item><item><title>docker 小技巧</title><link>/posts/docker-xiao-ji-qiao.html</link><description>&lt;h1&gt;删除所有停止的容器&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker rm `docker ps -aq`
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;删除所有没有 tag 的镜像&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker rmi `docker images | grep &amp;quot;^&amp;amp;lt;none&amp;amp;gt;&amp;quot; | awk &amp;#39;{print $3}&amp;#39;`
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;进入运行中的镜像&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker exec -it CONTAINER_NAME bash
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Fri, 14 Jul 2017 21:04:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-07-14:/posts/docker-xiao-ji-qiao.html</guid><category>后端</category><category>计算机</category><category>Docker</category></item><item><title>open sourcing a django project</title><link>/posts/open-sourcing-a-django-project.html</link><description>&lt;h1&gt;remove sensetive data&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;move settings to seperate settings_secret.py file, and import it in the settings.py&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;read all secrets from environment&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Fri, 14 Jul 2017 20:51:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-07-14:/posts/open-sourcing-a-django-project.html</guid><category>Django</category><category>后端</category><category>计算机</category></item><item><title>如果遇到刚入职场的我 —— 小道消息</title><link>/posts/ru-guo-yu-dao-gang-ru-zhi-chang-de-wo-xiao-dao-xiao-xi.html</link><description>&lt;p&gt;0.能力的提升比涨工资更重要，虽然你特别缺钱，刚开始工作谁不缺钱啊，又不是富二代。别跟同事比薪水，「那个蠢货比我技术差，凭什么比我薪水高?」蠢货，比了也不会让你薪水立刻涨上来。&lt;/p&gt;
&lt;p&gt;1.老板不是资本家，他/她也没有剥削你。「工作受剥削」大概是我这一带人乃至几代人受的教育里最影响你职业发展的一个垃圾观念了，赶紧从头脑中删除。永远不要再想起来。&lt;/p&gt;
&lt;p&gt;2.注意仪容仪表，尽管你是个工程师，但也不能穿得别太邋遢，衣服整洁，每天洗头，刮胡子。&lt;/p&gt;
&lt;p&gt;3.你的同事不是笨蛋，你的客户也不是白痴，你自己才是蠢货。所以，对他们出现的错误要能够理解，你的同事开发的软件会有缺陷，客户不会用则是因为软件做得不够好。&lt;/p&gt;
&lt;p&gt;4.在客户那里，你代表的就是公司。别跟客户抱怨公司的产品不够好不给力，这实在太蠢了。&lt;/p&gt;
&lt;p&gt;5.做好小事，处理好每件小事的细节，做不好的地方自己要有总结，找到原因以便改进。相信我，这时候你真不是做大事的料。&lt;/p&gt;
&lt;p&gt;6.养成一个好习惯，比如每天做工作记录，每天回顾自己。跳槽后你会发现比很多人都牛。一个好习惯能秒掉一大部分人。&lt;/p&gt;
&lt;p&gt;7.从现在起，你认识的每个人以后跟你可能都有合作关系，他们以后可能是你的同事，你的下属，你的上司，你的合作伙伴。争取让他们第一印象对你好一点。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sat, 08 Jul 2017 09:19:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-07-08:/posts/ru-guo-yu-dao-gang-ru-zhi-chang-de-wo-xiao-dao-xiao-xi.html</guid><category>talks</category></item><item><title>curio</title><link>/posts/curio.html</link><description>&lt;p&gt;curio 是一个神奇的 Python 库，它完全面向 Python 3.5 增加的 async/await 语法，从低层就没有使用 callback 的语法，因此相比 asyncio 来说设计更简单，API 更优雅，性能却更好。&lt;/p&gt;
&lt;h1&gt;一个例子&lt;/h1&gt;
&lt;p&gt;curio 的文档给了一个很好的例子，下面总结一下这个例子。这个例子模拟了孩子在玩Minecraft，而家长在催促孩子该出发了的情景。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;curio&lt;/span&gt;

&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;countdonw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;T-minus&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;cuiro&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 在异步编程中，不能使用同步代码中的 time.sleep&lt;/span&gt;
        &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="n"&gt;start_evt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cruio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;frined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;你好, 我叫&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;开始玩 Minecraft&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;curio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;curio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CancelledError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;回家了&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;kid&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;可以玩了吗?&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;curio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeout_after&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_evt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 等待一秒&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;curio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TaskTimeout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;啊啊啊&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;在 Minecraft 中造建筑&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;curio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TaskGroup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;friend&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Max&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 生成 friend 协程&lt;/span&gt;
        &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;friend&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Lilikan&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;friend&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Thomas&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;curio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_in_process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# 把计算密集型的任务交给另一个进程&lt;/span&gt;
                &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;curio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_in_thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 会阻塞的，放到其他线程&lt;/span&gt;
            &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;curio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 模拟延迟&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;curio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CancelledError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;好的，保存中&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 如果被取消了，做好善后工作&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt;  &lt;span class="c1"&gt;# 需要重新跑出异常&lt;/span&gt;

&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;kid_task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;curio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 打开 kid 协程，这里并不会等待kid 运行完毕&lt;/span&gt;
    &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;curio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;去玩吧&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;start_evt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;curio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;该出发了&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;count_task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;curio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;countdown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 开始倒计时协程&lt;/span&gt;
    &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;count_task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# 使用 join 等待一个协程完成&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;真的要走了&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;curio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeout_after&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kid_task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 等待 kid 协程运行完毕，最多十秒&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;curio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TaksTimeout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;警告过你了&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;kid_task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;出发了&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;curio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="err"&gt;，&lt;/span&gt; &lt;span class="n"&gt;with_monitor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 开始执行&lt;/span&gt;
    &lt;span class="c1"&gt;# with_monitor 可以在另一个窗口实时观察有多少协程在运行&lt;/span&gt;
    &lt;span class="c1"&gt;# python3 -m curio.monitor&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;curio monitor 的使用&lt;/h1&gt;
&lt;h3&gt;打开 curio&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python -m cuiro.monitor
Curio Monitor: &lt;span class="m"&gt;4&lt;/span&gt; tasks running
Type &lt;span class="nb"&gt;help&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; commands
curio&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;使用 ps 列出当前正在执行的任务&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curio &amp;gt; ps
Task   State        Cycles     Timeout Task
------ ------------ ---------- ------- --------------------------------------------------
1      FUTURE_WAIT  1          None    Monitor.monitor_task
2      READ_WAIT    1          None    Kernel._run_coro.&amp;lt;locals&amp;gt;._kernel_task
3      TASK_JOIN    3          None    parent
4      TIME_SLEEP   1          None    kid
curio &amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;使用 where 查看每个协程的调用栈&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curio &amp;gt; w 3
Stack for Task(id=3, name=&amp;#39;parent&amp;#39;, &amp;lt;coroutine object parent at 0x1024796d0&amp;gt;, state=&amp;#39;TASK_JOIN&amp;#39;) (most recent call last):
  File &amp;quot;hello.py&amp;quot;, line 23, in parent
    await kid_task.join()
  File &amp;quot;/Users/beazley/Desktop/Projects/curio/curio/task.py&amp;quot;, line 106, in join
    await self.wait()
  File &amp;quot;/Users/beazley/Desktop/Projects/curio/curio/task.py&amp;quot;, line 117, in wait
    await _scheduler_wait(self.joining, &amp;#39;TASK_JOIN&amp;#39;)
  File &amp;quot;/Users/beazley/Desktop/Projects/curio/curio/traps.py&amp;quot;, line 104, in _scheduler_wait
    yield (_trap_sched_wait, sched, state)

curio &amp;gt; w 4
Stack for Task(id=4, name=&amp;#39;kid&amp;#39;, &amp;lt;coroutine object kid at 0x102479990&amp;gt;, state=&amp;#39;TIME_SLEEP&amp;#39;) (most recent call last):
  File &amp;quot;hello.py&amp;quot;, line 12, in kid
    await curio.sleep(1000)
  File &amp;quot;/Users/beazley/Desktop/Projects/curio/curio/task.py&amp;quot;, line 440, in sleep
    return await _sleep(seconds, False)
  File &amp;quot;/Users/beazley/Desktop/Projects/curio/curio/traps.py&amp;quot;, line 80, in _sleep
    return (yield (_trap_sleep, clock, absolute))

curio &amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;使用cancel取消一个协程&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curio &amp;gt; cancel 4
Cancelling task 4
*** Connection closed by remote host ***
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;curio 的API&lt;/h1&gt;
&lt;h2&gt;coroutine 与 kernel&lt;/h2&gt;
&lt;p&gt;使用&lt;code&gt;async def&lt;/code&gt;来创建一个新的coroutine. 每个coroutine不能够单独执行, 而是需要通过一个&lt;code&gt;kernel&lt;/code&gt;来执行(相当于asyncio中的loop). 当然一般情况下, 我们不会主动去生成一个kernel, 而是调用curio.run来交给curio 隐式执行. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;async def hello(name):
    print(&amp;#39;hello&amp;#39;, name) 

run(hello, &amp;#39;Guido&amp;#39;)    # Preferred
run(hello(&amp;#39;Guido&amp;#39;))    # Ok
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;tasks&lt;/h2&gt;
&lt;p&gt;前面说到, 一个coroutine需要交给curio来运行, 但是实际上 curio 运行的并不是这个coroutine, 而是包含了这个coroutine 的 task. task 可以认为是一个线程, 而coroutine则可以看成是target函数. 和线程一样, task 也分为了daemon的和非daemon的. 当所有非daemon的task执行完毕之后, kernel就会自动退出. 这个和线程是类似的, 所有的非daemon的线程执行完毕之后, 整个进程就会退出. 而我们通过 curio.run 创建的那个task实际上就相当于是我们在多线程程序中的主线程了.&lt;/p&gt;
&lt;h3&gt;spawn&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;await spawn(corofunc, *args, daemon=False)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在多线程编程中, 我们通过使用 &lt;code&gt;t = Theaad(target=func); t.start()&lt;/code&gt; 来开始执行新的线程. 然而, 在curio中,你不能通过 &lt;code&gt;t = Task(target=func); t.start()&lt;/code&gt; 来创建新的 task. 而应改通过 &lt;code&gt;t = await spawn(corofunc)&lt;/code&gt; 来创建并开始执行新的coroutine.&lt;/p&gt;
&lt;h3&gt;Task join&lt;/h3&gt;
&lt;p&gt;可以使用 &lt;code&gt;r = await task.join()&lt;/code&gt; 来等待task运行结束, 并获得返回值. 也可以使用 &lt;code&gt;await task.wait()&lt;/code&gt; 但是不会返回值, 必须之后再使用 task.result 获得返回值&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;v = await Task.join()  # 返回返回值

# or 

await task.wait()
v = task.result  # 如果在task结束之前访问, 会raise RuntimeError
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Task Group&lt;/h3&gt;
&lt;p&gt;curio 支持使用 taskgroup 来管理一组任务, &lt;code&gt;class TaskGroup(tasks=(), *, wait=all, name=None)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;在创建task group的时候就可以把已经生成的task放入group中, 或者随后使用 task_group.spawn/add_task 来向group 中添加task.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;await TaskGroup.spawn(corofunc, *args, ignore_result=False)
# 生成一个task, 并放入到该task group中

await TaskGroup.add_task(coro)
# 添加已有的 task 到该 task group 中
# 以上两个方法分别添加 corofunc 和 task 到当前 group 中

await TaskGroup.join(*, wait=all)
# 等待所有的task运行结束

await TaskGroup.cancel_remaining()
# 取消所有还在运行的task
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;用在with语句和迭代器中&lt;/h4&gt;
&lt;p&gt;task group 可以用在with语句中, 这样在with块退出的时候就会隐式地调用 task_group.join().&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;async with TaskGroup() as g:
    t1 = await g.spawn(func1)
    t2 = await g.spawn(func2)
    t3 = await g.spawn(func3)

# all tasks done here
print(&amp;#39;t1 got&amp;#39;, t1.result)
print(&amp;#39;t2 got&amp;#39;, t2.result)
print(&amp;#39;t3 got&amp;#39;, t3.result)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;task group 还可以用作迭代器, 其中包含了所有 task.result&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;async with TaskGroup() as g:
    t1 = await g.spawn(func1)
    t2 = await g.spawn(func2)
    t3 = await g.spawn(func3)
    async for task in g:
        print(task, &amp;#39;completed.&amp;#39;, task.result)
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;task local storage&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;class Local&lt;/code&gt; 类似于threading.Local, 但是随着一个新的 context local storage PEP 的到来, 这个功能会被废弃掉&lt;/p&gt;
&lt;h2&gt;time&lt;/h2&gt;
&lt;p&gt;使用 curio.sleep 而不是 time.sleep, 以为整个协程都是单线程的.&lt;/p&gt;
&lt;h2&gt;workers&lt;/h2&gt;
&lt;p&gt;如果需要运行一些CPU密集的任务或者是一些可能block住的任务, 可以使用workers.&lt;/p&gt;
&lt;h3&gt;有用的函数&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;await curio.workers.run_in_process(callable, *args)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果取消对应的coroutine的话, 相应的进程会收到SIGTERM而立即停止执行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;await curio.workers.run_in_thread(callable, *args)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果取消对应coroutine的话, 相应的线程并不会停止执行, 而是进入一种类似 zombie 的状态, 知道运行结束&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;await curio.workers.block_in_thread(callable, *args)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;类似 run_in_thread, 但是对用同一个callable, 同时只有一个线程在执行.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curio.workers.MAX_WORKER_THREADS  # 同一个kernel能使用的最大的线程数, 默认64
curio.workers.MAX_WORKER_PROCESSES  # 同一个kernel能使用的最大进程数, 默认 CPU 数量
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;文件&lt;/h2&gt;
&lt;p&gt;读取文件可能是个很耗时的工作, 不光是读写磁盘, 如果你的文件是在一个网络文件系统上, 那么将会更加耗时. 如果在协程中发生这种操作, 整个协程kernel 都会被block住.&lt;/p&gt;
&lt;p&gt;curio.file 提供了一些供异步读取文件的机制.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curio.file.aopen(*args, **kwargs)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;需要注意的是, 这个函数只能用在 Async Context Manager 中, 而不能直接 &lt;code&gt;f = await aopen()&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;async with aopen(filename) as:
    async for line in f:
        print(line)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;原语&lt;/h2&gt;
&lt;p&gt;curio 提供了 &lt;code&gt;Event&lt;/code&gt;, &lt;code&gt;Lock&lt;/code&gt;, &lt;code&gt;RLock&lt;/code&gt;, &lt;code&gt;Semephore&lt;/code&gt;, &lt;code&gt;BoundedSemaphore&lt;/code&gt;, &lt;code&gt;Condition&lt;/code&gt;等&lt;/p&gt;
&lt;h2&gt;queue&lt;/h2&gt;
&lt;p&gt;正如标准库提供了 queue 模块用于多线程之间通信一样, curio 提供了 curio.queue 来实现task 之间的通信. 用法和queue 模块基本上是一样的, 除了一些方法变成了 coroutine function, 而不是普通的函数了.&lt;/p&gt;
&lt;h2&gt;异步线程&lt;/h2&gt;
&lt;p&gt;如果你需要执行很多的同步操作, 但是还是想要能够和 curio 来交互, 可以使用异步线程. 在异步线程内, 可以使用&lt;code&gt;AWAIT&lt;/code&gt;函数来实现&lt;code&gt;await&lt;/code&gt;关键字的操作, 可以使用普通的&lt;code&gt;with&lt;/code&gt; 和 &lt;code&gt;for&lt;/code&gt;来实现使用了&lt;code&gt;async with&lt;/code&gt;. 也就是实现了不用在coroutine内部而使用 coroutine 的操作.&lt;/p&gt;
&lt;p&gt;另外值得注意的一点是, 如果把定义的async thread当做同步版本的线程来运行, 那么 &lt;code&gt;AWIAT&lt;/code&gt; 就是一个 no-op, 也就是说可以直接把他当做同步线程来用.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Fri, 07 Jul 2017 14:56:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-07-07:/posts/curio.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>android public key pinning</title><link>/posts/android-public-key-pinning.html</link><description>&lt;h1&gt;What is public key pinning?&lt;/h1&gt;
&lt;p&gt;to view https traffic, you could sign your own root CA, and perform mitm attack to view the traffic. HPKP (http public key pinning) stops this sniffing by only trust given CA, thus, your self-signed certs will be invalid. To let given app to trust your certs, you will have to modify the apk file.&lt;/p&gt;
&lt;h1&gt;How to break it?&lt;/h1&gt;
&lt;h2&gt;Introducing Xposed&lt;/h2&gt;
&lt;p&gt;decompile, modify and then recompile the apk file can be very diffcult. so you'd better hook to some api to let the app you trying to intercept trust your certs. xposed offers this kind of ability. moreover, a xposed module called JustTrustMe have done the tedious work for you. just install xposed and JustTrustMe and you are off to go. Here are the detaild steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install Xposed Installer&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;for android 5.0 above, use the xposed installer.&lt;/p&gt;
&lt;p&gt;NOTE: 对于 MIUI，需要搜索 Xposed 安装器 MIUI 专版。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install Xposed from xposed installer, note, you have to give root privilege to xposed installer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install JustTrustMe&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Fri, 07 Jul 2017 08:10:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-07-07:/posts/android-public-key-pinning.html</guid><category>大前端</category><category>Android</category><category>计算机</category></item><item><title>android intent</title><link>/posts/android-intent.html</link><description>&lt;p&gt;You should use intent to communicate between activities and services&lt;/p&gt;
&lt;h1&gt;intent extra&lt;/h1&gt;
&lt;h2&gt;package data from activity&lt;/h2&gt;
&lt;p&gt;create a intent instance&lt;/p&gt;
&lt;p&gt;Intent intent = new Intent(getBaseContext(), SignoutActivity.class);
intent.putExtra("key", value);
startActivity(intent);&lt;/p&gt;
&lt;h2&gt;package data from service&lt;/h2&gt;
&lt;p&gt;Intent intent = new Intent(context, SignoutActivity.class);
intent.putExtra("key", value);
startService(intent);&lt;/p&gt;
&lt;h2&gt;Access data in activity&lt;/h2&gt;
&lt;p&gt;Access that intent on next activity
String s = getIntent().getStringExtra("EXTRA_SESSION_ID");
The docs for Intents has more information (look at the section titled "Extras").&lt;/p&gt;
&lt;h2&gt;Access data in Service&lt;/h2&gt;
&lt;p&gt;just use the Intent parameter from onStartCommand&lt;/p&gt;
&lt;p&gt;public int onStartCommand (Intent intent, int flags, int startId) {
    String userID = intent.getStringExtra("UserID");
    return START_STICKY;
}&lt;/p&gt;
&lt;h1&gt;intent plags&lt;/h1&gt;
&lt;p&gt;see http://stackoverflow.com/questions/21833402/difference-between-intent-flag-activity-clear-task-and-intent-flag-activity-task&lt;/p&gt;
&lt;h1&gt;intent action&lt;/h1&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Thu, 06 Jul 2017 11:40:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-07-06:/posts/android-intent.html</guid><category>大前端</category><category>Android</category><category>计算机</category></item><item><title>android.os.handler</title><link>/posts/androidoshandler.html</link><description>&lt;p&gt;android.os.handler 用于向每个线程的 MessageQueue 发送消息。&lt;/p&gt;
&lt;p&gt;There are two main uses for a Handler: &lt;/p&gt;
&lt;p&gt;(1) to schedule messages and runnables to be executed as some point in the future; and &lt;/p&gt;
&lt;p&gt;(2) to enqueue an action to be performed on a different thread than your own.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Thu, 06 Jul 2017 10:48:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-07-06:/posts/androidoshandler.html</guid><category>大前端</category><category>Android</category><category>计算机</category></item><item><title>android vpn service</title><link>/posts/android-vpn-service.html</link><description>&lt;p&gt;VPN Service 运行在 IP 层。它创建了一个虚拟的网络接口，可以配置地址和路由规则，并返回一个 file descriptor。每次读这个 fp 返回一个数据包，每次写发送一个数据包。&lt;/p&gt;
&lt;p&gt;两个最重要的方法分别是&lt;code&gt;prepare(Context)&lt;/code&gt; 和 &lt;code&gt;establish()&lt;/code&gt;。前者接受用户响应并关闭其他应用的 VPN 链接，后者使用 &lt;code&gt;VpnService.Builder&lt;/code&gt; 的参数创建 VPN 接口。&lt;/p&gt;
&lt;p&gt;实现 VpnService 的类必须在 manifest 中声明：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;service&lt;/span&gt; &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.ExampleVpnService&amp;quot;&lt;/span&gt;
         &lt;span class="na"&gt;android:permission=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android.permission.BIND_VPN_SERVICE&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;intent-filter&amp;gt;&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;lt;action&lt;/span&gt; &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android.net.VpnService&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;/intent-filter&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/service&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;VpnService works on the network layer, the IP protocol is a point to point protocol, the packet changes between each hop, TCP is a end to end protocol&lt;/li&gt;
&lt;li&gt;use the vpn service as a layer4(NAT) router, and then you could modify or relay the packet&lt;/li&gt;
&lt;li&gt;IP packet contains only src and dst IP address and upper protocol, the port information is stored in TCP packet&lt;/li&gt;
&lt;li&gt;TCP is a stream protocol, so thers is no packet in tcp(see http://stackoverflow.com/q/1529680/)&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;关于 VPN Service 的一些讨论&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/17766405/android-vpnservice-to-capture-packets-wont-capture-packets"&gt;you need to reverse the ip order for ip layer headers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/android/platform_development/tree/master/samples/ToyVpn"&gt;ToyVPN is the official example on using vpn service&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/16358589/implementing-a-simple-https-proxy-application-with-java"&gt;SSL in java&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;building a client&lt;/h1&gt;
&lt;p&gt;Your VPN will need to create a new socket, protect the socket from being routed back into the VPN using &lt;code&gt;VpnService.protect(Socket)&lt;/code&gt;, and connect the socket to 10.162.1.2. Having set up a tunnel connection to the VPN server, you should proceed to writing the input stream of the VpnService's interface into the tunnel's output stream, and in turn write the tunnel response back into the interface output stream.&lt;/p&gt;
&lt;p&gt;http://stackoverflow.com/questions/13233477/how-to-use-vpn-in-android/#answers&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;simple example&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;http://www.thegeekstuff.com/2014/06/android-vpn-service/&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;building a firewall with vpn service&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Incoming and outgoing streams of the VpnService are in the network layer( layer); you are receiving (and should in turn be transmitting) raw IP packets, as you describe in your question.&lt;/p&gt;
&lt;p&gt;also check out the OSI model and IP header format on WikiPedia&lt;/p&gt;
&lt;p&gt;When forwarding the requests, you are in the application layer; you should be transmitting the contents of the UDP or TCP payload (i.e. only their data, not the headers themselves) using respectively a DatagramSocket or a Socket.&lt;/p&gt;
&lt;p&gt;Bear in mind that this skips the transport layer as those implementations take care of constructing the UDP header (in case of DatagramSocket) and the TCP header and options (in case of Socket).&lt;/p&gt;
&lt;p&gt;all I hava to do is to:&lt;/p&gt;
&lt;p&gt;check if the IP packet is for http or https:&lt;/p&gt;
&lt;p&gt;if not:&lt;/p&gt;
&lt;p&gt;act as a route, forward as is, but ack requests and reconstruct the packet with new src, and &lt;/p&gt;
&lt;p&gt;if so:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;act as the server, ack the request packet&lt;/li&gt;
&lt;li&gt;act as the client, send new http request to the server and retrive the response&lt;/li&gt;
&lt;li&gt;act as the server, send back the response packet&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The whole process is like we are the router, and dispatch different packet to different nodes(servers).&lt;/p&gt;
&lt;p&gt;http://stackoverflow.com/questions/20237743/android-firewall-with-vpnservice&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Thu, 06 Jul 2017 10:07:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-07-06:/posts/android-vpn-service.html</guid><category>大前端</category><category>Android</category><category>计算机</category></item><item><title>simhash</title><link>/posts/simhash.html</link><description>&lt;h1&gt;shingling&lt;/h1&gt;
&lt;p&gt;n-shingling 就是把一个句子或者文章分成 n 个连续单词的组合，然后去重。&lt;/p&gt;
&lt;p&gt;比如： the cat sat on the cat&lt;/p&gt;
&lt;p&gt;第一步，分组： the cat, cat sat, sat on, on the, the cat
第二步，去重： the cat, cat sat, sat on, on the&lt;/p&gt;
&lt;p&gt;simhash 计算过程&lt;/p&gt;
&lt;p&gt;生成 shingle&lt;/p&gt;
&lt;h1&gt;Reference&lt;/h1&gt;
&lt;p&gt;[1] http://matpalm.com/resemblance/jaccard_coeff/&lt;/p&gt;
&lt;p&gt;[2] http://blog.csdn.net/c289054531/article/details/8082952  中文解释&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 05 Jul 2017 09:09:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-07-05:/posts/simhash.html</guid><category>算法</category><category>计算机</category></item><item><title>mysql 基础知识(1) - 查询数据</title><link>/posts/mysql-ji-chu-zhi-shi-1-cha-xun-shu-ju.html</link><description>&lt;p&gt;&lt;a href="https://mp.weixin.qq.com/s/87BoE2-0mW_3qALyNSpiTw"&gt;最全总结&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;显示操作&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;show databases;
show create database DB;
show tables;
show columns from TABLE;
show create table TABLE;
show status;
shou grants;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;连接数据库&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;mysql -u root -p -h HOST -P 3306&lt;/code&gt;, 其中的参数代表了用户, 机器地址和密码等, 注意其中的密码必须之后输入, 而不能直接带上, 这样是为了避免把密码记录在bash历史中.&lt;/p&gt;
&lt;p&gt;另一个更好的工具是Python写的mycli, 谁用谁知道~&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;use DATABASE&lt;/code&gt;来更改指定的数据库.&lt;/p&gt;
&lt;h1&gt;查询数据库&lt;/h1&gt;
&lt;p&gt;下面的部分都使用这个表, 方便讨论.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;first_name&lt;/th&gt;
&lt;th&gt;last_name&lt;/th&gt;
&lt;th&gt;math_score&lt;/th&gt;
&lt;th&gt;english_score&lt;/th&gt;
&lt;th&gt;grade&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;master&lt;/td&gt;
&lt;td&gt;yoda&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;obiwan&lt;/td&gt;
&lt;td&gt;kenobi&lt;/td&gt;
&lt;td&gt;70&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;luke&lt;/td&gt;
&lt;td&gt;skywalker&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;70&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;leia&lt;/td&gt;
&lt;td&gt;skywalker&lt;/td&gt;
&lt;td&gt;90&lt;/td&gt;
&lt;td&gt;90&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;select field from table&lt;/code&gt;, 或者 &lt;code&gt;select * from table&lt;/code&gt;. 好多时候往往犯懒直接写星号, 但是检索无关的列会降低数据库的效率.&lt;/p&gt;
&lt;p&gt;有一个比较有趣的关键字, 叫做&lt;code&gt;DISTINCT&lt;/code&gt;, 顾名思义, 就是不同的意思, 如果使用这个关键字作为前缀的话, MYSQL会做一个去重的操作, 有点类似于&lt;code&gt;uniq&lt;/code&gt;命令.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;select distinct vendor_id from products
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果需要限定查询的结果, 使用 LIMIT 和 OFFSET 两个关键字. LIMIT 限定了返回的结果数量, OFFSET 指定了从那一条开始返回.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;select name from students limit 5 offset 3;  -- 从所有学生中选出从第3个开始的5个学生
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;排序&lt;/h2&gt;
&lt;p&gt;一般来说, mysql返回的结果是按照主键排序的, 如果要让结果按照某个键排序, 使用 &lt;code&gt;ORDER BY&lt;/code&gt; 关键字来给他们排序&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;select name from students order by score
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;默认情况下, mysql是按照升序排列的, 也就是小的在前面, 如果需要大的在前面, 使用 &lt;code&gt;DESC&lt;/code&gt; 关键字&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;select name from students order by score desc;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果排序的字段相同怎么办呢, 还可以按多个字段排序, 这时候需要注意的是desc只对一个列生效.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;select name from students order by score desc, name;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;过滤结果&lt;/h2&gt;
&lt;p&gt;可以使用 &lt;code&gt;WHERE&lt;/code&gt; 子句过滤结果, 比如&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;select * from students where score &amp;gt; 100;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;值得注意的是, 如果要比较的是null, 那么不能使用 = 来比较, 需要使用 &lt;code&gt;IS&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;select * from students where name is null;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;还可以使用 &lt;code&gt;AND&lt;/code&gt;, &lt;code&gt;OR&lt;/code&gt;, &lt;code&gt;NOT&lt;/code&gt; 来计算复合表达式.&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;IN&lt;/code&gt; 来表达在某些值之间, 就像在Python中一样.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;select * from students where name in (&amp;#39;yoda&amp;#39;, &amp;#39;obiwan&amp;#39;, &amp;#39;luke&amp;#39;);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用 &lt;code&gt;LIKE&lt;/code&gt; 来匹配结果, &lt;code&gt;%&lt;/code&gt; 表示任意字符出现任意次数, &lt;code&gt;_&lt;/code&gt; 表示任意一个字符出现一次.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;select * from students where name like &amp;#39;%walker&amp;#39;;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;函数与计算字段&lt;/h2&gt;
&lt;p&gt;MySQL 中有一些常见的字符串处理函数, concat, trim 等等, 这些函数在常见的编程语言中都有, 在MySQL中作用大概也是相同的. 还可以使用 &lt;code&gt;AS&lt;/code&gt; 来个计算出的字段来起一个别名, 这样方便输出. 如果是数字的话, 还可以做数学运算.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;select concat(first_name, last_name) as name from students;

select math_score + english_score as score from students;

select * from students where year(enroll_time) = 2009;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;聚合与分组数据&lt;/h2&gt;
&lt;p&gt;之前说的一些函数都是把一个值变成了另一个值, 也就是使用或者不使用这些函数得到的都是相同行数的数据. 而使用聚合或者分组函数之后, 会改变得到的数据的大小.&lt;/p&gt;
&lt;p&gt;聚集函数常用的一共有五个: &lt;code&gt;AVG(), COUNT(), MAX(), MIN(), SUM()&lt;/code&gt;. 这几个函数的意思看名字也应该知道了...直接上例子了.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;select avg(math_score) as average_math_score from students;  -- 90, null 会被忽略
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;select count(*) from students; -- 3, null会被忽略
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;分组函数&lt;/h3&gt;
&lt;p&gt;使用 group by 关键字可以让所有的行按照某个值, 聚合成相应的行, 比如在我们的数据中有3个年纪(grade), 那么group by(grade) 之后就会变成3行.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;select grade, count(*) as num_students from students group by grade;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;需要注意的是SQL的计算顺序是先计算 WHERE 子句, 然后才回去使用 &lt;code&gt;GROUP BY&lt;/code&gt; 聚合, 那么如果想要过滤GROUP BY 分组之后的数据呢, 这时候可以使用 HAVING 子句.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;select grade, count(*) as num_students from students group by grade having count(*) &amp;gt; 1;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;子查询&lt;/h2&gt;
&lt;p&gt;子查询其实很简单, 就是一个查询的结果是另一个查询的数据基础. 和函数调用有一些相似.&lt;/p&gt;
&lt;p&gt;第一种常见用法, 把子查询的结果用在 IN 中.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;select * from students where id in (select sudent_id from student_awards);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第二种使用子查询来作为结果列的数值.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;select id, (select count(*) from student_awards where students.id = student_awards.student_id) from students;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Join&lt;/h2&gt;
&lt;p&gt;Join 太复杂了, 未完待续&lt;/p&gt;
&lt;h2&gt;数据类型&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;TINYBLOB, TINYTEXT       L + 1 bytes, where L &amp;lt; 2^8    (255 Bytes)
BLOB, TEXT               L + 2 bytes, where L &amp;lt; 2^16   (64 Kibibytes)
MEDIUMBLOB, MEDIUMTEXT   L + 3 bytes, where L &amp;lt; 2^24   (16 Mebibytes)
LONGBLOB, LONGTEXT       L + 4 bytes, where L &amp;lt; 2^32   (4 Gibibytes)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;史上最全的 mysql 总结：https://mp.weixin.qq.com/s/87BoE2-0mW_3qALyNSpiTw&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 05 Jul 2017 01:22:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-07-05:/posts/mysql-ji-chu-zhi-shi-1-cha-xun-shu-ju.html</guid><category>数据库</category><category>计算机</category></item><item><title>the ipinfo story</title><link>/posts/the-ipinfo-story.html</link><description>&lt;h1&gt;what does this guy do?&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;find a easy question, however cumbersome question on &lt;a href="https://stackoverflow.com/questions/409999"&gt;stackoverflow.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;answer the question with a solution of his api, &lt;em&gt;with full demo codes of usage&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;so many amateur programmers are not capable of or too lazy to build such an easy api, his answer and api took off.&lt;/li&gt;
&lt;li&gt;make money&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Why he succeed?&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;no one talks about the easiest way to “Make What People Want”: Make What People Ask For.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;answer many questions related to this, about 1 question / 20 days&lt;/li&gt;
&lt;li&gt;his answers give the whole solution and &lt;em&gt;full examples&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;his design is simple, reliable, fast&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;see:  https://blog.ipinfo.io/api-side-project-to-250-million-requests-with-0-marketing-budget-bb0de01c01f6&lt;/p&gt;
&lt;p&gt;as pointed by one hacker news comment, it's a very competitive market, however you don't have to own the whole market, a small share is just profitable.&lt;/p&gt;
&lt;h1&gt;Comments on hacker news&lt;/h1&gt;
&lt;p&gt;1.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I see the author is posting the same thing every 20 days or so, so here is the 0 marketing...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Kudos to you guys for building this. There is always a lot of scepticism from people on "why would anyone pay for this" . Reality is not everyone has the time or resources to build their own kit. There are literally 1000s of businesses on the internet that that are in the business of selling "time" or timesavers and removing the risk of maintenance, ongoing support.
Keep improving this and with the rise of web personalization, the demand will continue to grow.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Just some rough calculations. Assuming the worst-case scenario, everyone in the highest tiers (the cheapest per request), 250M daily requests means he makes
400 * 250M / 320K = $312,500 per month.
Or $3.75M per year.
Not counting the expenses.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;4.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I think the most common business model for a website such as this is to offer premium services like:
1) more accurate details
2) fraud protection, if the ip is known for fraud or spamming
3) increased rate limits, etc
Just the top of my head s.. I'm sure you i can think of many more..&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;5.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I use ipinfo.io mostly to see my own public facing IP address and for me, it's 2 reasons:
- I somehow can remember that domain. I don't have to google "my ip" and dig through weird domains that change all the time
- The design is clean and simple. Not too many information, no ads, loads fast.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;6.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This has worked well for me, too. I saw an influx of "How to offer a time-based trial version on Android" on SO and developed a trial SDK as an answer: https://www.trialy.io/&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sun, 02 Jul 2017 05:05:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-07-02:/posts/the-ipinfo-story.html</guid><category>他山之石</category><category>创业</category></item><item><title>如何使用 letsencrypt</title><link>/posts/ru-he-shi-yong-letsencrypt.html</link><description>&lt;p&gt;letsencrypt 现在终于支持通配符证书了。&lt;/p&gt;
&lt;p&gt;certbot 比较坑爹的一点是renew时候使用的是和创建证书相同的参数, 而且不能更改, 也就是最好在创建证书的时候就选择使用webroot的方式.&lt;/p&gt;
&lt;h2&gt;install certbot&lt;/h2&gt;
&lt;p&gt;see ~/.dotfiles/installs/install_certbot.sh&lt;/p&gt;
&lt;h2&gt;create new cert&lt;/h2&gt;
&lt;p&gt;sudo certbot certonly --webroot -w /opt/spider/nginx/html/ -d shujutuzi.com -d www.shujutuzi.com&lt;/p&gt;
&lt;p&gt;sudo certbot certonly --standalone --agree-tos --email kongyifei@gmail.com --domain g.yifei.me --preferred-challenges http --non-interactive&lt;/p&gt;
&lt;p&gt;the cert is placed at /etc/letsencrypt/live/shujutuzi.com/&lt;/p&gt;
&lt;p&gt;there will be four certs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;• cert.pem: server certificate only.
• chain.pem: root and intermediate certificates only.
• fullchain.pem: combination of server, root and intermediate certificates (replaces cert.pem and chain.pem).
• privkey.pem: private key (do not share this with anyone!).
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;install the cert&lt;/h2&gt;
&lt;p&gt;https://gist.github.com/cecilemuller/a26737699a7e70a7093d4dc115915de8&lt;/p&gt;
&lt;h2&gt;auto renew&lt;/h2&gt;
&lt;p&gt;create a cron job to run renew peroidcally&lt;/p&gt;
&lt;p&gt;cerbot renew --pre-hook "/opt/nginx/sbin/nginx -s stop" --post-hook "/opt/nginx/sbin/nginx -s start" --quiet&lt;/p&gt;
&lt;p&gt;optionally, you could generate a Strong Diffie-Hellman Group&lt;/p&gt;
&lt;p&gt;sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048&lt;/p&gt;
&lt;p&gt;Third, change you defautl server settings:&lt;/p&gt;
&lt;p&gt;server {
    listen 443 ssl;
    server_name example.com www.example.com;
    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;&lt;/p&gt;
&lt;p&gt;// optional&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;ssl_protocols&lt;/span&gt; &lt;span class="nt"&gt;TLSv1&lt;/span&gt; &lt;span class="nt"&gt;TLSv1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;1&lt;/span&gt; &lt;span class="nt"&gt;TLSv1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;ssl_prefer_server_ciphers&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;ssl_dhparam&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;ssl&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;certs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;dhparam&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;pem&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;ssl_ciphers&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;ssl_session_timeout&lt;/span&gt; &lt;span class="nt"&gt;1d&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;ssl_session_cache&lt;/span&gt; &lt;span class="nt"&gt;shared&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;SSL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;50m&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;ssl_stapling&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;ssl_stapling_verify&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;add_header&lt;/span&gt; &lt;span class="nt"&gt;Strict-Transport-Security&lt;/span&gt; &lt;span class="nt"&gt;max-age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;15768000&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;Side Notes:&lt;/p&gt;
&lt;p&gt;what is a pem file?&lt;/p&gt;
&lt;p&gt;pem container format, may contain one or many certs, short for Privacy Enhanced Main
key just the private key file of pem format
cert, cer, crt  just pem file with different extendsion, used on windows&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sat, 01 Jul 2017 02:48:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-07-01:/posts/ru-he-shi-yong-letsencrypt.html</guid><category>后端</category><category>计算机</category></item><item><title>docker 基础概念</title><link>/posts/docker-ji-chu-gai-nian.html</link><description>&lt;p&gt;Docker 是一个进程的容器，&lt;strong&gt;不是虚拟机&lt;/strong&gt;。他为一个进程隔离了文件系统、网络和环境变量。最好在其中运行一个且仅运行一个线程，而不是运行多个任务。&lt;/p&gt;
&lt;p&gt;docker 中最好运行的是无状态的服务，这样方便于横向扩展，对于有状态的服务，建议把状态 mount 出来。&lt;/p&gt;
&lt;h1&gt;使用场景&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;为有不同需求的应用创建不同的隔离环境， 比如部署两个脚本，一个需要用 Python 2.7，另一个需要用 Python 3.6&lt;/li&gt;
&lt;li&gt;Micro services. Micro services are easy to scale up. In this way, run only one process in a container, and use orchestration tools such as compose, kubernetes, swarm.&lt;/li&gt;
&lt;li&gt;Daemon Process Manager. Docker is very simple to use as a daemon process manager, to start and list daemon processes has never been this simple&lt;/li&gt;
&lt;li&gt;A jail for apps. Docker is good to jail you application, prevent it from hurting your system, especially when you run code from other people(e.g. uploaded by a client)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Docker is so-called kernel containerization, in contrary to user-space containerization such as rkt. Docker stores images in a central base on your machine.&lt;/p&gt;
&lt;h1&gt;Image vs Container（镜像与容器）&lt;/h1&gt;
&lt;p&gt;Container is a running instance of image, each time you run an image, a new container is created. You can commit a container back as an image, however, it's a little controversial&lt;/p&gt;
&lt;p&gt;Image name format: user/image:tag&lt;/p&gt;
&lt;h1&gt;basic usage&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker run OPTIONS IMAGE COMMAND&lt;/code&gt; to generate a container based on given image and start it.&lt;/li&gt;
&lt;li&gt;most used command is -d &lt;/li&gt;
&lt;li&gt;and -it&lt;/li&gt;
&lt;li&gt;--restart=always to always restart the container&lt;/li&gt;
&lt;li&gt;--name=NAME to name the container&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker start CONTAINER_ID&lt;/code&gt; to restart stopped container, note that this will reuse the options and command when &lt;code&gt;docker run&lt;/code&gt; is issued&lt;/li&gt;
&lt;li&gt;then use &lt;code&gt;docker attach CONTAINER_ID&lt;/code&gt; to reattach to the given container&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker exec OPTIONS CONTAINER COMMAND&lt;/code&gt; to run an extra command in container&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note, docker is all about stdio, and if you would like to read something, read it from stdin, if you would like to output something, write to stdout&lt;/p&gt;
&lt;h1&gt;building docker images&lt;/h1&gt;
&lt;p&gt;two ways:
&lt;em&gt; commit each change
&lt;/em&gt; using dockerfiles&lt;/p&gt;
&lt;h1&gt;Commands&lt;/h1&gt;
&lt;h2&gt;Container related&lt;/h2&gt;
&lt;h3&gt;run&lt;/h3&gt;
&lt;p&gt;每次执行 &lt;code&gt;docker run&lt;/code&gt;, 都会根据镜像来创建一个全新的 container, 可以使用 &lt;code&gt;docker start&lt;/code&gt; 或者 &lt;code&gt;docker attach&lt;/code&gt; 来连接上已经创建的 container。image 和 container 的关系大概类似于程序和进程之间的关系。&lt;/p&gt;
&lt;p&gt;Syntax: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker run [options] [image name] [command]&lt;/code&gt;
&lt;code&gt;docker exec -it [container] bash&lt;/code&gt; can be used as a ssh equivalent
&lt;code&gt;-d&lt;/code&gt; detach the container and runs in background
&lt;code&gt;-p&lt;/code&gt; set ports [host:container]
&lt;code&gt;--name&lt;/code&gt; set the name
&lt;code&gt;--rm&lt;/code&gt; clean the container after running
&lt;code&gt;--net&lt;/code&gt; sets the network connected to
&lt;code&gt;-w&lt;/code&gt; sets working dir
&lt;code&gt;-e&lt;/code&gt; sets env variable
&lt;code&gt;-u&lt;/code&gt; sets user
&lt;code&gt;-v&lt;/code&gt; sets volume host_file:container_file:options&lt;/p&gt;
&lt;h3&gt;status&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;docker ps -a&lt;/code&gt; shows which container is running&lt;/p&gt;
&lt;h2&gt;Image ralated&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;docker pull&lt;/code&gt; &lt;br&gt;
&lt;code&gt;docker images&lt;/code&gt;   &lt;br&gt;
&lt;code&gt;docker search&lt;/code&gt; 
&lt;code&gt;docker build&lt;/code&gt;   docker build -t user/image [dir]&lt;/p&gt;
&lt;h2&gt;网络相关&lt;/h2&gt;
&lt;p&gt;基础命令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker network ls   ls the network interfaces
docker network inspect  inspect the network for details
docker network create/rm    create network interface
docker network connect/disconnect [net] [container] connect a container to a network
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;by setting network, docker automatically create /etc/hosts file inside the image, and you can use the name of the container to access the others.&lt;/p&gt;
&lt;p&gt;docker 有两个网络模式&lt;/p&gt;
&lt;h3&gt;桥接模式&lt;/h3&gt;
&lt;p&gt;使用 `docker run --net="bridge"，这种模式会使用虚拟网卡 docker0 做了一层 NAT 转发，所以效率比较低，优点是不用改变应用分配固定端口的代码，docker会在宿主机上随机分配一个端口，避免冲突。&lt;/p&gt;
&lt;h3&gt;Host 模式&lt;/h3&gt;
&lt;p&gt;使用 `docker run --net="host"，宿主机和docker内部使用的都是同一个网络，比如说 eth0&lt;/p&gt;
&lt;h2&gt;卷&lt;/h2&gt;
&lt;p&gt;Docker 容器一般来说是无状态的，除了保存到数据库之外，还可以使用卷来把容器中的状态保存出来。&lt;/p&gt;
&lt;p&gt;docker volume create --name hello
docker run -d -v hello:/container/path/for/volume container_image my_command&lt;/p&gt;
&lt;h2&gt;日志&lt;/h2&gt;
&lt;p&gt;You could use &lt;code&gt;docker logs [contianer]&lt;/code&gt;  to view stdout logs. But the logs sent to /var/logs/*.log are by default inside the container. &lt;/p&gt;
&lt;p&gt;Remove stopped images
docker rm $(docker ps -aq)&lt;/p&gt;
&lt;p&gt;使用docker的时候不使用 sudo&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo gpasswd -a &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;USER&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; docker
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后登出再登录当前用户即可&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;p&gt;https://blog.talpor.com/2015/01/docker-beginners-tutorial/&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Fri, 30 Jun 2017 13:59:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-06-30:/posts/docker-ji-chu-gai-nian.html</guid><category>后端</category><category>计算机</category><category>Docker</category></item><item><title>sudo passwordless</title><link>/posts/sudo-passwordless.html</link><description>&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;EDITOR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;vi&lt;/span&gt; &lt;span class="n"&gt;visudo&lt;/span&gt;

&lt;span class="cp"&gt;# then add this&lt;/span&gt;

&lt;span class="n"&gt;ALL&lt;/span&gt; &lt;span class="n"&gt;ALL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ALL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nl"&gt;NOPASSWD&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ALL&lt;/span&gt;
&lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="n"&gt;ALL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ALL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nl"&gt;NOPASSWD&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ALL&lt;/span&gt;
&lt;span class="nf"&gt;%group&lt;/span&gt; &lt;span class="n"&gt;ALL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ALL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nl"&gt;NOPASSWD&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ALL&lt;/span&gt;
&lt;span class="n"&gt;Defaults&lt;/span&gt; &lt;span class="n"&gt;env_keep&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;EDITOR&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Fri, 30 Jun 2017 13:51:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-06-30:/posts/sudo-passwordless.html</guid><category>命令行</category><category>后端</category><category>计算机</category></item><item><title>为爬虫搭建代理集群</title><link>/posts/wei-pa-chong-da-jian-dai-li-ji-qun.html</link><description>&lt;p&gt;爬虫如果只用固定的同一个或者同一组 IP 的话，很容易被封禁，轻者弹验证码，重者直接无法访问。&lt;/p&gt;
&lt;p&gt;这里主要探讨如何构架一个代理 IP 池，从而能够频繁更换代理 IP。&lt;/p&gt;
&lt;p&gt;按照代理 IP 的来源，主要有几个方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;去免费代理的网站上爬&lt;/li&gt;
&lt;li&gt;利用 ADSL 重拨会更换 IP 的原理，使用 ADSL 机器搭建集群&lt;/li&gt;
&lt;li&gt;利用云提供商的 API，自动更换 IP&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;搭建一个自己的 adsl 集群&lt;/h1&gt;
&lt;h2&gt;找代理商&lt;/h2&gt;
&lt;p&gt;首先找到一个靠谱的网站就实属不易，这些 adsl 提供商的技术水平普遍不高，往往只能提供 centos 镜像，有 centos 7.1就算不错的了，其中有一家竟然提供了 ubuntu 14.04，结果还是各种问题，坑了我大概半天的时间。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 28 Jun 2017 02:40:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-06-28:/posts/wei-pa-chong-da-jian-dai-li-ji-qun.html</guid><category>计算机</category><category>爬虫</category></item><item><title>dockerfile 基础</title><link>/posts/dockerfile-ji-chu.html</link><description>&lt;p&gt;Dockerfile 列出了构建一个docker image 的&lt;strong&gt;可复现&lt;/strong&gt;步骤。比起一步一步通过 docker commit 来制作一个镜像，dockerfile更适用于CI自动测试等系统。&lt;/p&gt;
&lt;h1&gt;Dockerfile 命令&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;FROM，指定基础镜像&lt;/li&gt;
&lt;li&gt;MAINTAINER，作者，建议格式（&lt;code&gt;Jon Snow &amp;lt;jonsnow@westros.com&amp;gt;&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;EXPOSE，需要暴露的端口，但是一般也会使用 -p 来制定端口映射&lt;/li&gt;
&lt;li&gt;USER，运行的用户&lt;/li&gt;
&lt;li&gt;WORKDIR，进程的工作目录&lt;/li&gt;
&lt;li&gt;COPY，复制文件到&lt;/li&gt;
&lt;li&gt;RUN，运行shell命令&lt;/li&gt;
&lt;li&gt;CMD，启动进程使用的命令&lt;/li&gt;
&lt;li&gt;ENTRYPOINT，镜像启动的入口，默认是 bash -c&lt;/li&gt;
&lt;li&gt;ENV，设定环境变量&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;几个比较容易混淆的&lt;/h2&gt;
&lt;h3&gt;COPY vs ADD&lt;/h3&gt;
&lt;p&gt;ADD 会自动解压压缩包，在不需要特殊操作的时候，最好使用COPY。&lt;/p&gt;
&lt;h3&gt;ENTRYPOINT vs CMD&lt;/h3&gt;
&lt;p&gt;entrypoint 指定了 Docker 镜像要运行的二进制文件（当然也包括参数），而 cmd 则指定了运行这个二进制文件的参数。不过因为默认 entrypoint 是 bash -c，所以实际上 CMD 指定的也是要运行的命令。&lt;/p&gt;
&lt;p&gt;另外，docker run 时候包含命令行参数，会执行命令行参数，而不是 CMD 的内容。如果使用 /bin/bash 作为命令行的指令，这样便替换掉 CMD 的内容，从而进入镜像中查看编译出的镜像究竟是什么样的。&lt;/p&gt;
&lt;p&gt;个人倾向于&lt;strong&gt;只使用 CMD，而不使用 ENTRYPOINT&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;参考：https://stackoverflow.com/a/34245657/1061155&lt;/p&gt;
&lt;h2&gt;使用Dockerfile 还是 commit 来构建镜像&lt;/h2&gt;
&lt;p&gt;如果可能的话，尽量使用 dockerfile&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I've been wondering the same thing, and my impression (which could be totally wrong) it that it's really the same case as with VMs --&amp;gt; you don't want to not know how to recreate the vm image. In my case I have regular .sh scripts to install, and am wondering why I can't just maintain these, run docker and effectively call these, and create the golden version image that way. My scripts work to get it installed on a local PC, and the reason I want to use docker is to deal with conflicts of multiple instances of programs/have clean file system/etc 
https://stackoverflow.com/questions/26110828/should-i-use-dockerfiles-or-image-commits&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 27 Jun 2017 03:54:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-06-27:/posts/dockerfile-ji-chu.html</guid><category>后端</category><category>计算机</category><category>Docker</category></item><item><title>django 小技巧</title><link>/posts/django-xiao-ji-qiao.html</link><description>&lt;h1&gt;运行开发服务器&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python manage.py runserver [host:]port
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以指定绑定的IP&lt;/p&gt;
&lt;h2&gt;创建用户和更改密码&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python manage.py createsuperuser  # 创建超级用户
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python manage.py changepassword username
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;进入当前项目的shell&lt;/h2&gt;
&lt;p&gt;在这个 python shell 中，可以直接使用 django 的model&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python manage.py shell
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;timezone aware time&lt;/h1&gt;
&lt;p&gt;在向数据库中保存datetime字段的时候，经常会遇到 django 报警缺少时区信息，可以使用 django 自带的 timezone.now()&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;timezone&lt;/span&gt;
&lt;span class="n"&gt;now_aware&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 26 Jun 2017 02:24:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-06-26:/posts/django-xiao-ji-qiao.html</guid><category>Django</category><category>后端</category><category>计算机</category></item><item><title>Thrift RPC 框架</title><link>/posts/thrift-rpc-kuang-jia.html</link><description>&lt;p&gt;Thrift 是一个全栈的 RPC 框架，它包含了接口定义语言（IDL）和RPC服务两部分，大概相当于 protobuf + gRPC 的功能。&lt;/p&gt;
&lt;h1&gt;安装&lt;/h1&gt;
&lt;p&gt;可以使用 https://github.com/yifeikong/install 中的脚本来安装&lt;/p&gt;
&lt;h1&gt;Thrift 中的类型与 IDL&lt;/h1&gt;
&lt;p&gt;包括 &lt;code&gt;bool, byte/i8, i16, i32, i64, double, string, binary&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比较蛋疼的是 thrift 不支持 uint，原因是好多语言里面没有原生无符号类型（无语。。）&lt;/li&gt;
&lt;li&gt;binary 类型相当于某些语言中的 bytes&lt;/li&gt;
&lt;li&gt;string 使用 utf-8 编码&lt;/li&gt;
&lt;li&gt;byte 和 i8 是同一个类型，也是有符号的&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;复合类型（struct）&lt;/h2&gt;
&lt;p&gt;struct 就像编程语言中的结构体或者类一样，用来自定义类型。注意在 Thrift 中定义类型的时候需要使用数字标记顺序，这样是为了更高效地序列化。&lt;/p&gt;
&lt;p&gt;注意其中的 required 和 optional 字段，required 表示必选的字段，optional 的字段可以忽略。为了兼容性考虑，建议尽可能把字段声明为 optional。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;struct&lt;/span&gt; &lt;span class="nt"&gt;Cat&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;1:&lt;/span&gt; &lt;span class="err"&gt;required&lt;/span&gt; &lt;span class="err"&gt;i32&lt;/span&gt; &lt;span class="err"&gt;number=10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;可以有默认值&lt;/span&gt;
    &lt;span class="err"&gt;2:&lt;/span&gt; &lt;span class="err"&gt;optional&lt;/span&gt; &lt;span class="err"&gt;i64&lt;/span&gt; &lt;span class="err"&gt;big_number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;3:&lt;/span&gt; &lt;span class="err"&gt;double&lt;/span&gt; &lt;span class="err"&gt;decimal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;4:&lt;/span&gt; &lt;span class="err"&gt;string&lt;/span&gt; &lt;span class="err"&gt;name=&amp;quot;thrifty&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;字符串也可以有默认值&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;exceptions&lt;/h2&gt;
&lt;p&gt;Thrift 中还可以定义异常，关键字是 exception，其他语法和 struct 一样。&lt;/p&gt;
&lt;h2&gt;typedef&lt;/h2&gt;
&lt;p&gt;Thrift 支持 C/C++ 类型的 typedef&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;typedef i32 MyInteger   // 1
typedef Tweet ReTweet   // 2
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;枚举&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="n"&gt;Operation&lt;/span&gt; {
    &lt;span class="n"&gt;ADD&lt;/span&gt; = &lt;span class="mi"&gt;1&lt;/span&gt;;
    &lt;span class="n"&gt;SUB&lt;/span&gt; = &lt;span class="mi"&gt;2&lt;/span&gt;;
    &lt;span class="n"&gt;MUL&lt;/span&gt; = &lt;span class="mi"&gt;3&lt;/span&gt;;
    &lt;span class="n"&gt;DIV&lt;/span&gt; = &lt;span class="mi"&gt;4&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;容器类型&lt;/h2&gt;
&lt;p&gt;Thrift 中包含了常见的容器类型 &lt;code&gt;list set map&lt;/code&gt; 等。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;list&amp;lt;t1&amp;gt;&lt;/code&gt;: 一个t1类型的有序数组&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set&amp;lt;t1&amp;gt;&lt;/code&gt;: 一个t1类型的无需集合&lt;/li&gt;
&lt;li&gt;&lt;code&gt;map&amp;lt;t1,t2&amp;gt;&lt;/code&gt;: 一个字典，key 是 t1 类型，value 是 t2 类型&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;常量&lt;/h2&gt;
&lt;p&gt;使用 const 定义常量&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;const i32 INT_CONST = 1234;    // 1
const map&amp;lt;string,string&amp;gt; MAP_CONST = {&amp;quot;hello&amp;quot;: &amp;quot;world&amp;quot;, &amp;quot;goodnight&amp;quot;: &amp;quot;moon&amp;quot;}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;注释&lt;/h2&gt;
&lt;p&gt;Thrift 支持 Python 和 C++ 类型的注释。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# This is a valid comment.

/*
 * This is a multi-line comment.
 * Just like in C.
 */

// C++/Java style single-line comments work just as well.
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;命名空间&lt;/h2&gt;
&lt;p&gt;for each thrift file, you have to add a namespace for it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;namespace py tutorial
namespace java tutorial
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;include&lt;/h2&gt;
&lt;p&gt;include "other.thrift"&lt;/p&gt;
&lt;h1&gt;服务&lt;/h1&gt;
&lt;p&gt;服务类似于一个接口，在 Thrift 中定义，然后根据 Thrift 生成的文件，再使用具体的代码实现。&lt;/p&gt;
&lt;p&gt;注意其中的 &lt;code&gt;oneway&lt;/code&gt;, 意思是客户端不会等待响应。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;service StringCache {
    void set(1:i32 key, 2:string value),
    string get(1:i32 key) throws (1:KeyNotFound knf),
    oneway void delete(1:i32 key)
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;生成的代码&lt;/h2&gt;
&lt;p&gt;Thrift 的整个网络架构如图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://ws4.sinaimg.cn/large/006tKfTcgy1fslz611nmfj30y40igdj2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;生成的代码位于蓝色的一层，Transport 实现了二进制数据的传输，我们可以选择 TCP 或者 HTTP 等协议传输我们的数据。也就是Processor。Protocol 层定义了如何把Thrift内部结构的数据序列化到二进制数据，或者反过来解析，可以使用 JSON、compact 等转换方法。Processor 负责从 Protocol 中读取请求，调用用户的代码，并写入响应。Server 的实现可以有很多中，比如多线程、多进程的等等。&lt;/p&gt;
&lt;p&gt;Processor 的定义：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;TProcessor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;TProtocol&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TProtocol&lt;/span&gt; &lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;throws&lt;/span&gt; &lt;span class="nx"&gt;TException&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Server 的具体工作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建一个 Transport 用于传输数据&lt;/li&gt;
&lt;li&gt;为这个Transport创建输入输出的 Protocol &lt;/li&gt;
&lt;li&gt;基于上面的 Protocol 创建 Processor&lt;/li&gt;
&lt;li&gt;等待客户端请求，并且把收到的请求交给 Processor 处理，一直循环下去。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;编译&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;thrift -r --gen py file.thrift
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;编译好的文件在 gen-py 目录下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-r&lt;/code&gt; 表示递归编译&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--gen&lt;/code&gt; 指定要生成的语言&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;一个例子&lt;/h1&gt;
&lt;p&gt;handler 对应实现 service
Server 中使用 Handler&lt;/p&gt;
&lt;p&gt;Python的 server 和 client &lt;/p&gt;
&lt;h1&gt;常见问题&lt;/h1&gt;
&lt;p&gt;YN: 线程安全性&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;thrift默认提供了thread/process 等不同的server类型, 需要考虑handler的线程安全问题&lt;/li&gt;
&lt;li&gt;thrift client不是线程安全的, 在多线程程序中使用需要注意(http://grokbase.com/t/thrift/user/127yhv7wmx/is-the-thrift-client-thread-safe)&lt;/li&gt;
&lt;li&gt;看一下pyutil中是如何使用的...&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;何时需要一个 thrift 服务呢？而不是封装一个类或者 dal 来操作？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;跨语言，跨代码库的调用&lt;/li&gt;
&lt;li&gt;需要维持一个很重的资源的服务&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果只是同一个语言内，需要读写一些数据库之类的，封装成一个类就可以了&lt;/p&gt;
&lt;p&gt;Const应该定义在哪儿？&lt;/p&gt;
&lt;p&gt;如果是一个需要在调用过程中使用的常量，使用 thrift，如果是在数据库中存储，使用在代码中定义的常量&lt;/p&gt;
&lt;h2&gt;Thrift vs http api&lt;/h2&gt;
&lt;p&gt;A few reasons other than speed:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Thrift generates the client and server code completely, including the data structures you are passing, so you don't have to deal with anything other than writing the handlers and invoking the client. and everything, including parameters and returns are automatically validated and parsed. so you are getting sanity checks on your data for free.&lt;/li&gt;
&lt;li&gt;Thrift is more compact than HTTP, and can easily be extended to support things like encryption, compression, non blocking IO, etc.&lt;/li&gt;
&lt;li&gt;Thrift can be set up to use HTTP and JSON pretty easily if you want it (say if your client is somewhere on the internet and needs to pass firewalls)&lt;/li&gt;
&lt;li&gt;Thrift supports persistent connections and avoids the continuous TCP and HTTP handshakes that HTTP incurs.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Personally, I use thrift for internal LAN RPC and HTTP when I need connections from outside.&lt;/p&gt;
&lt;h1&gt;参考&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;https://stackoverflow.com/questions/9732381/why-thrift-why-not-http-rpcjsongzip&lt;/li&gt;
&lt;li&gt;https://thrift-tutorial.readthedocs.io/en/latest/usage-example.html#a-simple-example-to-warm-up&lt;/li&gt;
&lt;li&gt;http://thrift-tutorial.readthedocs.io/en/latest/index.html&lt;/li&gt;
&lt;li&gt;https://diwakergupta.github.io/thrift-missing-guide/&lt;/li&gt;
&lt;li&gt;http://thrift.apache.org/tutorial/py&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Fri, 23 Jun 2017 15:45:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-06-23:/posts/thrift-rpc-kuang-jia.html</guid><category>后端</category><category>计算机</category></item><item><title>uwsgi 和 wsgi 协议</title><link>/posts/uwsgi-he-wsgi-xie-yi.html</link><description>&lt;p&gt;uWSGI is a web server than runs python web frameworks. uwsgi(lower case) is the protocol it communicates with front end web servers(nginx)&lt;/p&gt;
&lt;h1&gt;wsgi 协议&lt;/h1&gt;
&lt;p&gt;YN:&lt;/p&gt;
&lt;p&gt;值得注意的是, wsgi实际上定义了一个同步的模型, 也就是每一个客户请求会调用一个同步的函数, 这样也就无法发挥异步的特性.&lt;/p&gt;
&lt;h1&gt;两个最简单的例子&lt;/h1&gt;
&lt;p&gt;其中实现 simple_app 函数也就是实现了wsgi协议.需要注意的有一下三点:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;environ字典中包含的变量&lt;/li&gt;
&lt;li&gt;start_response的参数&lt;/li&gt;
&lt;li&gt;simple_app的调用次序和返回值&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;HELLO_WORLD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello world!\n&amp;quot;&lt;/span&gt;

&lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;simple_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;Simplest possible application object&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;200 OK&amp;#39;&lt;/span&gt;
    &lt;span class="nx"&gt;response_headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content-type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="nx"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response_headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;HELLO_WORLD&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppClass&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;Produce the same output, but using a class&lt;/span&gt;
&lt;span class="s2"&gt;    (Note: &amp;#39;AppClass&amp;#39; is the &amp;quot;&lt;/span&gt;&lt;span class="nx"&gt;application&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; here, so calling it&lt;/span&gt;
&lt;span class="s2"&gt;    returns an instance of &amp;#39;AppClass&amp;#39;, which is then the iterable&lt;/span&gt;
&lt;span class="s2"&gt;    return value of the &amp;quot;&lt;/span&gt;&lt;span class="nx"&gt;application&lt;/span&gt; &lt;span class="nx"&gt;callable&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; as required by&lt;/span&gt;
&lt;span class="s2"&gt;    the spec.&lt;/span&gt;
&lt;span class="s2"&gt;    If we wanted to use *instances* of &amp;#39;AppClass&amp;#39; as application&lt;/span&gt;
&lt;span class="s2"&gt;    objects instead, we would have to implement a &amp;#39;__call__&amp;#39;&lt;/span&gt;
&lt;span class="s2"&gt;    method, which would be invoked to execute the application,&lt;/span&gt;
&lt;span class="s2"&gt;    and we would need to create an instance for use by the&lt;/span&gt;
&lt;span class="s2"&gt;    server or gateway.&lt;/span&gt;
&lt;span class="s2"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;environ&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;environ&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;start_response&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__iter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;200 OK&amp;#39;&lt;/span&gt;
        &lt;span class="nx"&gt;response_headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content-type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response_headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;yield&lt;/span&gt; &lt;span class="nx"&gt;HELLO_WORLD&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;而对于server/gateway来说, 每接收到一个http客户端, 都会调用一次这个 application callable&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;enc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;esc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getfilesystemencoding&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;surrogateescape&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;unicode_to_wsgi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# Convert an environment variable to a WSGI &amp;quot;bytes-as-unicode&amp;quot; string&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;enc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;esc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;iso-8859-1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wsgi_to_bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;iso-8859-1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run_with_cgi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;environ&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;unicode_to_wsgi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;
    &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;wsgi.input&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;
    &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;wsgi.errors&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;
    &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;wsgi.version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;wsgi.multithread&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;wsgi.multiprocess&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;wsgi.run_once&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HTTPS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;off&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;on&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;wsgi.url_scheme&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;wsgi.url_scheme&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;headers_set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;headers_sent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;headers_set&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
             &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;AssertionError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;write() before start_response()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;headers_sent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
             &lt;span class="c1"&gt;# Before the first output, send the stored headers&lt;/span&gt;
             &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response_headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;headers_sent&lt;/span&gt;&lt;span class="p"&gt;[:]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;headers_set&lt;/span&gt;
             &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wsgi_to_bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Status: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
             &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;response_headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                 &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wsgi_to_bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
             &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wsgi_to_bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response_headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exc_info&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;exc_info&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;headers_sent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="c1"&gt;# Re-raise original exception if headers sent&lt;/span&gt;
                    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;exc_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;with_traceback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exc_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;exc_info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;     &lt;span class="c1"&gt;# avoid dangling circular ref&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;headers_set&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;AssertionError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Headers already set!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;headers_set&lt;/span&gt;&lt;span class="p"&gt;[:]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response_headers&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# Note: error checking on the headers should happen here,&lt;/span&gt;
        &lt;span class="c1"&gt;# *after* the headers are set.  That way, if an error&lt;/span&gt;
        &lt;span class="c1"&gt;# occurs, start_response can only be re-called with&lt;/span&gt;
        &lt;span class="c1"&gt;# exc_info set.&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;write&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="c1"&gt;# don&amp;#39;t send headers until body appears&lt;/span&gt;
                &lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;headers_sent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# send headers now if body was empty&lt;/span&gt;
    &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;close&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;参考资料&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;https://bottlepy.org/docs/dev/async.html&lt;/li&gt;
&lt;li&gt;http://uwsgi-docs-cn.readthedocs.io/zh_CN/latest/WSGIquickstart.html&lt;/li&gt;
&lt;li&gt;https://www.digitalocean.com/community/tutorials/how-to-deploy-python-wsgi-applications-using-uwsgi-web-server-with-nginx&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 21 Jun 2017 15:37:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-06-21:/posts/uwsgi-he-wsgi-xie-yi.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>squid proxy</title><link>/posts/squid-proxy.html</link><description>&lt;h1&gt;Install squid&lt;/h1&gt;
&lt;p&gt;plain old &lt;code&gt;apt-get update &amp;amp;&amp;amp; apt-get install squid3 apache2-utils -y&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;Basic squid conf&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;/etc/squid3/squid.conf&lt;/code&gt; instead of the super bloated default config file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# note that on ubuntu 16.04, use squid instead of squid3
auth_param basic program /usr/lib/squid3/basic_ncsa_auth /etc/squid3/passwords
auth_param basic realm proxy
acl authenticated proxy_auth REQUIRED
http_access allow authenticated
forwarded_for delete
http_port 0.0.0.0:3128
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Please note the &lt;code&gt;basic_ncsa_auth&lt;/code&gt; program instead of the old &lt;code&gt;ncsa_auth&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;Setting up a user&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;sudo htpasswd -c /etc/squid3/passwords username_you_like&lt;/code&gt;, &lt;em&gt;on 16.04, it's squid, not squid3&lt;/em&gt;
and enter a password twice for the chosen username then
&lt;code&gt;sudo service squid3 restart&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;see: https://stackoverflow.com/questions/3297196/how-to-set-up-a-squid-proxy-with-basic-username-and-password-authentication&lt;/p&gt;
&lt;h1&gt;centos&lt;/h1&gt;
&lt;p&gt;I have to use centos, since adsl providers are not capable of providing ubuntu&lt;/p&gt;
&lt;p&gt;check out this wonderful article: https://hostpresto.com/community/tutorials/how-to-install-and-configure-squid-proxy-on-centos-7/&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum install -y epel-release
yum install -y squid
yum install -y httpd-tools
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;systemctl start squid
systemctl enable squid
touch /etc/squid/passwd &amp;amp;&amp;amp; chown squid /etc/squid/passwd
htpasswd -c /etc/squid/passwd root
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;edit &lt;code&gt;/etc/squid/squid.conf&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;auth_param basic program /usr/lib64/squid/basic_ncsa_auth /etc/squid/passwd
auth_param basic children 5
auth_param basic realm Squid Basic Authentication
auth_param basic credentialsttl 2 hours
acl auth_users proxy_auth REQUIRED
http_access allow auth_users
http_port 3128
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一个小问题&lt;/p&gt;
&lt;p&gt;squid 默认只允许代理 443 端口的https流量，而会拒绝对其他端口的connect请求。需要更改配置文件&lt;/p&gt;
&lt;p&gt;To fix this, add your port to the line in the config file:
acl SSL_ports port 443
so it becomes
acl SSL_ports port 443 4444
squid 默认还禁止了除了443之外的所有connect 
deny CONNECT !SSL_Ports  # 删掉这一句&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 20 Jun 2017 15:22:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-06-20:/posts/squid-proxy.html</guid><category>计算机</category><category>爬虫</category></item><item><title>Gracefully shutdown inside a event loop</title><link>/posts/gracefully-shutdown-inside-a-event-loop.html</link><description>&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;run_forever&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;finally&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;run_until_complete&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;shutdown_asyncgens&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sun, 18 Jun 2017 08:37:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-06-18:/posts/gracefully-shutdown-inside-a-event-loop.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>steal focus from chrome omnibox on new tab</title><link>/posts/steal-focus-from-chrome-omnibox-on-new-tab.html</link><description>&lt;p&gt;chrome set focus to the omni box when you create a new tab, although there is an api to replace the new tab page. you can't steal the focus from the omni box in the new tab page simply. there are two work-arounds.&lt;/p&gt;
&lt;h1&gt;if you are creating a new tab programmatically&lt;/h1&gt;
&lt;p&gt;https://stackoverflow.com/questions/42178723/chrome-extension-creating-new-tab-and-taking-focus-to-page&lt;/p&gt;
&lt;h1&gt;if you are creating a new tab by click new tab button&lt;/h1&gt;
&lt;p&gt;https://stackoverflow.com/questions/17598778/how-to-steal-focus-from-the-omnibox-in-a-chrome-extension-on-the-new-tab-page&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sun, 18 Jun 2017 03:02:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-06-18:/posts/steal-focus-from-chrome-omnibox-on-new-tab.html</guid><category>大前端</category><category>浏览器扩展</category><category>计算机</category></item><item><title>阅读 redis 源码</title><link>/posts/yue-du-redis-yuan-ma.html</link><description>&lt;ul&gt;
&lt;li&gt;https://zhengqm.github.io/code/2015/06/20/Learn-by-hacking-redis-source-code/&lt;/li&gt;
&lt;li&gt;https://github.com/huangz1990/blog/blob/master/diary/2014/how-to-read-redis-source-code.rst&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;字符串&lt;/h1&gt;
&lt;p&gt;redis 内部使用Simple Data String 代表字符串。结构如下：&lt;/p&gt;
&lt;p&gt;sds的内存分配策略：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果当前内存不能够放得下需要的字符串，长度翻倍。放得下则直接放。当超过30M时，则每次增长1M&lt;/li&gt;
&lt;li&gt;如果释放内存时，不释放空间&lt;/li&gt;
&lt;li&gt;redis的字符串是二进制安全的&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;链表&lt;/h1&gt;
&lt;p&gt;redis 的 list 是使用链表实现的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;typedef struct listNode {
    struct listNode * prev;
    struct listNode * next;
    void * value;
} listNode;

typedef struct list {
    listNode * head;
    listNode * tail;&amp;#39;
    unsigned long len;
    void *(*dup) (void *ptr);
    void (*free)(void *ptr);
    int (*match) (void * ptr, void * key);
} list;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sat, 17 Jun 2017 02:15:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-06-17:/posts/yue-du-redis-yuan-ma.html</guid><category>数据库</category><category>计算机</category></item><item><title>running chrome extension from command line</title><link>/posts/running-chrome-extension-from-command-line.html</link><description>&lt;p&gt;https://stackoverflow.com/questions/22193369/run-chrome-extensions-using-command-prompt&lt;/p&gt;
&lt;p&gt;chrome/firefox 插件源码的位置:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Chrome &lt;code&gt;~/Library/Application Support/Google/Chrome/Default/Extensions/&amp;lt;EXTENSION_ID&amp;gt;/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Firefox  &lt;code&gt;~/Library/Application Support/Firefox/Profiles/PROFILE_ID/extensions/EXTENSION_ID/&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sat, 17 Jun 2017 02:14:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-06-17:/posts/running-chrome-extension-from-command-line.html</guid><category>大前端</category><category>浏览器扩展</category><category>计算机</category></item><item><title>chrome spider</title><link>/posts/chrome-spider.html</link><description>&lt;p&gt;Write it in javascript, &lt;/p&gt;
&lt;p&gt;start script starts chrome and opens the extension by opening extension's page&lt;/p&gt;
&lt;p&gt;another scripts opens a http server locally to feed the initial command and rules&lt;/p&gt;
&lt;p&gt;the extension then executes as instructed&lt;/p&gt;
&lt;p&gt;see also:&lt;/p&gt;
&lt;p&gt;https://chrome.google.com/webstore/detail/wild-spider/aanpchnfojihjddlocpgoekffmjkhbbe&lt;/p&gt;
&lt;p&gt;https://chrome.google.com/webstore/detail/chrome-crawler/amjiobljggbfblhmiadbhpjbjakbkldd/reviews&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Fri, 16 Jun 2017 03:23:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-06-16:/posts/chrome-spider.html</guid><category>JavaScript</category><category>大前端</category><category>计算机</category></item><item><title>MySQL 备份与恢复</title><link>/posts/mysql-bei-fen-yu-hui-fu.html</link><description>&lt;h1&gt;基础使用&lt;/h1&gt;
&lt;p&gt;帮助命令很简单&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Usage&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mysqldump&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;OPTIONS&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tables&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;OR&lt;/span&gt;     &lt;span class="n"&gt;mysqldump&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;OPTIONS&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;databases&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;OPTIONS&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="n"&gt;DB1&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;DB2&lt;/span&gt; &lt;span class="n"&gt;DB3&lt;/span&gt;&lt;span class="o"&gt;...]&lt;/span&gt;
&lt;span class="n"&gt;OR&lt;/span&gt;     &lt;span class="n"&gt;mysqldump&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;OPTIONS&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;databases&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;OPTIONS&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;备份&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;mysqldump -u root --password=xxx DB_NAME [TABLE_NAME] &amp;gt; backup.sql&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;--password&lt;/code&gt; 可以直接在命令中使用密码&lt;/p&gt;
&lt;p&gt;可以选择只 dump 一个数据库或者一个表。&lt;/p&gt;
&lt;h1&gt;恢复&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;mysql -u root -p DB_NAME &amp;lt; backup.sql&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;一行操作&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysqldump -u root -pPassword --all-databases | ssh user@new_host.host.com &amp;#39;cat - | mysql -u root -pPassword&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;问题&lt;/h1&gt;
&lt;p&gt;如果直接备份所有数据库并恢复会更改 root 密码, 并且导致内部数据库不一致, 可以使用如下命令修复:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysql_upgrade --force -uroot -p
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;https://stackoverflow.com/questions/43846950/column-count-of-mysql-user-is-wrong-expected-42-found-44-the-table-is-probabl&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Thu, 15 Jun 2017 07:06:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-06-15:/posts/mysql-bei-fen-yu-hui-fu.html</guid><category>数据库</category><category>计算机</category></item><item><title>developer mis-charging</title><link>/posts/developer-mis-charging.html</link><description>&lt;p&gt;I find it a little funny how unrealistic people can be when evaluating the cost of their problem. Take this one for example: "We have hundreds of images uploaded to our app each day. The issue is some of these images have text that we want cropped out." -- willing to pay? $75/month. Baller!
Chances are this is a problem for a data-mining / ai-training platform that wants to create a better image set. They are charging clients tens of thousands of dollars, and yet willing to pay $100/month to improve the data. lol
reply&lt;/p&gt;
&lt;p&gt;iamwil 8 hours ago | unvote [-]&lt;/p&gt;
&lt;p&gt;On the other hand, it can also go the other way. Non-technical customers don't actually care how hard something is to build, as long as it solves their problem. So it often surprises engineers how a 1 day script can make lots of money for them.
Freelancers often make the same mistake--charging by what it costs to them, plus a little bit more. You should charge how much value it brings to the customer, not how much it costs you to make. Easy to say, hard to do.
reply&lt;/p&gt;
&lt;p&gt;shams93 10 hours ago [-]&lt;/p&gt;
&lt;p&gt;Yeah like replace Quicken for $500 a month, maybe if I was living in a place with no infrastructure I could pull that but then I would never see the site or the post.
reply&lt;/p&gt;
&lt;p&gt;duskwuff 9 hours ago [-]&lt;/p&gt;
&lt;p&gt;My guess was actually that this would be for some sort of image site, to crop attribution information out of images. :/
reply&lt;/p&gt;
&lt;p&gt;giarc 9 hours ago [-]&lt;/p&gt;
&lt;p&gt;Sounds like a project for Mechanical Turk.
reply&lt;/p&gt;
&lt;p&gt;coss 10 hours ago [-]&lt;/p&gt;
&lt;p&gt;It's just 1's and 0's, how hard can it be?
reply&lt;/p&gt;
&lt;p&gt;See: https://news.ycombinator.com/item?id=14555251&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Thu, 15 Jun 2017 06:13:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-06-15:/posts/developer-mis-charging.html</guid><category>创业</category></item><item><title>vim 中的拼写检查</title><link>/posts/vim-zhong-de-pin-xie-jian-cha.html</link><description>&lt;h1&gt;basic usage&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;:set spell&lt;/code&gt; to open, &lt;code&gt;:set nospell&lt;/code&gt; to disable, &lt;code&gt;:set spell!&lt;/code&gt; to toggle.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;]s&lt;/code&gt; and &lt;code&gt;[s&lt;/code&gt; to go to next and previous spell error. &lt;code&gt;z=&lt;/code&gt; to see suggestions, but it's not good. use &lt;code&gt;:nnoremap \s ea&amp;lt;C-X&amp;gt;&amp;lt;C-S&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;set spell&lt;/code&gt; to check spellings in vim, if you find word marked wrongly, simple press &lt;code&gt;zg&lt;/code&gt; to add it the dictionary and &lt;code&gt;zw&lt;/code&gt; to remove it from the dictionary, they can be revoked with &lt;code&gt;zug&lt;/code&gt; and &lt;code&gt;zuw&lt;/code&gt;.
Use &lt;code&gt;]s&lt;/code&gt; to go forward in the highlighted errors and &lt;code&gt;[s&lt;/code&gt; to go backwards.
Use &lt;code&gt;z=&lt;/code&gt; to bring up suggestions&lt;/p&gt;
&lt;p&gt;[1] Vim cast on spell check
http://vimcasts.org/episodes/spell-checking/&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;zg       Add word under the cursor as a good word to the first
         name in &amp;#39;spellfile&amp;#39;.  A count may precede the command
         to indicate the entry in &amp;#39;spellfile&amp;#39; to be used.  A
         count of two uses the second entry.

         In Visual mode the selected characters are added as a
         word (including white space!).
         When the cursor is on text that is marked as badly
         spelled then the marked text is used.
         Otherwise the word under the cursor, separated by
         non-word characters, is used.

         If the word is explicitly marked as bad word in
         another spell file the result is unpredictable.


zG       Like &amp;quot;zg&amp;quot; but add the word to the internal word list
         |internal-wordlist|.


zw       Like &amp;quot;zg&amp;quot; but mark the word as a wrong (bad) word.
         If the word already appears in &amp;#39;spellfile&amp;#39; it is
         turned into a comment line.  See |spellfile-cleanup|
         for getting rid of those.


zW       Like &amp;quot;zw&amp;quot; but add the word to the internal word list
         |internal-wordlist|.

zuw
zug      Undo |zw| and |zg|, remove the word from the entry in
         &amp;#39;spellfile&amp;#39;.  Count used as with |zg|.

zuW
zuG      Undo |zW| and |zG|, remove the word from the internal
         word list.  Count used as with |zg|.
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 14 Jun 2017 04:20:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-06-14:/posts/vim-zhong-de-pin-xie-jian-cha.html</guid><category>vim</category><category>计算机</category><category>通用工具</category></item><item><title>axios and fetch</title><link>/posts/axios-and-fetch.html</link><description>&lt;h1&gt;cookies&lt;/h1&gt;
&lt;p&gt;浏览器中的 JavaScript 运行在一个沙箱中。&lt;/p&gt;
&lt;p&gt;fetch 默认不带 cookie, see https://developer.mozilla.org/en-US/docs/Web/API/Request/credentials&lt;/p&gt;
&lt;p&gt;axios 自动附加请求域名对应的 cookie&lt;/p&gt;
&lt;p&gt;可以使用 JavaScript 设置对应所在域名的 cookie，而 chrome extension 可以设置所有域名的 cookie&lt;/p&gt;
&lt;h1&gt;basic usage&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;try {
    let response = axios.get(url)
} catch (e) {
    console.log(e)
}

// 可以使用的几种语法
axios.get(url)
axios.post(url, data)
axios(config)
axios(url, config)
axios.request(config)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;config fields: &lt;code&gt;params, data, headers, timeout, auth, response&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;或者创建一个实例&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var instance = axios.create({
  baseURL: &amp;#39;https://some-domain.com/api/&amp;#39;,
  timeout: 1000,
  headers: {&amp;#39;X-Custom-Header&amp;#39;: &amp;#39;foobar&amp;#39;}
});

instance.get(&amp;#39;/&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;see&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;https://stackoverflow.com/questions/34558264/fetch-api-with-cookie&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 14 Jun 2017 01:37:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-06-14:/posts/axios-and-fetch.html</guid><category>JavaScript</category><category>大前端</category><category>计算机</category></item><item><title>Chrome Extension runtime</title><link>/posts/chrome-extension-runtime.html</link><description>&lt;h1&gt;basic usage&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chrome.runtime.getBackgroundPage(function(window) {})  // retrive the background page&amp;#39;s window object
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chrome.runtime.getURL(path)  // get the absolute url for given file in extension package
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 12 Jun 2017 15:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-06-12:/posts/chrome-extension-runtime.html</guid><category>大前端</category><category>浏览器扩展</category><category>计算机</category></item><item><title>Chrome Extension Tabs</title><link>/posts/chrome-extension-tabs.html</link><description>&lt;h1&gt;permissions&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;permissions: [
    &amp;quot;tabs&amp;quot;,
]
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;usage&lt;/h1&gt;
&lt;h2&gt;chrome.tabs.query to get current tab&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;chrome&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;tabs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;query&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;currentWindow&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;function&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;tabs&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;tabs&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="nt"&gt;would&lt;/span&gt; &lt;span class="nt"&gt;be&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;current&lt;/span&gt; &lt;span class="nt"&gt;tab&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;create new tab&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chrome.tabs.create({url: URL}, function(tab) {})
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;kill tab&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chrome.tabs.remove(tabId or [tabId], function() {})
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 12 Jun 2017 14:36:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-06-12:/posts/chrome-extension-tabs.html</guid><category>JavaScript</category><category>大前端</category><category>计算机</category></item><item><title>Chrome Extension storage</title><link>/posts/chrome-extension-storage.html</link><description>&lt;h1&gt;Basic Concepts&lt;/h1&gt;
&lt;p&gt;there are 3 storage area for chrome, &lt;code&gt;sync&lt;/code&gt;, &lt;code&gt;local&lt;/code&gt;, &lt;code&gt;managed&lt;/code&gt; areas. the &lt;code&gt;sync&lt;/code&gt; area will be synced with the cloud. managed area is read-only.&lt;/p&gt;
&lt;p&gt;all your extension scripts share the same storage, including content scripts, they don't belong to their domain's localStorage.&lt;/p&gt;
&lt;h1&gt;Usage&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chrome.storage.local.get(&amp;#39;key&amp;#39;, function(data) {});
chrome.storage.local.get([&amp;quot;KEY1&amp;quot;, &amp;quot;KEY2&amp;quot;], function(data) {});

chrome.storage.local.set(data, function() {});  // data is key-value pair to store

chrome.storage.local.remove(&amp;#39;key&amp;#39;, function() {});
chroem.storage.local.remove([&amp;quot;KEY1&amp;quot;, &amp;quot;KEY2&amp;quot;], function() {});
chrome.storage.local.clear(function() {});
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Events&lt;/h1&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 12 Jun 2017 13:30:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-06-12:/posts/chrome-extension-storage.html</guid><category>大前端</category><category>浏览器扩展</category><category>计算机</category></item><item><title>JavaScript snippets</title><link>/posts/javascript-snippets.html</link><description>&lt;h1&gt;get parameter from url&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getParameterByName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/[\[\]]/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\\$&amp;amp;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;RegExp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;[?&amp;amp;]&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;(=([^&amp;amp;#]*)|&amp;amp;|#|$)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;decodeURIComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/\+/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 12 Jun 2017 12:31:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-06-12:/posts/javascript-snippets.html</guid><category>JavaScript</category><category>大前端</category><category>计算机</category></item><item><title>Chrome extension cookies</title><link>/posts/chrome-extension-cookies.html</link><description>&lt;h1&gt;permissions&lt;/h1&gt;
&lt;p&gt;set the cookies permission and the domain you would like to access cookies.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;permissions&amp;quot;: {
    &amp;quot;cookies&amp;quot;,
    &amp;quot;*://*.example.com/&amp;quot;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;type&lt;/h1&gt;
&lt;h2&gt;cookie&lt;/h2&gt;
&lt;p&gt;just a simple object with &lt;code&gt;{name, value, domain...}&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;CookieStore&lt;/h2&gt;
&lt;p&gt;normal mode and incognito mode use different cookie stores.&lt;/p&gt;
&lt;h1&gt;read&lt;/h1&gt;
&lt;p&gt;get: &lt;code&gt;chrome.cookies.get({url: URL, name: COOKIE_NAME, storeId: COOKIE_STORE_ID}, function(cookie) {})&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;get all: &lt;code&gt;chrome.cookies.get({domain: DOMAIN}, function(cookies) {})&lt;/code&gt; NOTE: there are other filters not listed here.&lt;/p&gt;
&lt;p&gt;set: &lt;code&gt;chrome.cookies.set({url, name, value}, function(cookie) {})&lt;/code&gt; if failed, the callback gets null&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 12 Jun 2017 08:01:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-06-12:/posts/chrome-extension-cookies.html</guid><category>大前端</category><category>浏览器扩展</category><category>计算机</category></item><item><title>EcmaScript Set</title><link>/posts/ecmascript-set.html</link><description>&lt;h1&gt;basic usage&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;let set = new Set();
let set = new Set([a, b, c]);

set.size  // the size of set
set.add(a)
set.delete(a)
set.clear()
set.has(value)
set.keys()  // the same as keys
set.values()  // return the values as a iterator
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;reference:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Set"&gt;MDN set&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 12 Jun 2017 00:14:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-06-12:/posts/ecmascript-set.html</guid><category>JavaScript</category><category>大前端</category><category>计算机</category></item><item><title>JavaScript Move Element by Draging</title><link>/posts/javascript-move-element-by-draging.html</link><description>&lt;p&gt;see: https://stackoverflow.com/questions/6230834/html5-drag-and-drop-anywhere-on-the-screen&lt;/p&gt;
&lt;p&gt;but you also need to set &lt;code&gt;-webkit-user-drag: element;&lt;/code&gt; to the element.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sun, 11 Jun 2017 11:20:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-06-11:/posts/javascript-move-element-by-draging.html</guid><category>JavaScript</category><category>大前端</category><category>计算机</category></item><item><title>thinking in vue</title><link>/posts/thinking-in-vue.html</link><description>&lt;h1&gt;basic usage&lt;/h1&gt;
&lt;p&gt;The created vue instance will proxy its data member &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;app&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ol&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;company in companies&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;v-bind:href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;company.link&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;company.text&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;  // bind 更新参数
            &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;v-on:click=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;reverseText&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;逆转消息&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ol&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

let vm = new Vue({
    el: &amp;#39;#app&amp;#39;,
        data: {
            companies: [
                    {text: &amp;#39;Google&amp;#39;, link: &amp;#39;http://google.com&amp;#39;},
                        {text: &amp;#39;fackbook&amp;#39;, link: &amp;#39;http://facebook.com&amp;#39;},
                        {text: &amp;#39;apple&amp;#39;, link: &amp;#39;http://apple.com&amp;#39;}
                ]
        },
        methods: {
            reverseText: function() {
            // 注意 this 绑定到了触发这个事件的元素内部
                    this.company.text = this.company.text.split(&amp;#39;&amp;#39;).reverse.join(&amp;#39;&amp;#39;);
                }
        }   
});

vm.companies.push({text: &amp;#39;Amazon&amp;#39;, link: &amp;#39;http://amazon.com&amp;#39;});
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// computed 属性可以绑定一个虚拟的属性到几个不同的属性上, 有点类似python的@property
// ...
computed: {
  fullName: {
    // getter
    get: function () {
      return this.firstName + &amp;#39; &amp;#39; + this.lastName
    },
    // setter
    set: function (newValue) {
      var names = newValue.split(&amp;#39; &amp;#39;)
      this.firstName = names[0]
      this.lastName = names[names.length - 1]
    }
  }
}
// ...
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 适合用来做自动保存文档等工作
&amp;lt;script&amp;gt;
var watchExampleVM = new Vue({
  el: &amp;#39;#watch-example&amp;#39;,
  data: {
    question: &amp;#39;&amp;#39;,
    answer: &amp;#39;I cannot give you an answer until you ask a question!&amp;#39;
  },
  watch: {
    // 如果 question 发生改变，这个函数就会运行
    question: function (newQuestion) {
      this.answer = &amp;#39;Waiting for you to stop typing...&amp;#39;
      this.getAnswer()
    }
  },
  methods: {
    // _.debounce 是一个通过 lodash 限制操作频率的函数。
    // 在这个例子中，我们希望限制访问 yesno.wtf/api 的频率
    // ajax 请求直到用户输入完毕才会发出
    // 学习更多关于 _.debounce function (and its cousin
    // _.throttle)，参考：https://lodash.com/docs#debounce
    getAnswer: _.debounce(
      function () {
        if (this.question.indexOf(&amp;#39;?&amp;#39;) === -1) {
          this.answer = &amp;#39;Questions usually contain a question mark. ;-)&amp;#39;
          return
        }
        this.answer = &amp;#39;Thinking...&amp;#39;
        var vm = this
        axios.get(&amp;#39;https://yesno.wtf/api&amp;#39;)
          .then(function (response) {
            vm.answer = _.capitalize(response.data.answer)
          })
          .catch(function (error) {
            vm.answer = &amp;#39;Error! Could not reach the API. &amp;#39; + error
          })
      },
      // 这是我们为用户停止输入等待的毫秒数
      500
    )
  }
})
&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;flow control&lt;/h2&gt;
&lt;h3&gt;v-if&lt;/h3&gt;
&lt;p&gt;v-else 元素必须紧跟在 v-if 或者 v-else-if 元素的后面——否则它将不会被识别。v-else-if 也是.&lt;/p&gt;
&lt;p&gt;可以使用template来包装多个元素:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;template&lt;/span&gt; &lt;span class="na"&gt;v-if=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Title&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Paragraph 1&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Paragraph 2&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;v-for&lt;/h3&gt;
&lt;p&gt;v-for的基本语法如前所述, 另外还可以采用可选参数 key. &lt;code&gt;&amp;lt;li v-for="(item, index) in items"&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;v-for还可以遍历对象, &lt;code&gt;&amp;lt;li v-for="value in obj"&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;v-for还可以直接遍历range, &lt;code&gt;&amp;lt;li v-for="n in 10"&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;事件&lt;/h2&gt;
&lt;p&gt;在vue中, 绑定的事件如果需要参数, 可以使用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;v-on:click=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;warn(&amp;#39;Form cannot be submitted yet.&amp;#39;, $event)&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Submit
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;的形式, 其中 $event 指的是原声事件.&lt;/p&gt;
&lt;h3&gt;修饰符&lt;/h3&gt;
&lt;p&gt;vue中的事件绑定函数可以使用一些修饰符来指定一些附加的效果. 常用的有 &lt;code&gt;.prevent&lt;/code&gt;, &lt;code&gt;.stop&lt;/code&gt;, &lt;code&gt;.self&lt;/code&gt;, &lt;code&gt;.once&lt;/code&gt; 等.&lt;/p&gt;
&lt;p&gt;像这样: &lt;code&gt;&amp;lt;a v-on:click.stop="doThis"&amp;gt;&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;对于键盘时间, 还可以使用修饰符来指定键值: &lt;code&gt;&amp;lt;input v-on:keyup.enter="submit"&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;mustache vs &lt;code&gt;v-bind&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;mustache can only be used in textContent of an element, &lt;code&gt;v-bind&lt;/code&gt; is used for attribute.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;v-bind:href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;link_text&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;shortcut&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- 完整语法 --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;v-bind:href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- 缩写 --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;:href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- 完整语法 --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;v-on:click=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;doSomething&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- 缩写 --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;doSomething&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;v-model 做双向绑定&lt;/h2&gt;
&lt;p&gt;use v-model to double bind data between input and js.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;app-6&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;message&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;v-model=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

var app6 = new Vue({
  el: &amp;#39;#app-6&amp;#39;,
  data: {
    message: &amp;#39;Hello Vue!&amp;#39;
  }
})
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;值得注意的是, v-model 本质上只是一个语法糖. 
&lt;code&gt;&amp;lt;input v-model="something"&amp;gt;&lt;/code&gt; is just a syntax sugar to &lt;code&gt;&amp;lt;input v-bind:value="something" v-on:input="something = $event.target.value"&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;text area&lt;/h3&gt;
&lt;p&gt;需要注意的是, textarea 时间上相当于一个input组件, 不能在testarea内部使用 {{value}} 的语法, 而应该使用 &lt;code&gt;v-model&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;Multiline message is:&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;white-space: pre-line;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;message&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;textarea&lt;/span&gt; &lt;span class="na"&gt;v-model=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;message&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;add multiple lines&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/textarea&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;修饰符&lt;/h3&gt;
&lt;p&gt;就像事件一样, 也可以指定一些修饰符给 v-model, 常用的有 &lt;code&gt;.trim&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;vue-component&lt;/h1&gt;
&lt;p&gt;&lt;img src="https://cn.vuejs.org/images/components.png" width=360 /&gt;&lt;/p&gt;
&lt;p&gt;vue 的component中三个重要的概念: props, events, slots.&lt;/p&gt;
&lt;p&gt;其中props向下传递, 用于parent组件向child组件传递值. child组件对于props的访问只能是只读的. 在child组件中使用&lt;code&gt;v-bind:var="var"&lt;/code&gt;来访问定义的props. 注意在组件中不能更改props, 如果需要更改他, 请把他赋值给其他变量, 或者使用 computed 属性.&lt;/p&gt;
&lt;p&gt;如果把模板直接放到dom中会有一些标签渲染不出来, 建议放到 &lt;script type="text/x-template"&gt;&lt;/script&gt; 中&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// 在vue中注册一个组件, 大多数传递给vue实例的参数都可以使用, 除了 data 必须是一个函数

Vue.component(&amp;#39;todo-item&amp;#39;, {
  // todo-item 组件现在接受一个&amp;quot;prop&amp;quot;，类似于一个自定义属性. 这个属性名为 todo。
  props: [&amp;#39;todo&amp;#39;],
  template: &amp;#39;&lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;todo.text&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&amp;#39;,
  data: function() {},
})

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;app-7&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ol&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- 现在我们为每个todo-item提供待办项对象    --&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- 待办项对象是变量，即其内容可以是动态的 --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;todo-item&lt;/span&gt; &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;item in groceryList&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;v-bind:todo=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;item&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/todo-item&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ol&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

Vue.component(&amp;#39;todo-item&amp;#39;, {
  props: [&amp;#39;todo&amp;#39;],
  template: &amp;#39;&lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;todo.text&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&amp;#39;
})
var app7 = new Vue({
  el: &amp;#39;#app-7&amp;#39;,
  data: {
    groceryList: [
      { text: &amp;#39;蔬菜&amp;#39; },
      { text: &amp;#39;奶酪&amp;#39; },
      { text: &amp;#39;随便其他什么人吃的东西&amp;#39; }
    ]
  }
})
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;事件&lt;/h3&gt;
&lt;p&gt;parent组件可以监听子组件的事件, 从而实现通信:&lt;/p&gt;
&lt;p&gt;这个例子中, 子组件通过$emit()函数发送increment事件. parent组件通过监听子组件的increment事件, 从而获得子组件的消息.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;counter-event-example&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;total&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button-counter&lt;/span&gt; &lt;span class="na"&gt;v-on:increment=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;incrementTotal&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/button-counter&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button-counter&lt;/span&gt; &lt;span class="na"&gt;v-on:increment=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;incrementTotal&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/button-counter&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
Vue.component(&amp;#39;button-counter&amp;#39;, {
  template: &amp;#39;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;v-on:click=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;incrementCounter&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;counter&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;&amp;#39;,
  data: function () {
    return {
      counter: 0
    }
  },
  methods: {
    incrementCounter: function () {
      this.counter += 1
      this.$emit(&amp;#39;increment&amp;#39;)
    }
  },
})
new Vue({
  el: &amp;#39;#counter-event-example&amp;#39;,
  data: {
    total: 0
  },
  methods: {
    incrementTotal: function () {
      this.total += 1
    }
  }
})
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;slots&lt;/h3&gt;
&lt;p&gt;slots vs props: slots 用于显示一大片的包含html代码的替换块, 而props 用于显示值, 有点类似 v-bind 和 {{}} 的区别.&lt;/p&gt;
&lt;p&gt;Props 允许外部环境传递数据给组件
Events 允许从外部环境在组件内触发副作用
Slots 允许外部环境将额外的内容组合在组件中。&lt;/p&gt;
&lt;h1&gt;vue router&lt;/h1&gt;
&lt;p&gt;basic: 将组件(components)映射到路由(routes)，然后告诉 vue-router 在哪里渲染它们。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;app&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;router-link&lt;/span&gt; &lt;span class="na"&gt;to=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/user/foo&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;/user/foo&lt;span class="nt"&gt;&amp;lt;/router-link&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;router-link&lt;/span&gt; &lt;span class="na"&gt;to=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/user/bar&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;/user/bar&lt;span class="nt"&gt;&amp;lt;/router-link&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;router-view&amp;gt;&amp;lt;/router-view&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
const User = {
  template: `&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;User &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;route.params.id&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;`
}

const router = new VueRouter({
  mode: &amp;#39;history&amp;#39;,  // 这样才能使用 html5 的history api
  routes: [
    { path: &amp;#39;/user/:id&amp;#39;, component: User }
  ]
})

const app = new Vue({ router }).$mount(&amp;#39;#app&amp;#39;)
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;vue lifecycle&lt;/h1&gt;
&lt;p&gt;&lt;img src="https://cn.vuejs.org/images/lifecycle.png" width=640 /&gt;&lt;/p&gt;
&lt;h1&gt;using in chrome extension&lt;/h1&gt;
&lt;p&gt;chrome does not allow &lt;code&gt;eval&lt;/code&gt; and &lt;code&gt;new Function()&lt;/code&gt; in extensions, vue relies on it. you need to use CSP version of vue or relax the restriction by chrome.&lt;/p&gt;
&lt;p&gt;See also: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://developer.chrome.com/extensions/contentSecurityPolicy#relaxing-eval&lt;/li&gt;
&lt;li&gt;https://stackoverflow.com/questions/34615503/vue-js-in-chrome-extension&lt;/li&gt;
&lt;li&gt;https://vuejs.org/v2/guide/installation.html#CSP-environments&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sat, 10 Jun 2017 04:03:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-06-10:/posts/thinking-in-vue.html</guid><category>JavaScript</category><category>大前端</category><category>计算机</category></item><item><title>Chrome 扩展插件开发</title><link>/posts/chrome-kuo-zhan-cha-jian-kai-fa.html</link><description>&lt;p&gt;A chrome extension can inject script into the page, this is called content script.&lt;/p&gt;
&lt;p&gt;https://developer.chrome.com/extensions/getstarted
https://developer.chrome.com/extensions/content_scripts
https://developer.chrome.com/extensions/messaging&lt;/p&gt;
&lt;p&gt;图标变灰的问题&lt;/p&gt;
&lt;p&gt;Add browser_action.default_icon in your manifest.json file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{
  ...

  &amp;quot;browser_action&amp;quot;: {
    &amp;quot;default_icon&amp;quot;: &amp;quot;icons/icon-32.png&amp;quot;
  },

  ...
}
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Fri, 09 Jun 2017 05:11:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-06-09:/posts/chrome-kuo-zhan-cha-jian-kai-fa.html</guid><category>大前端</category><category>浏览器扩展</category><category>计算机</category></item><item><title>在 Mac 上安装 neovim</title><link>/posts/zai-mac-shang-an-zhuang-neovim.html</link><description>&lt;p&gt;首先通过 homebrew 安装:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;brew install neovim&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后安装 python 支持，好多 vim 插件都需要&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip install neovim&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Fri, 09 Jun 2017 02:42:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-06-09:/posts/zai-mac-shang-an-zhuang-neovim.html</guid><category>vim</category><category>计算机</category><category>通用工具</category></item><item><title>学习 redis 的基础命令</title><link>/posts/xue-xi-redis-de-ji-chu-ming-ling.html</link><description>&lt;p&gt;basically, redis is a data structure server&lt;/p&gt;
&lt;p&gt;string list set sorted set hash&lt;/p&gt;
&lt;h2&gt;key related&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;keys &amp;lt;pattern&amp;gt;  list all keys share the pattern
exists key  
del key 
expire key expiration   
expireat key timestamp  
ttl key 
rename key  
type key    
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;string related&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;set key value   set mystr &amp;quot;hello world&amp;quot;
setex key timeout value set key with expiration
setnx key value set only not exist
get key -&amp;gt; value    get mystr
getset key new -&amp;gt; old   get old and set new
setrange key offset value   
getrange key start end  returns the value, inclusive
mget key... returns a list of values
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;incr key    mynum
decr key    mynum
incrby key value    mynum
decrby key value    mynum
getset  
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;hash&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;hmset key f v ...   store kv pair in hash
hgetall key 
hdel key f  
hexists key f   
hkeys key   
hlen key    
hvals key   
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;lists&lt;/h1&gt;
&lt;p&gt;list is implemented as a double-linked list&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lpush key value1 value2 value3   lpushx only pushes if not exist
rpush   
lpop key    
rpop    
rpoplpush src dst   
blpop key... timeout    block until one value is avaliable
lindex key index    
llen key    
lrange key start end    inclusive
linsert key     
lrem key count value    
lset key index value    
ltrim key start end 
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;tricks&lt;/h1&gt;
&lt;p&gt;to get all elements with lrange: use &lt;code&gt;lrange KYE 0 -1&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;Persistense&lt;/h1&gt;
&lt;p&gt;RDB
AOF&lt;/p&gt;
&lt;h1&gt;Transaction&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;MULTI用来组装一个事务；
EXEC用来执行一个事务；
DISCARD用来取消一个事务；
WATCH用来监视一些key，一旦这些key在事务执行之前被改变，则取消事务的执行。
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;zset&lt;/h1&gt;
&lt;p&gt;rank is which place the value ranked by score in the zset.&lt;/p&gt;
&lt;h2&gt;add and remove cookies&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;zadd KEY SCORE MEMBER           # add a value to a zset
zincrby KEY SCORE MEMBER        # increment the member&amp;#39;s score NOTE redis-py implements wrongly
zrem KEY MEMBER...              # remove a value from zset
zremrangebyrank KEY START STOP  # removes all values in the set within the give index
zremrangebyscore KEY MIN MAX    # removes all values in the set within the given scores
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;get zset stats&lt;/h2&gt;
&lt;p&gt;this is zismember command, just use zscore KEY MEMBER is None to check&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;zcard KEY                       # get the number of elements in a zset
zcount KEY MIN MAX              # count the members in a sorted set with scores within the given scores
zrank KEY MEMBER                # get the index of member in zset
zrevrank KEY MEMBER             # the reverse index of member
zscore KEY MEMBER               # get the score of member in zset
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;read member(s)&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;zrange KEY START END            # a range of members by index
zrevrange KEY START END         # a range of memvers by index, sorted from high to low
zrangebyscore KEY MIN MAX       # a range of members within given scores
zrevrangebyscore KEY MAX MIN    # a range of members within given scores, from max to min
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;set manipulation&lt;/h2&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Thu, 08 Jun 2017 10:19:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-06-08:/posts/xue-xi-redis-de-ji-chu-ming-ling.html</guid><category>数据库</category><category>计算机</category></item><item><title>JavaScript Selection and Range</title><link>/posts/javascript-selection-and-range.html</link><description>&lt;h1&gt;basics&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;window.getSelection&lt;/code&gt; and &lt;code&gt;document.getSelection&lt;/code&gt; all returns the &lt;code&gt;Selection&lt;/code&gt; object, the selection object is almost useless.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;window.getSelection.getRangeAt(0)&lt;/code&gt; returns a Range object. for history reasons, there is only one range in each selection.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rangeAncestor = range.commonAncestorContainer;&lt;/code&gt; commonAncestorContainer is the common ancestor of the range elements.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Thu, 08 Jun 2017 09:40:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-06-08:/posts/javascript-selection-and-range.html</guid><category>JavaScript</category><category>大前端</category><category>计算机</category></item><item><title>Unicode</title><link>/posts/unicode.html</link><description>&lt;h1&gt;Plane（平面）&lt;/h1&gt;
&lt;p&gt;from wikipedia&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In the Unicode standard, a plane is a continuous group of 65536 code points. There are 17 planes, identified by the numbers 0 to 16, which corresponds with the possible values 00–10 hexadecimal of the first two positions in six position format (hhhhhh). &lt;/p&gt;
&lt;p&gt;Plane 0 is the Basic Multilingual Plane (BMP), which contains most commonly-used characters. The higher planes 1 through 16 are called "supplementary planes", As of Unicode version 9.0, six of the planes have assigned code points (characters), and four are named.&lt;/p&gt;
&lt;p&gt;The limit of 17 (which is not a power of 2) is due to the design of UTF-16, which can encode a maximum value of 0x10FFFF,[2] the last code point in plane 16. The encoding scheme used by UTF-8 was designed with a much larger limit of 231 code points (32,768 planes), and can encode 221 code points (32 planes) even if limited to 4 bytes. Since Unicode limits the code points to the 17 planes that can be encoded by UTF-16, &lt;strong&gt;code points above 0x10FFFF are invalid in UTF-8 and UTF-32&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The 17 planes can accommodate 1,114,112 code points. Of these, 2,048 are surrogates, 66 are non-characters, and 137,468 are reserved for private use, leaving 974,530 for public assignment.&lt;/p&gt;
&lt;p&gt;Planes are further subdivided into &lt;em&gt;Unicode blocks&lt;/em&gt;, which, unlike planes, do not have a fixed size. The 273 blocks defined in Unicode 9.0 cover 24% of the possible code point space, and range in size from a minimum of 16 code points (twelve blocks) to a maximum of 65,536 code points (Supplementary Private Use Area-A and -B, which constitute the entirety of planes 15 and 16). For future usage, ranges of characters have been tentatively mapped out for most known current and ancient writing systems.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Plane 0(BMP)&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0000-007F   ASCII       
0080-1FFF   各种鸟语        
2000-206F   常用标点    General Punctuation 包含双引号
2070-209F   上下标     
20A0-20CF   货币符号        
20D0-214F   各种物理符号      
2150-218f   罗马数字        
2190-21ff   箭头 https://en.wikipedia.org/wiki/Arrows_(Unicode_block)  有emoji
2220-22FF   数学符号        
2300-23ff   符号  Miscellaneous Technical 有emoji
2400-245f   符号      
2460-24ff   圆圈  Enclosed Alphanumerics  
2500-257f   画方块字符   Box Drawing 好多人用做竖线
2580-259f   方块字符    Box Elements    
25A0-2e7f   各种奇怪的字符，包含部分表情 emoji
3000-303f   中文符号和标点，包含了中括号等，竟然有双字节宽的引号
3040-33ff   各种中文符号，3190也是竖线
4DC0-4DFF   八卦符号        
4e00-9fff   CJK统一表意文字       
A000-D7af   各种鸟语        
D7B0-D7FF   UTF-16高半区，实际使用D800-DBFF
DC00-DFFF   低半区     
E000-F8FF   私用区, 其中 F8FF 表示 
F900-FAFF   CJK统一表意文字       
FB00-FE0F   各种鸟语        
FE10-FE1F   竖排符号        
FE30-FE4F   CJK兼容标点     
FE50-FE6F   小标点     
FE70-FEFF   鸟语      
FF00-FFEF   全角与半角       
FFF0-FFFF   奇葩      
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Plane 1 (SMP)&lt;/h1&gt;
&lt;p&gt;需要注意的区域&lt;/p&gt;
&lt;p&gt;1F000-1FFFF 各种表情 emoji&lt;/p&gt;
&lt;h1&gt;emoji&lt;/h1&gt;
&lt;h2&gt;text vs emoji style&lt;/h2&gt;
&lt;p&gt;Emoji 有text和emoji-style两种形式，每个emoji 有一个默认的形式，可以添加字符来强制指定形式：&lt;code&gt;\ufe0e&lt;/code&gt; &lt;code&gt;\ufe0f&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;skin colors&lt;/h2&gt;
&lt;p&gt;Emoji可以表示不同的肤色，&lt;code&gt;\u1F3FB–\u1F3FF&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;emoji combination&lt;/h2&gt;
&lt;p&gt;组合，Emoji 还可以组合成新的 emoji，这样来拟补不足，使用&lt;code&gt;\u200d&lt;/code&gt; http://www.unicode.org/emoji/charts/emoji-zwj-sequences.html&lt;/p&gt;
&lt;p&gt;更多 emoji 表情参见：http://www.unicode.org/Public/emoji/1.0/emoji-data.txt&lt;/p&gt;
&lt;h1&gt;Surrogate&lt;/h1&gt;
&lt;p&gt;Surrogate to Non-Surrogate:&lt;/p&gt;
&lt;p&gt;N = 0x10000 + (H - 0xd800) * 0x400 + (L - 0xDC00)&lt;/p&gt;
&lt;p&gt;Non-Surrogate to Surrogate&lt;/p&gt;
&lt;p&gt;H = (N - 0x10000) / 0x400 + 0xD800
L = (N - 0x10000) % 0x400 + 0xdc00&lt;/p&gt;
&lt;p&gt;Python&lt;/p&gt;
&lt;p&gt;narrow build python does not support SMP, python on mac are all narrow build.if you got narrow build, you will have to use to unicode char to represent.&lt;/p&gt;
&lt;p&gt;常见问题&lt;/p&gt;
&lt;p&gt;菊花文&lt;/p&gt;
&lt;p&gt;https://zh.wikipedia.org/wiki/%E8%8F%8A%E8%8A%B1%E6%96%87&lt;/p&gt;
&lt;p&gt;Unicode character orders&lt;/p&gt;
&lt;p&gt;Left-to-Right Mark/Right-to-Left Mark&lt;/p&gt;
&lt;p&gt;not very useful, fix puncutation positions&lt;/p&gt;
&lt;p&gt;https://en.wikipedia.org/wiki/Right-to-left_mark&lt;/p&gt;
&lt;p&gt;Left-to-right Order/Right-to-Left Order&lt;/p&gt;
&lt;p&gt;This is very powerful, override normal character directions&lt;/p&gt;
&lt;p&gt;U+202d   LEFT-TO-RIGHT OVERRIDE         The following text will be left-to-right. Additionally, the directionality of characters is changed to left-to-right. Used alone in an English text, this will only affect characters that are right-to-left by default, like Arabic letters.
U+202e   RIGHT-TO-LEFT OVERRIDE The following text will be right-to-left. Additionally, the directionality of characters is changed to right-to-left. Use this character to completely screw up an English text.&lt;/p&gt;
&lt;p&gt;see
https://www.explainxkcd.com/wiki/index.php/1137:_RTL
https://www.zhihu.com/question/43621727/answer/96178474&lt;/p&gt;
&lt;p&gt;white spaces&lt;/p&gt;
&lt;p&gt;https://en.wikipedia.org/wiki/Whitespace_character&lt;/p&gt;
&lt;h1&gt;reference&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;https://zh.wikibooks.org/wiki/Unicode&lt;/li&gt;
&lt;li&gt;https://en.wikipedia.org/wiki/Emoji&lt;/li&gt;
&lt;li&gt;https://zh.wikipedia.org/zh-cn/Unicode%E5%AD%97%E7%AC%A6%E5%B9%B3%E9%9D%A2%E6%98%A0%E5%B0%84&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Thu, 08 Jun 2017 07:17:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-06-08:/posts/unicode.html</guid><category>编程语言</category><category>计算机</category></item><item><title>Django ORM的使用</title><link>/posts/django-ormde-shi-yong.html</link><description>&lt;h1&gt;定义模型&lt;/h1&gt;
&lt;p&gt;继承 &lt;code&gt;models.Model&lt;/code&gt; 并使用 &lt;code&gt;models.XXXField&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ManyToManyField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;publisher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Publisher&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DO_NOTHING&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;publication_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;Book {self.title}&amp;gt;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;ordering&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;db_table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意其中的 &lt;code&gt;manytomanyfield&lt;/code&gt; and &lt;code&gt;foreignkey&lt;/code&gt; 字段。注意 ForeignKey 字段必须添加 on_delete 参数，参考&lt;a href="https://stackoverflow.com/questions/38388423/what-does-on-delete-do-on-django-models"&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;YN：on_delete 最好使用 models.DO_NOTHING，虽然会造成数据库的完整性缺失，但是没有丢失任何信息。另外，对于数据库来说，尽量少删除数据，而是用一个字段标记为已删除。&lt;/p&gt;
&lt;p&gt;指向自己的外键: &lt;code&gt;models.ForeignKey('self')&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;字段的参数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;null&lt;/code&gt; is the field nullable. default False.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;blank&lt;/code&gt; could this filed be left blank, this is used for django validation, not database scheme, default False.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;db_index&lt;/code&gt; create db index on this field, default False.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;choices&lt;/code&gt; used to limit the choice to that field and the text shown. &lt;code&gt;choices = ((1, 'male'), (0, 'female'))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;default&lt;/code&gt; value or a callable to set default value.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;help_text&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;verbose&lt;/code&gt; verbose name for the field&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unique&lt;/code&gt; should this field be unique.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;primary_key&lt;/code&gt; set this field as primary_key, if this is set, django will not generate id field&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;自动生成的 ID 字段&lt;/h3&gt;
&lt;p&gt;by default, django gives each model a primary key field. if primary_key=True is set on any other field, django will not generate this.&lt;/p&gt;
&lt;h2&gt;class meta&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;db_table&lt;/code&gt;, the dafault is &lt;code&gt;APPNAME_MODEL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ordering&lt;/code&gt;, a list of fields to set order&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unique_together&lt;/code&gt;, a tuple of unique fields tuples: &lt;code&gt;unique_together = (("driver", "restaurant"),)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;index_together&lt;/code&gt;, a list of indexes, &lt;code&gt;index_together = [["pub_date", "deadline"],]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;leave field blank&lt;/h2&gt;
&lt;p&gt;to make string field optional, just add &lt;code&gt;blank = True&lt;/code&gt; if you want to allow blank values in a date field (e.g., DateField, TimeField, DateTimeField) or numeric field (e.g.,IntegerField, DecimalField, FloatField), you’ll need to use both &lt;code&gt;null=True&lt;/code&gt; and &lt;code&gt;blank=True&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;Abstract base class&lt;/h1&gt;
&lt;p&gt;比如说有时候我们对于每一个模型都需要创建 &lt;code&gt;create_time&lt;/code&gt;, &lt;code&gt;modify_time&lt;/code&gt; 字段，在 meta 中设定 abstract 为 true。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CommonInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PositiveIntegerField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;abstract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CommonInfo&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;home_group&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;others&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;如果你想覆盖 __init__ 方法, 记得

def __init__(self, *args, **kwargs):
    super().__init__(self, *args, **kwargs)
    # your code here
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;使用 Model&lt;/h1&gt;
&lt;h2&gt;Create&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Model.objects.create(**kwargs)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Query&lt;/h2&gt;
&lt;p&gt;Model.objects.get(&lt;strong&gt;kwargs)  returns one object, may raise DoesNotExist or MultiOjbectsReturned
Model.objects.all() 
Model.objects.filter(&lt;/strong&gt;kwargs)   returns a query set
Model.objects.order_by(*colnames)   note, you could use "-" in the colnames, cool&lt;/p&gt;
&lt;p&gt;just use filter, &lt;code&gt;get&lt;/code&gt; may raise Exceptions&lt;/p&gt;
&lt;h1&gt;查询条件&lt;/h1&gt;
&lt;p&gt;field__lookuptype=value&lt;/p&gt;
&lt;p&gt;lookups&lt;/p&gt;
&lt;p&gt;&lt;empty&gt;/exact/iexact  &lt;br&gt;
contains/icontains&lt;br&gt;
(i)startswith/(i)endswith &lt;br&gt;
range &lt;br&gt;
in&lt;br&gt;
gt/gte/lt/lte &lt;br&gt;
year/month/day/week_day/hour/minute/second&lt;br&gt;
isnull&lt;br&gt;
regex/iregex    &lt;/p&gt;
&lt;h2&gt;save a model&lt;/h2&gt;
&lt;p&gt;model = Model()
model.save()    note that all of the fields will be updated, not just the ones that have been changed.
model/queryset.update() 
model/queryset.delete() &lt;/p&gt;
&lt;p&gt;QuerySet slicing&lt;/p&gt;
&lt;p&gt;slicing will cause limit cause, brilliant, however, negative slicing is not supported&lt;/p&gt;
&lt;p&gt;Generally, slicing a QuerySet returns a new QuerySet – it doesn’t evaluate the query.An exception is if you use the step parameter of Python slice syntax. For example, this would actually execute the query in order to return a list of every second object of the first 10:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; Entry.objects.all()[:10:2]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;May raise IndexError&lt;/p&gt;
&lt;p&gt;Tricks&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; Publisher.objects.order_by(&amp;#39;name&amp;#39;)[-1]
Traceback (most recent call last):
  ...
AssertionError: Negative indexing is not supported.
This is easy to get around, though. Just change the order_by() statement, like this:
&amp;gt;&amp;gt;&amp;gt; Publisher.objects.order_by(&amp;#39;-name&amp;#39;)[0]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Model.objects.get().delete()&lt;/p&gt;
&lt;p&gt;column can be accessed as attribute&lt;/p&gt;
&lt;p&gt;django abstract base class is fun, but should be avoided, because we want to find-grain control the db&lt;/p&gt;
&lt;p&gt;django-admin makemigrations
django-admin sqlmigrate
don't worry about the numbers of migrations&lt;/p&gt;
&lt;h2&gt;复杂查询，使用 F 和 Q&lt;/h2&gt;
&lt;p&gt;https://docs.djangoproject.com/en/1.10/topics/db/queries/#complex-lookups-with-q&lt;/p&gt;
&lt;p&gt;Keyword argument queries – in filter(), etc. – are “AND”ed together. If you need to execute more complex queries (for example, queries with OR statements), you can use Q objects.&lt;/p&gt;
&lt;p&gt;F and Q
F is for field
Q is for query&lt;/p&gt;
&lt;p&gt;django queryset&lt;/p&gt;
&lt;p&gt;filter(&lt;strong&gt;kwargs)
exclude(&lt;/strong&gt;kwargs)
count
create
get_or_create
update
delete
iterate
exists
iterator&lt;/p&gt;
&lt;p&gt;QuerySets are lazy!&lt;/p&gt;
&lt;p&gt;Each QuerySet contains a cache to minimize database access. Understanding how it works will allow you to write the most efficient code. In a newly created QuerySet, the cache is empty. The first time a QuerySet is evaluated – and, hence, a database query happens – Django saves the query results in the QuerySet’s cache and returns the results that have been explicitly requested (e.g., the next element, if the QuerySet is being iterated over). Subsequent evaluations of the QuerySet reuse the cached results.&lt;/p&gt;
&lt;h2&gt;Using iterator vs directly&lt;/h2&gt;
&lt;p&gt;A QuerySet typically caches its results internally so that repeated evaluations do not result in additional queries. In contrast, iterator() will read results directly, without doing any caching at the QuerySet level (internally, the default iterator calls iterator() and caches the return value). Using iterator would probably save your memory.&lt;/p&gt;
&lt;p&gt;Keep this caching behavior in mind, because it may bite you if you don’t use your QuerySets correctly. For example, the following will create two QuerySets, evaluate them, and throw them away:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; print([e.headline for e in Entry.objects.all()]) # two querysets created and evaluated and thrown
&amp;gt;&amp;gt;&amp;gt; print([e.pub_date for e in Entry.objects.all()])
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That means the same database query will be executed twice, effectively doubling your database load. Also, there’s a possibility the two lists may not include the same database records, because an Entry may have been added or deleted in the split second between the two requests.
To avoid this problem, simply save the QuerySet and reuse it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; queryset = Entry.objects.all()        # store the queryset to a variable
&amp;gt;&amp;gt;&amp;gt; print([p.headline for p in queryset]) # Evaluate the query set.
&amp;gt;&amp;gt;&amp;gt; print([p.pub_date for p in queryset]) # Re-use the cache from the evaluation.
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;When querysets are not cached?&lt;/h2&gt;
&lt;p&gt;Querysets do not always cache their results. When evaluating only part of the queryset, the cache is checked, but if it is not populated then the items returned by the subsequent query are not cached. Specifically, this means that limiting the queryset using an array slice or an index will not populate the cache.&lt;/p&gt;
&lt;p&gt;For example, repeatedly getting a certain index in a queryset object will query the database each time:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; queryset = Entry.objects.all()
&amp;gt;&amp;gt;&amp;gt; print queryset[5] # Queries the database
&amp;gt;&amp;gt;&amp;gt; print queryset[5] # Queries the database again 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, if the entire queryset has already been evaluated, the cache will be checked instead:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; queryset = Entry.objects.all()
&amp;gt;&amp;gt;&amp;gt; [entry for entry in queryset] # Queries the database
&amp;gt;&amp;gt;&amp;gt; print queryset[5] # Uses cache
&amp;gt;&amp;gt;&amp;gt; print queryset[5] # Uses cache 
Here are some examples of other actions that will result in the entire queryset being evaluated and therefore populate the cache:
&amp;gt;&amp;gt;&amp;gt; [entry for entry in queryset]
&amp;gt;&amp;gt;&amp;gt; bool(queryset)
&amp;gt;&amp;gt;&amp;gt; entry in queryset
&amp;gt;&amp;gt;&amp;gt; list(queryset)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;F expressions&lt;/h2&gt;
&lt;p&gt;what if you want to compare the value of a model field with another field on the same model?
use F(colname) to reference the column value&lt;/p&gt;
&lt;h2&gt;Q Expressions&lt;/h2&gt;
&lt;p&gt;encapsulate a collection of keyword arguments. Q objects can be combined using the &amp;amp; and | operators. When an operator is used on two Qobjects, it yields a new Q object.&lt;/p&gt;
&lt;p&gt;by default, all the lookups passed to filter is AND&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Q(question__startswith=&amp;#39;Who&amp;#39;) | Q(question__startswith=&amp;#39;What&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Q supports &amp;amp; / ~&lt;/p&gt;
&lt;p&gt;use Qs as args&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Poll.objects.get(
    Q(question__startswith=&amp;#39;Who&amp;#39;),
    Q(pub_date=date(2005, 5, 2)) | Q(pub_date=date(2005, 5, 6))
)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;if a Q object is provided, it must precede the definition of any keyword arguments.&lt;/p&gt;
&lt;p&gt;if you want to add extra check in model save
just override the defualt save method aorr add post save handlers&lt;/p&gt;
&lt;p&gt;fat models is not all that good, it may cause god object problem&lt;/p&gt;
&lt;p&gt;使用 only 来指定需要的字段。&lt;/p&gt;
&lt;p&gt;如果只需要一个或者几个值，可以使用 values_list 方法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;In [6]: authors = Author.objects.values_list(&amp;#39;name&amp;#39;, &amp;#39;qq&amp;#39;)

In [7]: authors

Out[7]: &amp;lt;QuerySet [(u&amp;#39;WeizhongTu&amp;#39;, u&amp;#39;336643078&amp;#39;), (u&amp;#39;twz915&amp;#39;, u&amp;#39;915792575&amp;#39;), (u&amp;#39;wangdachui&amp;#39;, u&amp;#39;353506297&amp;#39;), (u&amp;#39;xiaoming&amp;#39;, u&amp;#39;004466315&amp;#39;)]&amp;gt;

In [8]: list(authors)

Out[8]: 

[(u&amp;#39;WeizhongTu&amp;#39;, u&amp;#39;336643078&amp;#39;),

 (u&amp;#39;twz915&amp;#39;, u&amp;#39;915792575&amp;#39;),

 (u&amp;#39;wangdachui&amp;#39;, u&amp;#39;353506297&amp;#39;),

 (u&amp;#39;xiaoming&amp;#39;, u&amp;#39;004466315&amp;#39;)]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果只需要 1 个字段，可以指定 flat=True&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;In [9]: Author.objects.values_list(&amp;#39;name&amp;#39;, flat=True)

Out[9]: &amp;lt;QuerySet [u&amp;#39;WeizhongTu&amp;#39;, u&amp;#39;twz915&amp;#39;, u&amp;#39;wangdachui&amp;#39;, u&amp;#39;xiaoming&amp;#39;]&amp;gt;

In [10]: list(Author.objects.values_list(&amp;#39;name&amp;#39;, flat=True))

Out[10]: [u&amp;#39;WeizhongTu&amp;#39;, u&amp;#39;twz915&amp;#39;, u&amp;#39;wangdachui&amp;#39;, u&amp;#39;xiaoming&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;查看执行的 sql 语句和执行时间&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queries&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;why not using foreign keys&lt;/h1&gt;
&lt;p&gt;you can not use foreign keys across two databases&lt;/p&gt;
&lt;h1&gt;如何在 django 外部单独使用&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.apps&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;apps&lt;/span&gt;

&lt;span class="n"&gt;conf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;INSTALLED_APPS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;Demo&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;DATABASES&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;django.db.backends.sqlite3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;db.sqlite3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;populate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;https://stackoverflow.com/a/46050808/1061155&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 07 Jun 2017 18:28:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-06-07:/posts/django-ormde-shi-yong.html</guid><category>Django</category><category>后端</category><category>计算机</category></item><item><title>Python 3 中的 Enum</title><link>/posts/python-3-zhong-de-enum.html</link><description>&lt;p&gt;enum 模块是 Python 3 中新引入的一个用于定义枚举常量的模块。&lt;/p&gt;
&lt;h1&gt;基本使用&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;enum&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Enum&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Enum&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;RED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;GREEN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;BLUE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RED&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;enum&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Color&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GREEN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="c1"&gt;# 可以遍历&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RED&lt;/span&gt;
&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GREEN&lt;/span&gt;
&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BLUE&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Shape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Shape&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SQUARE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Shape&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DIAMOND&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Shape&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CIRCLE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# 可以当做字典使用&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RED&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;RED&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RED&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;# 可以访问 Enum 的 name 和 value 属性&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;red&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RED&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;RED&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;自动值&lt;/h2&gt;
&lt;p&gt;如果枚举的值无关紧要，可以使用 auto，不过一般来说还是不要使用 auto，以免后续存储的数据出问题。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;enum&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Enum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;auto&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Enum&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;RED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;BLUE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;GREEN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RED&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BLUE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GREEN&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;保证值是唯一的&lt;/h2&gt;
&lt;p&gt;使用 &lt;code&gt;enum.unique&lt;/code&gt; 装饰器&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;enum&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Enum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;unique&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nd"&gt;@unique&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Mistake&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Enum&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;ONE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;TWO&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;THREE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;FOUR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;duplicate&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;enum&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Mistake&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;FOUR&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;THREE&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;比较&lt;/h2&gt;
&lt;p&gt;注意 &lt;code&gt;enum.Enum&lt;/code&gt; 并不是 int, 所以并不能比较大小。如果你想要把 enum 当做 int 使用，可以继承 &lt;code&gt;enum.IntEnum&lt;/code&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; Color.RED is Color.RED
True
&amp;gt;&amp;gt;&amp;gt; Color.RED is Color.BLUE
False
&amp;gt;&amp;gt;&amp;gt; Color.RED &amp;lt; Color.BLUE
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
TypeError: &amp;#39;&amp;lt;&amp;#39; not supported between instances of &amp;#39;Color&amp;#39; and &amp;#39;Color&amp;#39;

# 使用 IntEnum 可以比较大小
&amp;gt;&amp;gt;&amp;gt; class IntColor(IntEnum):
...     RED = 1
...     GREEN = 2
...     BLUE = 3
...
&amp;gt;&amp;gt;&amp;gt; IntColor.RED &amp;lt; IntColor.GREEN
True
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;子类&lt;/h1&gt;
&lt;p&gt;只有没定义值的类才可以被继承。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;不可以
&amp;gt;&amp;gt;&amp;gt; class MoreColor(Color):
...     PINK = 17
...
Traceback (most recent call last):
...
TypeError: Cannot extend enumerations


可以
&amp;gt;&amp;gt;&amp;gt; class Foo(Enum):
...     def some_behavior(self):
...         pass
...
&amp;gt;&amp;gt;&amp;gt; class Bar(Foo):
...     HAPPY = 1
...     SAD = 2
...
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;利用函数来生成 enum 对象&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; Color = Enum(&amp;#39;Color&amp;#39;, &amp;#39;RED GREEN BLUE&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;IntFlag 和 Flag&lt;/h1&gt;
&lt;p&gt;IntFlag 也会 Enum 和 int 的子类，可以设置每一个 bit 位。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;enum&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;IntFlag&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Perm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IntFlag&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;W&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Perm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Perm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;W&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Perm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Perm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Perm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;W&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;RW&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Perm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Perm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;W&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Perm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;RW&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;还可以个给组合起来的变量命名&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; class Perm(IntFlag):
...     R = 4
...     W = 2
...     X = 1
...     RWX = 7
&amp;gt;&amp;gt;&amp;gt; Perm.RWX
&amp;lt;Perm.RWX: 7&amp;gt;
&amp;gt;&amp;gt;&amp;gt; ~Perm.RWX
&amp;lt;Perm.-8: -8&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;另外，如果 IntFlag 每个位都没有设定，那么恰好是 0 ，会被当做 False 看待。&lt;/p&gt;
&lt;h1&gt;在 django 模型中使用&lt;/h1&gt;
&lt;p&gt;如果数据库的某一个字段应该是一个枚举，那么使用 enum 再合适不过了。可以这样用：&lt;/p&gt;
&lt;p&gt;```
class Color(IntEnum&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 07 Jun 2017 16:31:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-06-07:/posts/python-3-zhong-de-enum.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>using mysql with django</title><link>/posts/using-mysql-with-django.html</link><description>&lt;p&gt;You probably need to install the followings:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install mysqlclient
apt-get install libmysqlclient-dev mysql-server
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 07 Jun 2017 08:52:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-06-07:/posts/using-mysql-with-django.html</guid><category>Django</category><category>后端</category><category>计算机</category></item><item><title>MySQL “incorrect string value” error when save unicode string in Django</title><link>/posts/mysql-incorrect-string-value-error-when-save-unicode-string-in-django.html</link><description>&lt;h1&gt;Why this happens?&lt;/h1&gt;
&lt;p&gt;You cannot store 4-byte characters in MySQL with the utf-8 character set.&lt;/p&gt;
&lt;h1&gt;solution&lt;/h1&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#! /usr/bin/env python&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;MySQLdb&lt;/span&gt;

&lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;passwd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;passwd&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;youruser&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;dbname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;yourdbname&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MySQLdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;passwd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;passwd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;dbname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ALTER DATABASE `&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;` CHARACTER SET &amp;#39;utf8&amp;#39; COLLATE &amp;#39;utf8_unicode_ci&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;dbname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;sql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;SELECT DISTINCT(table_name) FROM information_schema.columns WHERE table_schema = &amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;dbname&lt;/span&gt;
&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchall&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;sql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ALTER TABLE `&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;` convert to character set DEFAULT COLLATE DEFAULT&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Reference:&lt;/p&gt;
&lt;p&gt;https://stackoverflow.com/questions/2108824&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 07 Jun 2017 08:47:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-06-07:/posts/mysql-incorrect-string-value-error-when-save-unicode-string-in-django.html</guid><category>Django</category><category>后端</category><category>计算机</category></item><item><title>Django Admin 后台教程</title><link>/posts/django-admin-hou-tai-jiao-cheng.html</link><description>&lt;h1&gt;Basics&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;./manage.py startapp APP_NAME&lt;/code&gt; would create an &lt;code&gt;admin.py&lt;/code&gt; file, you should define your admin classes in that file.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;./manage.py createsuperuser&lt;/code&gt; creates a user, so that you could login into the admin site at http://youdomain.com/admin&lt;/p&gt;
&lt;p&gt;by default, the admin panel only contains user and group settings.&lt;/p&gt;
&lt;h1&gt;how to create your own admin&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;subclass &lt;code&gt;django.contrib.admin.ModelAdmin&lt;/code&gt; in &lt;code&gt;admin.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;customize this class&lt;/li&gt;
&lt;li&gt;register it to the admin site&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;subclass&lt;/h2&gt;
&lt;p&gt;最简单的一个例子&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mysite.books.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Publisher&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AuthorAdmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelAdmin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;list_display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;first_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;last_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;search_fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;first_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;last_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;list_filter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;publication_date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;

&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Publisher&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;customize the admin class by change class attributes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;list_display&lt;/code&gt; 控制列表页显示的属性, 其中可以包含 Model 的属性或者函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;search_fields&lt;/code&gt; 表示搜索框会搜索的属性&lt;/li&gt;
&lt;li&gt;&lt;code&gt;list_filter&lt;/code&gt; 表示的是在右边显示的过滤器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fields&lt;/code&gt; 表示的是在每一个object的详情页显示的属性, 更复杂的可以用fieldset. 注意这里面的属性如果是函数的话, 必须包含在 &lt;code&gt;readonly_fields&lt;/code&gt; 中.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;readonly_fields&lt;/code&gt; 表示的是详情页的只读字段&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;每一个属性都是一个 tuple 或者 list, 以 list_display 为例&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;list_display&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;list_display 中的元素可以是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模型中的一个字段&lt;/li&gt;
&lt;li&gt;一个 callable&lt;/li&gt;
&lt;li&gt;A string representing a &lt;code&gt;ModelAdmin&lt;/code&gt; attribute, obj is passed to the method.&lt;/li&gt;
&lt;li&gt;A string representing a model attribute&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;example&lt;/span&gt;
&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;PersonAdmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ModelAdmin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;list_display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;upper_case_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;upper_case_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%s %s&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;upper_case_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;short_description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Name&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;可以覆盖的方法&lt;/h2&gt;
&lt;h3&gt;保存&lt;/h3&gt;
&lt;p&gt;可以覆盖 ModelAdmin.save_model 方法来在保存模型的时候添加删除一些额外的字段，其中 change 表示是在增加还是修改。注意需要调用父类的方法来最终保存这个模型&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ArticleAdmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelAdmin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;save_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;change&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;change&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;删除&lt;/h3&gt;
&lt;p&gt;覆盖 ModelAdmin.delete_model 可以在删除模型的时候做一些额外的操作，注意同样需要调用父类的方法来最终删除模型。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ModelAdmin.delete_model(request, obj)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;更改 admin 后台的界面&lt;/h2&gt;
&lt;p&gt;单独修改某个 Admin&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;MyModelAdmin&lt;/span&gt;(&lt;span class="n"&gt;admin&lt;/span&gt;.&lt;span class="n"&gt;ModelAdmin&lt;/span&gt;):
        &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Media:&lt;/span&gt;
            &lt;span class="n"&gt;js&lt;/span&gt; = (&lt;span class="s"&gt;&amp;#39;js/admin/my_own_admin.js&amp;#39;&lt;/span&gt;,)    
            &lt;span class="n"&gt;css&lt;/span&gt; = {
                 &lt;span class="s"&gt;&amp;#39;all&amp;#39;&lt;/span&gt;: (&lt;span class="s"&gt;&amp;#39;css/admin/my_own_admin.css&amp;#39;&lt;/span&gt;,)
            }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改所有的界面&lt;/p&gt;
&lt;p&gt;从 &lt;code&gt;contrib/admin/templates/admin&lt;/code&gt; 拷贝对应的模板文件到 app 的 templates 目录. 然后修改就可以了~&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 07 Jun 2017 08:07:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-06-07:/posts/django-admin-hou-tai-jiao-cheng.html</guid><category>Django</category><category>后端</category><category>计算机</category></item><item><title>Bootstrap Basics</title><link>/posts/bootstrap-basics.html</link><description>&lt;h1&gt;BootStrap适合做什么&lt;/h1&gt;
&lt;p&gt;Bootstrap适合做没有界面设计，只有功能或者草图，直接通过代码快速的生成一个可用的界面&lt;/p&gt;
&lt;p&gt;Bootstrap不适合&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;已经有了良好的界面设计，包含了各种细节&lt;/li&gt;
&lt;li&gt;在已有的非Bootstrap的界面上进行改动的时候&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;headers&lt;/h1&gt;
&lt;p&gt;add this to headers &lt;code&gt;&amp;lt;meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;grid system&lt;/h1&gt;
&lt;h2&gt;container&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;container&lt;/code&gt; class should be added to the root element where you would like to use bootstrap.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;container-fluid&lt;/code&gt; is for full-width container.&lt;/p&gt;
&lt;h2&gt;row&lt;/h2&gt;
&lt;p&gt;from the official documentation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Content should be placed within columns, and only columns may be immediate children of rows.&lt;/li&gt;
&lt;li&gt;Columns create gutters (gaps between column content) via &lt;strong&gt;padding&lt;/strong&gt;. That padding is offset in rows for the first and last column via negative margin on &lt;code&gt;.rows&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Grid classes apply to devices with screen widths greater than or equal to the breakpoint sizes, and override grid classes targeted at smaller devices. grid classes are &lt;code&gt;col-xs-*&lt;/code&gt;, &lt;code&gt;col-sm-*&lt;/code&gt;, &lt;code&gt;col-md-*&lt;/code&gt;, &lt;code&gt;col-lg-*&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;phone&lt;/th&gt;
&lt;th&gt;tablet&lt;/th&gt;
&lt;th&gt;desktop&lt;/th&gt;
&lt;th&gt;large desktop&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Container width&lt;/td&gt;
&lt;td&gt;None (auto)&lt;/td&gt;
&lt;td&gt;750px&lt;/td&gt;
&lt;td&gt;970px&lt;/td&gt;
&lt;td&gt;1170px&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Class prefix&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.col-xs-&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.col-sm-&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.col-md-&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.col-lg-&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The gutter width for bootstrap is &lt;code&gt;15px&lt;/code&gt; for each column, &lt;code&gt;30px&lt;/code&gt; between.&lt;/p&gt;
&lt;p&gt;generally, you should use the &lt;code&gt;col-sm-N&lt;/code&gt; family of classes. such that it applies for all devices except phones.&lt;/p&gt;
&lt;p&gt;use &lt;code&gt;col-xs-offset-*&lt;/code&gt; classes to offset the columns.&lt;/p&gt;
&lt;p&gt;use &lt;code&gt;col-xs-pull-*&lt;/code&gt; classes to pull column to left, and &lt;code&gt;push&lt;/code&gt; to push to right.&lt;/p&gt;
&lt;h1&gt;安装&lt;/h1&gt;
&lt;p&gt;引入 CSS 和 JS 就好啦，不过限于国内的网络条件，可能做好还是下载到自己服务器吧。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;anonymous&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://code.jquery.com/jquery-3.2.1.slim.min.js&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;anonymous&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;anonymous&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;anonymous&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;starter template&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- Required meta tags --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;viewport&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;width=device-width, initial-scale=1, shrink-to-fit=no&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- Bootstrap CSS --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;anonymous&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Hello, world!&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello, world!&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- Optional JavaScript --&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- jQuery first, then Popper.js, then Bootstrap JS --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://code.jquery.com/jquery-3.2.1.slim.min.js&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;anonymous&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;anonymous&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;anonymous&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;bootstrap 默认已经采用了 border-box 模式。如果需要使用 content-box 需要自己指定。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 07 Jun 2017 07:04:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-06-07:/posts/bootstrap-basics.html</guid><category>CSS</category><category>大前端</category><category>计算机</category></item><item><title>Git 使用技巧</title><link>/posts/git-shi-yong-ji-qiao.html</link><description>&lt;p&gt;最佳实践，每次提交前都使用git status查看已经更改的文件，然后使用git add逐条添加文件,然后再看git status提交的文件是不是都对的. 认真编写.gitignore文件，最好能够做到每次可以使用&lt;code&gt;git add .&lt;/code&gt;是安全的。&lt;/p&gt;
&lt;h1&gt;取消与重置&lt;/h1&gt;
&lt;p&gt;当你的 commit 已经 push 之后就不能再撤销了，只能使用 revert。&lt;/p&gt;
&lt;h2&gt;取消上一个 commit&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git reset HEAD~1
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;reset --mixed will reset the index not the working dir&lt;/li&gt;
&lt;li&gt;reset --soft will only move the HEAD&lt;/li&gt;
&lt;li&gt;reset --hard will even reset the working dir&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;重置到origin库中的 HEAD&lt;/h2&gt;
&lt;p&gt;首先，保存到一个分支&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git commit -a -m &amp;quot;Saving my work, just in case&amp;quot;
git branch my-saved-work
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后，把master分支重置到 origin/master&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git fetch origin
git reset --hard origin/master
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;从 staging area 中删除文件&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git reset HEAD &amp;lt;file&amp;gt;  // remove a file from staging area

git reset // to remove all files from staging area
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;git checkout -- &lt;filename&gt;
git fetch origin &amp;amp;&amp;amp; git reset --hard origin/master&lt;/p&gt;
&lt;h1&gt;push&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;git push --tags&lt;/code&gt; 推送 tag 到远端仓库&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git tag tagname commit_id&lt;/code&gt; 给某个commit打上标签&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git checkout tagname&lt;/code&gt; 切换到某个tag&lt;/p&gt;
&lt;h1&gt;使用 git bisect 二分查找问题&lt;/h1&gt;
&lt;p&gt;use bisect to determine when a bug is introduced by specifying a start point and a end point, and doing a binary search between the commits.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git bisect start
git bisect good xxxxxx
git bisect bad xxxxxx
# begin binary search
run test and mark commits
git bisect good/bad
# end of binary search
# git will prompt a first bad commits
# you can use git log to visualize the process
git bisect reset
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;分支与合并&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git push -u origin master
git checkout -b branch_name # create new branch
git checkout master # switch back
git branch -d branch_name # delete branch
git push origin --delete branch_name # delete remote branch
git push origin branch_name # push to remote
git branch branch -v xxxxxx
git merge branch_name # merge branch_name to current branch
git merge --squash
git merge --abort  # 放弃合并
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当第一次推送某个分支的时候，需要使用 &lt;code&gt;--set-upstream/-u&lt;/code&gt; 来制定要同步的分支。&lt;/p&gt;
&lt;p&gt;为了使commit记录清晰易懂，不产生无谓的commit，应该尽量避免和远程分支合并。每次提交尽量使用pull --rebase，而不是pull and merge。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git pull --rebase  # 如果有冲突的话，先运行 git stash
git stash # if you and remote change the same file
git stash pop  # pull 之后再 stash pop
git commit -am &amp;quot;some change&amp;quot;
git push
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;rebase&lt;/h2&gt;
&lt;p&gt;Once you understand what rebasing is, the most important thing to learn is when not to do it. The golden rule of git rebase is to never use it on public branches.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git rebase origin/master
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;rebase vs merge&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="https://ws4.sinaimg.cn/large/006tKfTcgy1fse6aurc89j30im0dhq3d.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://ws2.sinaimg.cn/large/006tKfTcgy1fse6cbu59sj30h80dnaah.jpg"&gt;&lt;/p&gt;
&lt;h1&gt;advanced stash&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;git stash save "stash_name"  // save a stash with a name&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;apply by name&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[alias]&lt;/span&gt;
&lt;span class="na"&gt;sshow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;!f() { git stash show stash^{/$*} -p; }; f&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;sapply&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;!f() { git stash apply stash^{/$*}; }; f&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;use these lines to show and apply stash by name&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;git stash -p  // stashes which files you select&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;git diff 可以跟时间，来查看一段时间内的改动&lt;/p&gt;
&lt;p&gt;显示某个文件谁的改动最多：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git blame file | sort -b -k 3 # sort by date
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 05 Jun 2017 10:30:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-06-05:/posts/git-shi-yong-ji-qiao.html</guid><category>git</category><category>后端</category><category>计算机</category></item><item><title>Android am command</title><link>/posts/android-am-command.html</link><description>&lt;p&gt;am is short for activity manager, which is used to start and stop activity in android.&lt;/p&gt;
&lt;h2&gt;basic syntax&lt;/h2&gt;
&lt;h3&gt;start an activity&lt;/h3&gt;
&lt;p&gt;you can get the activity name by decompiling the apk and view the androidmanifest.xml file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;am start -n &amp;lt;package_name&amp;gt;/&amp;lt;activity_name&amp;gt; [parameters]
am start -n com.tencent.mm/com.tencent.mm.plugin.webview.ui.tools.WebViewUI http://zhihu.com
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;stop an activity&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;am force-stop com.tencent.mm
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Sat, 03 Jun 2017 15:36:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-06-03:/posts/android-am-command.html</guid><category>大前端</category><category>Android</category><category>计算机</category></item><item><title>使用 Chardet 自动检测文本编码</title><link>/posts/shi-yong-chardet-zi-dong-jian-ce-wen-ben-bian-ma.html</link><description>&lt;p&gt;python 中的 chardet 库可以用来猜测文件的编码&lt;/p&gt;
&lt;h1&gt;usage&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install cchardet
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cchardet&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;chardet&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;chinese_bytes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;中文&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;chardet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;detect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chinese_bytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;confidence&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.7524999976158142&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;encoding&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;UTF-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Fri, 02 Jun 2017 06:23:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-06-02:/posts/shi-yong-chardet-zi-dong-jian-ce-wen-ben-bian-ma.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>CSS remove spaces between inline elements</title><link>/posts/css-remove-spaces-between-inline-elements.html</link><description>&lt;p&gt;https://css-tricks.com/fighting-the-space-between-inline-block-elements/&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 31 May 2017 09:39:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-31:/posts/css-remove-spaces-between-inline-elements.html</guid><category>CSS</category><category>大前端</category><category>计算机</category></item><item><title>Linux 命令行网络相关（curl/wget/nc...）</title><link>/posts/linux-ming-ling-xing-wang-luo-xiang-guan-curlwgetnc.html</link><description>&lt;p&gt;有待整理。。。&lt;/p&gt;
&lt;h1&gt;fuser&lt;/h1&gt;
&lt;p&gt;view which program is using which port.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fuser XXX/tcp  # see which program is using tcp port XXX
fuser XXX/upd  # see which program is using udp port XXX
fuser -k XXX/tcp  # kill the program, if you have right permissions
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;curl&lt;/h1&gt;
&lt;p&gt;wget 功能很有限，httpie 虽然比较人性化但是有很多 bug，还是 curl 比较好用。&lt;/p&gt;
&lt;p&gt;curl -L/--follow http://example.com           follow redirect
curl -I/--head http://example.com             only headers 
curl -o/--output file http://example.com      http -d
curl -v/--verbose http://example.com  &lt;br&gt;
curl --data "key=value" http://example.com&lt;br&gt;
curl --data-urlencode "key=
curl -X/--request GET/POST http://example.com &lt;br&gt;
curl -H/--header "Accept: utf-8"  &lt;br&gt;
curl --referer http://x.com http://example.com
curl --user-agent 
curl --cookie&lt;/p&gt;
&lt;h2&gt;使用代理&lt;/h2&gt;
&lt;p&gt;curl -x &lt;protocol&gt;://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt; --proxy-anyauth &lt;url&gt;&lt;/p&gt;
&lt;h2&gt;cookies&lt;/h2&gt;
&lt;p&gt;curl -v --cookie "USER_TOKEN=Yes" http://127.0.0.1:5000/&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;According to the man page, for option -b, --cookie, e.g. curl -b &lt;file-or-pairs&gt;, if the argument is a string having the '=' symbol, it's passed as is, otherwise it's treated as a filename to read cookie from. – ryenus Oct 21 '14 at 2:10 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;multiple cookies can be set with semicolons --cookie "key1=val1;key2=val2;..."&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;查看网络情况&lt;/h1&gt;
&lt;p&gt;需要注意的是，在 Linux 上 netstat 已经废弃了，应该使用新的 ss 命令。不过在 macOS 等Unix系统中，还是只有netstat&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;netstat -a  list all ports
netstat -at list all tcp ports
netstat -l  all listening ports
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;netstat -in 查看提供网络接口的信息&lt;/p&gt;
&lt;p&gt;netstat -rn 显示路由表&lt;/p&gt;
&lt;p&gt;ifconfig eth0 显示接口的状态&lt;/p&gt;
&lt;p&gt;ifconfig -a 所有接口的状态&lt;/p&gt;
&lt;p&gt;ip addr eth0 全新的命令&lt;/p&gt;
&lt;p&gt;Mac&lt;/p&gt;
&lt;p&gt;和 Linux 基本相同, 但是缺少 ip 指令, 需要安装 iproute2mac 包&lt;/p&gt;
&lt;p&gt;traceroute&lt;/p&gt;
&lt;p&gt;nslookup&lt;/p&gt;
&lt;p&gt;host&lt;/p&gt;
&lt;p&gt;wget --noproxy&lt;/p&gt;
&lt;p&gt;mtr&lt;/p&gt;
&lt;p&gt;bt download&lt;/p&gt;
&lt;p&gt;sudo add-apt-repository ppa:t-tujikawa/ppa 
sudo apt-get update 
sudo apt-get install aria2&lt;/p&gt;
&lt;h1&gt;使用 rsync 同步&lt;/h1&gt;
&lt;p&gt;rsync -azP local_dir remote_dir&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-a&lt;/code&gt; archive，表示归档&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-n&lt;/code&gt; dry-run，只显示要执行的操作而不具体执行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-z&lt;/code&gt; compress，压缩&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-P&lt;/code&gt; --progress + --partial，显示进度同时断点续传&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--exclude=&amp;lt;dir&amp;gt;&lt;/code&gt; exclude directory from being rsynced&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;默认情况下，rsync 使用增量同步，而不会删除文件。使用 &lt;code&gt;--delete&lt;/code&gt; 删除文件&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Wed, 31 May 2017 06:54:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-31:/posts/linux-ming-ling-xing-wang-luo-xiang-guan-curlwgetnc.html</guid><category>后端</category><category>计算机</category></item><item><title>redis 实战总结</title><link>/posts/redis-shi-zhan-zong-jie.html</link><description>&lt;h2&gt;redis是做什么的&lt;/h2&gt;
&lt;p&gt;一个数据结构存储器，数据驻留在内存里，可以在程序的两次之间保存数据&lt;/p&gt;
&lt;h2&gt;一些实现细节和比较好的地方&lt;/h2&gt;
&lt;p&gt;redis 的 string 是 binary-safe 的，可以存储任意的二进制数据（bytes），甚至可以把图片存储在 redis 中&lt;/p&gt;
&lt;h2&gt;经常用到的场合&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;用作缓存&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最基础的，最经典的应用场合，当查询数据库或者ES等存储代价比较高的时候，直接用查询的语句做 key，查询结果用作缓存&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用做队列&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用做集合，也就是存储一批数据的池子。用作有序集合&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;经常遇到的问题&lt;/h2&gt;
&lt;p&gt;过期之间只能指定到键级别，而不能指定到集合的键级别&lt;/p&gt;
&lt;h2&gt;pipeline&lt;/h2&gt;
&lt;p&gt;imporve performance by combining multi command into one and reduce TCP times&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; p = r.pipeline()        # 创建一个管道
&amp;gt;&amp;gt;&amp;gt; p.set(&amp;#39;hello&amp;#39;,&amp;#39;redis&amp;#39;)
&amp;gt;&amp;gt;&amp;gt; p.sadd(&amp;#39;faz&amp;#39;,&amp;#39;baz&amp;#39;)
&amp;gt;&amp;gt;&amp;gt; p.incr(&amp;#39;num&amp;#39;)
&amp;gt;&amp;gt;&amp;gt; p.execute()
[True, 1, 1]
&amp;gt;&amp;gt;&amp;gt; r.get(&amp;#39;hello&amp;#39;)
&amp;#39;redis&amp;#39;

or 
&amp;gt;&amp;gt;&amp;gt; p.set(&amp;#39;hello&amp;#39;,&amp;#39;redis&amp;#39;).sadd(&amp;#39;faz&amp;#39;,&amp;#39;baz&amp;#39;).incr(&amp;#39;num&amp;#39;).execute()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;默认的情况下，管道里执行的命令可以保证执行的原子性，执行pipe = r.pipeline(transaction=False)可以禁用这一特性。&lt;/p&gt;
&lt;h2&gt;坑&lt;/h2&gt;
&lt;p&gt;python redis 客户端中没有decrby指令&lt;/p&gt;
&lt;h1&gt;key 的命名&lt;/h1&gt;
&lt;p&gt;colon sign : is a convention when naming keys. Try to stick with a schema. For instance "object-type:id:field" can be a nice idea, like in "user:1000:password". I like to use dots for multi-words fields, like in "comment:1234:reply.to".&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 14:33:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/redis-shi-zhan-zong-jie.html</guid><category>数据库</category><category>计算机</category></item><item><title>linuxbrew</title><link>/posts/linuxbrew.html</link><description>&lt;p&gt;It can be installed in your home directory and does not require root access.&lt;/p&gt;
&lt;p&gt;ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install)"
PATH="$HOME/.linuxbrew/bin:$PATH"&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 14:20:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/linuxbrew.html</guid><category>后端</category><category>计算机</category></item><item><title>caputre iOS traffic</title><link>/posts/caputre-ios-traffic.html</link><description>&lt;p&gt;RVI&lt;/p&gt;
&lt;p&gt;Step 1. Plug you iPhone with USB
Step 2. go to pgyer.cn, and find the UDID
Step 3. use rvi -x UDID
Step 4. use  wireshark and select the rvi0 device&lt;/p&gt;
&lt;p&gt;http://useyourloaf.com/blog/remote-packet-capture-for-ios-devices/&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 14:10:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/caputre-ios-traffic.html</guid><category>大前端</category><category>Android</category><category>计算机</category></item><item><title>React</title><link>/posts/react.html</link><description>&lt;p&gt;Most important ideas:&lt;/p&gt;
&lt;p&gt;Widget based&lt;/p&gt;
&lt;p&gt;Note: You can write your whole app in React, but you can also use it as a component in your app
props&lt;/p&gt;
&lt;p&gt;state&lt;/p&gt;
&lt;p&gt;Single data flow with dom-diff&lt;/p&gt;
&lt;p&gt;Most Notable methods&lt;/p&gt;
&lt;p&gt;React.Component
React.Component.render
React.render&lt;/p&gt;
&lt;p&gt;Yifei's Notes&lt;/p&gt;
&lt;p&gt;过去写界面的方法是，把所有的结构(html)，动作(js)，样式(css)分开，好处是非侵入，离了谁都鞥工作，缺点是无法模块化，在 js 无足轻重，甚至有 noscript 这种插件的过去显然是最佳实践，但是到了 js 大行其道的今天显然模块化又被提出来了。。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 14:10:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/react.html</guid><category>JavaScript</category><category>大前端</category><category>计算机</category></item><item><title>Michael Sipser - Dean of Science</title><link>/posts/michael-sipser-dean-of-science.html</link><description>&lt;p&gt;Gravity Waves&lt;/p&gt;
&lt;p&gt;LIGO&lt;/p&gt;
&lt;p&gt;Rai Weiss&lt;/p&gt;
&lt;p&gt;RSA is first published in Scientific American&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 14:06:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/michael-sipser-dean-of-science.html</guid><category>talks</category></item><item><title>EcmaScript 6</title><link>/posts/ecmascript-6.html</link><description>&lt;h2&gt;using es6 with babel&lt;/h2&gt;
&lt;h3&gt;debugging mode&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;node_modules/babel-core/browser.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt; 
&lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/babel&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 
// Your ES6 code
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;production mode&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;babel script.js --out-file script-compiled.js&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Yifei's Notes&lt;/h2&gt;
&lt;p&gt;the main impovements of ES6 are loops and generators, let/const, arrow functions, class syntax
small pieces are function arguments, destructuring&lt;/p&gt;
&lt;h2&gt;Looping&lt;/h2&gt;
&lt;p&gt;there are 3 ways to loop a sequence in ES5, but there are problems&lt;/p&gt;
&lt;h3&gt;ES5 Loops&lt;/h3&gt;
&lt;p&gt;// not concise
for (var index = 0; index &amp;lt; myArray.length; index++) { 
    console.log(myArray[index]);
}&lt;/p&gt;
&lt;p&gt;// no break or return
myArray.forEach(function (value) {
    console.log(value); 
});&lt;/p&gt;
&lt;p&gt;// for objects, not arrays
for (var index in myArray) { 
    // don't actually do this
    console.log(myArray[index]); 
}&lt;/p&gt;
&lt;h3&gt;Introducing ES6 Loops&lt;/h3&gt;
&lt;p&gt;// concise and correct
for (let value of myArray) { 
    console.log(value); 
}&lt;/p&gt;
&lt;p&gt;// also works on strings, sets and maps
for (let chr of "") { 
    alert(chr); 
}&lt;/p&gt;
&lt;p&gt;// make a set from an array of words
 var uniqueWords = new Set(words);
for (let word of uniqueWords) {
  console.log(word);
}&lt;/p&gt;
&lt;p&gt;for (var [key, value] of phoneBookMap) { 
    console.log(key + "'s phone number is: " + value); 
}&lt;/p&gt;
&lt;p&gt;// you can even make it work with objects
// dump an object's own enumerable properties to the console 
for (var key of Object.keys(someObject)) { console.log(key + ": " + someObject[key]); }&lt;/p&gt;
&lt;h2&gt;Generator&lt;/h2&gt;
&lt;p&gt;Inside a generator-function, yield is a keyword, with syntax rather like return. The difference is that while a function (even a generator-function) can only return once, a generator-function can yield any number of times. The yield expression suspends execution of the generator so it can be resumed again later.&lt;/p&gt;
&lt;p&gt;Generator functions are basically the pause-and-continue-able function. when you call a generator function, it returns an paused Generator object, which has a next() function, each time you call the next() function, a pair of yielded-value and status is returned.&lt;/p&gt;
&lt;p&gt;In technical terms, each time a generator yields, its stack frame—the local variables, arguments, temporary values, and the current position of execution within the generator body—is removed from the stack. However, the Generator object keeps a reference to (or copy of) this stack frame, so that a later .next() call can reactivate it and continue execution.&lt;/p&gt;
&lt;p&gt;function* fibs() {
  var a = 0;
  var b = 1;
  while (true) {
    yield a;
    [a, b] = [b, a + b];
  }
}&lt;/p&gt;
&lt;p&gt;function* range(start, stop) { for (var i = start; i &amp;lt; stop; i++) yield i; }&lt;/p&gt;
&lt;p&gt;// This should "ding" three times
for (var value of range(0, 3)) {
  alert("Ding! at floor #" + value);
}&lt;/p&gt;
&lt;p&gt;This is possible because generators are iterators. All generators have a built-in implementation of .next() and &lt;a href=""&gt;Symbol.iterator&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Template Strings&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Hello ${user.name}, welcome to our server for the ${times} times&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Rest Parameters and Defaults&lt;/h2&gt;
&lt;p&gt;ES5 version&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;containsAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;haystack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;needle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;haystack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;needle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ES6 version&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;containsAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;haystack&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;needles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;needle&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;needles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;haystack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;needle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ES6 supports default parameters, The default argument gets evaluated at call time, so unlike e.g. in Python, a new object is created each time the function is called.&lt;/p&gt;
&lt;h2&gt;Class&lt;/h2&gt;
&lt;p&gt;ES6 support static method, supuer, getter/setter
you can even subclass builtin types&lt;/p&gt;
&lt;p&gt;class Circle {
    constructor(radius) {
        this.radius = radius;
        Circle.circlesMade++;
    };&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;static draw(circle, canvas) {
    // Canvas drawing code
};

static get circlesMade() {
    return !this._count ? 0 : this._count;
};
static set circlesMade(val) {
    this._count = val;
};

area() {
    return Math.pow(this.radius, 2) * Math.PI;
};

get radius() {
    return this._radius;
};
set radius(radius) {
    if (!Number.isInteger(radius))
        throw new Error(&amp;quot;Circle radius must be an integer.&amp;quot;);
    this._radius = radius;
};
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;var [,,third] = ["foo", "bar", "baz"];
var [head, ...tail] = [1, 2, 3, 4];
console.log(tail);
// [2, 3, 4]&lt;/p&gt;
&lt;p&gt;var robotA = { name: "Bender" };
var robotB = { name: "Flexo" };&lt;/p&gt;
&lt;p&gt;var { name: nameA } = robotA;
var { name: nameB } = robotB;&lt;/p&gt;
&lt;p&gt;console.log(nameA);
// "Bender"
console.log(nameB);
// "Flexo"&lt;/p&gt;
&lt;p&gt;// this is a syntax sugar for variable and key share the same name
var { foo, bar } = { foo: "lorem", bar: "ipsum" };
console.log(foo);
// "lorem"
console.log(bar);
// "ipsum"&lt;/p&gt;
&lt;p&gt;var [missing = true] = [];
console.log(missing);
// true&lt;/p&gt;
&lt;p&gt;var { message: msg = "Something went wrong" } = {};
console.log(msg);
// "Something went wrong"&lt;/p&gt;
&lt;p&gt;var { x = 3 } = {};
console.log(x);
// 3&lt;/p&gt;
&lt;p&gt;// parameters
function removeBreakpoint({ url, line, column }) {
  // ...
}&lt;/p&gt;
&lt;p&gt;// super works as expected, calling super constructor and access base properties&lt;/p&gt;
&lt;p&gt;// you can even subclass builtin types&lt;/p&gt;
&lt;p&gt;CommonJS&lt;/p&gt;
&lt;p&gt;There is a special object called module.exports, when &lt;code&gt;require&lt;/code&gt;ing, the value of module.exports is returned.&lt;/p&gt;
&lt;p&gt;something like that...
var require = function(path) {
    // ...
    return module.exports;
};&lt;/p&gt;
&lt;p&gt;ES6 export&lt;/p&gt;
&lt;p&gt;use the export keyword&lt;/p&gt;
&lt;p&gt;// lib.js
export function foo() {}
export class bar {}
// or 
export {baz, foz};
export {foo as fart};&lt;/p&gt;
&lt;p&gt;// use.js
import {foo, bar} from "lib.js";
import {foo as fart} from "lib.js"; // renaming
import {* as lib} from "lib.js"; // import everything and put in a object&lt;/p&gt;
&lt;p&gt;ES6 import commonJS&lt;/p&gt;
&lt;p&gt;most packages are written in commonJS, for using as ES6 modules:
import _ from "lodash" // which is 
import {default as _} from "lodash" // which is
let _ = require("lodash");&lt;/p&gt;
&lt;p&gt;you can also do module.exports in ES6
export default value;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 13:54:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/ecmascript-6.html</guid><category>JavaScript</category><category>大前端</category><category>计算机</category></item><item><title>Java Notes</title><link>/posts/java-notes.html</link><description>&lt;p&gt;内部类
OuterClassName.InnerClassName
内部类可以直接访问其外围对象的成员，而不需要任何特殊条件
OuterClass.this OuterClass.new  &lt;/p&gt;
&lt;p&gt;匿名内部类非常有用。 new ClassName() {} 创建一个继承自ClassName的匿名类的对象&lt;/p&gt;
&lt;p&gt;嵌套类是指使用了static class 的内部类&lt;/p&gt;
&lt;p&gt;java中不允许变量隐藏&lt;/p&gt;
&lt;p&gt;只有类成员才会默认初始化，普通变量不会&lt;/p&gt;
&lt;p&gt;int x = a.f()
其中，消息是f(), 对象是a,面向对象就是「给对象发消息」&lt;/p&gt;
&lt;p&gt;java中不允许将其他类型用做bool值&lt;/p&gt;
&lt;p&gt;java会为你提供默认构造器（无参构造器）&lt;/p&gt;
&lt;p&gt;无法通过返回值来重载函数&lt;/p&gt;
&lt;p&gt;静态块&lt;/p&gt;
&lt;p&gt;static {
    i = 47;
}&lt;/p&gt;
&lt;p&gt;可变参数列表
doGET(Object... args)&lt;/p&gt;
&lt;p&gt;默认访问权限是包访问权限&lt;/p&gt;
&lt;p&gt;.java 文件编译生成 .class 文件，jar文件是.class 文件的打包&lt;/p&gt;
&lt;p&gt;使用import时，默认去CLASSPATH 查找对应的包&lt;/p&gt;
&lt;p&gt;enum&lt;/p&gt;
&lt;p&gt;enum Color {
    GREEN,
    RED,
    BLUE
}&lt;/p&gt;
&lt;p&gt;annotations&lt;/p&gt;
&lt;p&gt;@Override
@Deprecated
@SurpressWarnings&lt;/p&gt;
&lt;p&gt;Concurrency&lt;/p&gt;
&lt;p&gt;class MyRunnable implements Runnable {}
Thread t = new Thread(new Runnable())&lt;/p&gt;
&lt;p&gt;AtomicInteger AtomicLong AtomicReference&lt;/p&gt;
&lt;p&gt;Oracle Java is more stable than OpenJDK, they are baisclly the same, you can think oracle java as a bugfix version of OpenJDK&lt;/p&gt;
&lt;p&gt;资料&lt;/p&gt;
&lt;p&gt;learnxinyminutes
Java for c++ programmers http://pages.cs.wisc.edu/~hasti/cs368/JavaTutorial/
Effecitve Java&lt;/p&gt;
&lt;p&gt;坑1&lt;/p&gt;
&lt;p&gt;每个文件一个public类, 要求类的名称必须和文件名一样
当然还可以定义一些其他的非 public 的类
javac MyClass.java  生成 MyClass.class 等其他一些文件, 每个类对应一个 class 文件
java MyClass // 这里没有 class 后缀&lt;/p&gt;
&lt;p&gt;坑2&lt;/p&gt;
&lt;p&gt;数组  int[] numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 0}; // 未指定元素会被初始化
ArrayList &lt;br&gt;
LinkedList  &lt;/p&gt;
&lt;p&gt;.length 属性
for 语句
for (int i : numbers) {
    // 
}&lt;/p&gt;
&lt;p&gt;使用 System.arraycopy 来复制数组&lt;/p&gt;
&lt;p&gt;坑3&lt;/p&gt;
&lt;p&gt;switch语句
java 中的 switch 语句和 c 一样, 依然是 fall-through, 在 java 7 中可以 switch string 了&lt;/p&gt;
&lt;p&gt;坑4&lt;/p&gt;
&lt;p&gt;类型转换: Integer.parseInt, Interger.toString&lt;/p&gt;
&lt;p&gt;坑5&lt;/p&gt;
&lt;p&gt;static block
Java has no implementation of static constructors, but has a static block that can be used to initialize class variables (static variables). 
This block will be called when the class is loaded.&lt;/p&gt;
&lt;p&gt;static {
        className = "Bicycle";
    }&lt;/p&gt;
&lt;p&gt;坑6&lt;/p&gt;
&lt;p&gt;构造器可以调用另一个构造器,  使用 this, 还可以使用 super 调用父类的构造器
java 只能单继承, 但是可以实现多个接口, 接口中的方法不能有定义&lt;/p&gt;
&lt;p&gt;坑7&lt;/p&gt;
&lt;p&gt;不能使用==来判断对象(包括字符串)是否相等, 这样只能检测是否指向同一位置.&lt;/p&gt;
&lt;p&gt;坑8 - IO&lt;/p&gt;
&lt;p&gt;System.out.println&lt;/p&gt;
&lt;p&gt;坑9 - 类型&lt;/p&gt;
&lt;p&gt;原始类型    数字型
引用类型    数组和类&lt;/p&gt;
&lt;p&gt;所有类都是 Object 的子类&lt;/p&gt;
&lt;p&gt;坑10 - Java.lang&lt;/p&gt;
&lt;p&gt;String  字符串类
length   长度
equals   相等
toLowerCase/toUpperCase &lt;/p&gt;
&lt;p&gt;包装类 
Integer 
Boolean 
Double  &lt;/p&gt;
&lt;p&gt;坑11 - Package&lt;/p&gt;
&lt;p&gt;使用 package name; 来声明包, 所有的源文件要放在 name 这个文件夹下
可以使用 import package.class 或者 import package.* 来导入包
CLASSPATH 存放 package 的根目录&lt;/p&gt;
&lt;p&gt;坑12 - 异常&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; try {
   // statements that might cause exceptions
   // possibly including function calls
} catch ( exception-1 id-1 ) {
   // statements to handle this exception 
} catch ( exception-2 id-2 ) {
   // statements to handle this exception 
.
.
.
} finally {
   // statements to execute every time this try block executes
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;try {
        return 0; // 被覆盖
    } finally {
        return 2;
    }
尽量避免在 try...catch...finally 中使用控制转移语句&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;            +--------+
            | Object |
            +--------+
            |
            |
           +-----------+
       | Throwable |
           +-----------+
            /         \
       /           \
      +-------+      +-----------+
      | Error |      | Exception |
      +-------+      +-----------+
   /  |  \        / |        \
   \________/     \______/      \
                    +------------------+
unchecked    checked    | RuntimeException |
                +------------------+
                  /   |    |      \
                 \_________________/

                   unchecked
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;checked 和 unchecked exception, RuntimeException 通常是指 unchecked exception
实际上，对于自己编写的异常类来讲，推荐默认的是继承RuntimeException，除非有特殊理由才继承Exception。 C#中没有Checked Exception的概念，这种推荐的做法等于是采用了C#的设计理念：把是否捕获和何时捕获这个问题交给使用者决定，不强制使用者。当然，如果某些情况 下明确提醒捕获更加重要还是可以采用Checked Exception的。对于编写一个方法来讲，“是否在方法上声明一个异常”这个问题比“是否采用Checked Exception”更加重要。&lt;/p&gt;
&lt;p&gt;坑13 - OO
Each superclass method (except its constructors) can be either 
    • inherited, or 
    • overloaded, or 
    • overridden 
inherited: If no method with the same name is (re)defined in the subclass, then the subclass has that method with the same implementation as in the superclass. 
overloaded: If the subclass defines a method with the same name, but with a different number of arguments or different argument types, then the subclass has two methods with that name: the old one defined by the superclass, and the new one it defined. 
overridden: If the subclass defines a method with the same name, and the same number and types of arguments, then the subclass has only one method with that name: the new one it defined. 
使用 super 调用基类的构造器，使用 this 调用自身其他的构造器，如果没有调用基类的构造器，会隐式调用基类的默认构造器&lt;/p&gt;
&lt;p&gt;Recall that every class extends Object. So you might wonder which methods of Object you should consider overriding when you define a new class. There are four methods that often should be overridden: 
    1. toString 
    2. equals 
    3. hashCode 
    4. clone 
public String toString(): Returns a String representation of the object. It is used, for example, by System.out.print to print an object. The default version of toString is not very useful, so you should override this method whenever you want to provide a String representation of your class objects. 
public boolean equals(Object ob): Returns true iff the object (pointed to by "this") and ob are the same. The default version uses pointer equality; i.e., it returns true only if "this" and "ob" contain the same address. You may want to override this method to provide a more liberal notion of equality. For example, the String class overrides equals so that it returns true for two Strings that contain the same sequence of characters. 
public int hashCode(): Returns an integer for this object suitable for use as a hash code (e.g., for use with the Hashtable class defined in javil.util). This method should be overridden whenever the equals method is, so that hashCode returns the same value for two "equal" objects. 
protected Object clone(): Returns a copy of this object (note that no constructor is called for the new object). The default version just copies the values of all fields (i.e., a "shallow" copy). That is probably not what you want when your class has fields that contain pointers (i.e., arrays or classes). So in that case you should override the clone method to do a deep copy -- clone all pointer fields. 
Cloning
To permit your object to be cloned you must declare that your object implements the Cloneable interface. (See the notes on INTERFACES.) For example: 
    public class List implements Cloneable { 
        private Object items[]; // a pointer field! 
        ... 
    } 
If you forget to do this, an attempt to clone will cause the exception CloneNotSupportedException to be thrown. &lt;/p&gt;
&lt;p&gt;坑14 - casting
java 需要显式转换类型
Assume that we have the following declarations of function f and variables h1 and h2: 
    public static void f( RaceHorse r ) { ... } 
    Horse h1 = new RaceHorse(); 
    Horse h2 = new Horse(); 
Now consider the following three calls to f: 
    1. f(h1); // compile-time error (missing cast) 
    2. f( (RaceHorse)h1 ); // fine! h1 really does point to a RaceHorse 
    3. f( (RaceHorse)h2 ); // runtime error (bad cast) h2 points to a Horse &lt;/p&gt;
&lt;p&gt;静态方法和成员变量并没有 dynamic dispatching
可以使用 super.xxx()调用父类已经被重载的方法&lt;/p&gt;
&lt;p&gt;坑15 - Interface&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 13:46:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/java-notes.html</guid><category>大前端</category><category>Android</category><category>计算机</category></item><item><title>lua</title><link>/posts/lua.html</link><description>&lt;p&gt;lua_pcall 是使用 c 中的 setjmp 实现的, 对应在lua 中的函数就是 pcall&lt;/p&gt;
&lt;p&gt;pcall/error 大概就相当于其他语言中的 try-catch /throw了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;local ok, errorobject = pcall(function() 
    --here goes the protected code 
    ... 
end) 

if not ok then 
    --here goes the error handling code 
    --(errorobject has more information about the error) 
    ... 
end 
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;协程&lt;/h1&gt;
&lt;p&gt;对称协程只有一个关键字: transfer, 类似于 goto 语句, 把控制权移交给其他的任意一个协程; 而非对称协程一般有两个关键字:resume 和 yield, 使用 resume打开一个协程, 然后在这个协程中使用 yield 返回.&lt;/p&gt;
&lt;p&gt;学习lua可以获得&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;怎样实现一门语言，编译原理，离散数学&lt;/li&gt;
&lt;li&gt;lua本身&lt;/li&gt;
&lt;li&gt;虚拟机，jit&lt;/li&gt;
&lt;li&gt;C语言能力的增强&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;lua 的标准库补充 &lt;a href="https://github.com/stevedonovan/Penlight"&gt;Penlight&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://ww4.sinaimg.cn/large/006tNbRwgy1fg3q43bjn9j31kw1rgk1j.jpg"&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 13:45:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/lua.html</guid><category>Lua</category><category>编程语言</category><category>计算机</category></item><item><title>openresty</title><link>/posts/openresty.html</link><description>&lt;ol&gt;
&lt;li&gt;The *by_lua modules that tweak the nginx behaviour (for ex the rewrite_by_lua that is the lua equivalent of nginx http rewrite) module are always run after the standard nginx modules.&lt;/li&gt;
&lt;li&gt;The choice of *by_lua module to use largely depends upon the problem that you are trying to solve. For example the init_by_lua module is used for initialization operations where as access_by_lua may be used to implement access policies for a location block. Personally among the various directives I find most use for content_by_lua. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;From &lt;a href="http://www.staticshin.com/programming/definitely-an-open-resty-guide/"&gt;http://www.staticshin.com/programming/definitely-an-open-resty-guide/&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;http://www.londonlua.org/scripting_nginx_with_lua/slides.html&lt;/p&gt;
&lt;p&gt;Lua can access nginx at different phase, the most important directives are:&lt;/p&gt;
&lt;p&gt;Rewrite_by_lua&lt;br&gt;
Access_by_lua &lt;br&gt;
Content_by_lua&lt;br&gt;
Init_by_lua 
Set_by_lua  &lt;/p&gt;
&lt;p&gt;Rememeber to set lua_code_cache when developing&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;ngx.location.capture&lt;/code&gt; to issue a sub-request to other locations in nginx &lt;/p&gt;
&lt;p&gt;&lt;code&gt;ngx.ctx&lt;/code&gt; is a lua table to store data with a lifetime&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 13:44:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/openresty.html</guid><category>Lua</category><category>编程语言</category><category>计算机</category></item><item><title>lua coroutine</title><link>/posts/lua-coroutine.html</link><description>&lt;p&gt;Lua 的协程是非对称的协程也就是 resume 和 yeild 相当于调用和返回&lt;/p&gt;
&lt;p&gt;Python 的协程是对称的协程, 相当于 goto.&lt;/p&gt;
&lt;p&gt;Lua中携程相关的函数都放在coroutine包中
coroutine.create(function)  返回一个thread类型的值表示一个协程，并且处于suspend状态。
resume(co, params…) 执行一个协程，并且能够传递参数，返回运行的状态的函数yield返回的结果&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 13:43:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/lua-coroutine.html</guid><category>Lua</category><category>编程语言</category><category>计算机</category></item><item><title>Lua 中的迭代器</title><link>/posts/lua-zhong-de-die-dai-qi.html</link><description>&lt;p&gt;Lua中有两种for语句，最基本的是&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for i = 1, 10 do
    print i
end
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;还有一种是for in语句&lt;/p&gt;
&lt;p&gt;for I in pairs(t) do
       print I
   end&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 13:42:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/lua-zhong-de-die-dai-qi.html</guid><category>Lua</category><category>编程语言</category><category>计算机</category></item><item><title>jQuery and un-jQuery</title><link>/posts/jquery-and-un-jquery.html</link><description>&lt;h1&gt;jQuery&lt;/h1&gt;
&lt;p&gt;$el.append(htmlString)
$el.prepend(htmlString)&lt;/p&gt;
&lt;p&gt;$newEl.insertBefore(queryString)
$newEl.insertAfter(queryString)&lt;/p&gt;
&lt;h1&gt;un-jQuery&lt;/h1&gt;
&lt;h2&gt;DOM 操作&lt;/h2&gt;
&lt;p&gt;选择器可以使用 querySelector 和 querySelectorAll, 但是这两个的性能太差了, 最好使用 getElementById, getElementsByTagName, getElementsByClassName&lt;/p&gt;
&lt;p&gt;$el.val() 对应 el.value&lt;/p&gt;
&lt;h3&gt;获取 attr&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$el.attr(&amp;#39;id&amp;#39;);
el.getAttribute(&amp;#39;id);
el.setAttribute(attr, value)
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;parent and children&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$el.children
$el.parent()
el.children
el.parentNode
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;设置 css&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;el&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;css&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;#000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;#000&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;css&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;color&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;getComputedStyle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;el&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;color&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;特别地
$(el).hide(); // jQuery
el.style.display = 'none'; // native
$(el).show(); // jQuery
el.style.dispaly = ''&lt;/p&gt;
&lt;h3&gt;设置 class&lt;/h3&gt;
&lt;p&gt;$el.addClass(className) // remove, has, toggle
el.classList.add(className) // remove, contains, toggle&lt;/p&gt;
&lt;p&gt;设置text
Get text
// jQuery
$el.text();
// Native
el.textContent;&lt;/p&gt;
&lt;p&gt;Set text
// jQuery
$el.text(string);&lt;/p&gt;
&lt;p&gt;// Native
el.textContent = string;&lt;/p&gt;
&lt;h2&gt;设置html&lt;/h2&gt;
&lt;p&gt;Get HTML
// jQuery
$el.html();&lt;/p&gt;
&lt;p&gt;// Native
el.innerHTML;
Set HTML
// jQuery
$el.html(htmlString);&lt;/p&gt;
&lt;p&gt;// Native
el.innerHTML = htmlString;&lt;/p&gt;
&lt;h2&gt;inserting html fragment to document&lt;/h2&gt;
&lt;p&gt;Have a look at &lt;code&gt;insertAdjacentHTML&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var element = document.getElementById(&amp;quot;one&amp;quot;);
var newElement = &amp;#39;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;two&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;two&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&amp;#39;
element.insertAdjacentHTML( &amp;#39;afterend&amp;#39;, newElement )
// new DOM structure: &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;one&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;one&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;two&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;two&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
position is the position relative to the element you are inserting adjacent to:
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;beforebegin&lt;/code&gt; Before the element itself&lt;/p&gt;
&lt;p&gt;&lt;code&gt;afterbegin&lt;/code&gt; Just inside the element, before its first child&lt;/p&gt;
&lt;p&gt;&lt;code&gt;beforeend&lt;/code&gt; Just inside the element, after its last child&lt;/p&gt;
&lt;p&gt;&lt;code&gt;afterend&lt;/code&gt; After the element itself&lt;/p&gt;
&lt;p&gt;事件&lt;/p&gt;
&lt;p&gt;绑定事件 
$el.on(eventName, eventHandler);  // jQuery
el.addEventListener(eventName, eventHandler);  // Native&lt;/p&gt;
&lt;p&gt;解绑事件
$el.off(eventName, eventHandler);  // jQuery
el.removeEventListener(eventName, eventHandler);  // Native&lt;/p&gt;
&lt;p&gt;触发事件
// 用户事件
$(el).trigger('custom-event', {key1: 'data'});  // jQuery
// Native, note that
const event = new CustomEvent('custom-event', {detail: {key1: 'data'}});
el.dispatchEvent(event);&lt;/p&gt;
&lt;p&gt;// 原生事件
$(el).trigger('change');
var ev = new Event("look", {"bubbles":true, "cancelable":false});
document.dispatchEvent(ev);&lt;/p&gt;
&lt;h2&gt;ajax&lt;/h2&gt;
&lt;p&gt;getJSON
jQuery
$.getJSON('/my/url', function(data) {
});
IE9+
var request = new XMLHttpRequest();
request.open('GET', '/my/url', true);
request.onload = function() {
  if (request.status &amp;gt;= 200 &amp;amp;&amp;amp; request.status &amp;lt; 400) {
    // Success!
    var data = JSON.parse(request.responseText);
  } else {
    // We reached our target server, but it returned an error
}
};
request.onerror = function() {
  // There was a connection error of some sort
};
request.send();
Post
jQuery
$.ajax({
  type: 'POST',
  url: '/my/url',
  data: data
});
IE8+
var request = new XMLHttpRequest();
request.open('POST', '/my/url', true);
request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');
request.send(data);
Request
jQuery
$.ajax({
  type: 'GET',
  url: '/my/url',
  success: function(resp) {
},
  error: function() {
}
});
IE9+
var request = new XMLHttpRequest();
request.open('GET', '/my/url', true);
request.onload = function() {
  if (request.status &amp;gt;= 200 &amp;amp;&amp;amp; request.status &amp;lt; 400) {
    // Success!
    var resp = request.responseText;
  } else {
    // We reached our target server, but it returned an error
}
};
request.onerror = function() {
  // There was a connection error of some sort
};
request.send();&lt;/p&gt;
&lt;p&gt;DOM Ready&lt;/p&gt;
&lt;p&gt;https://github.com/oneuijs/You-Dont-Need-jQuery/blob/master/README.zh-CN.md
http://youmightnotneedjquery.com/&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 13:41:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/jquery-and-un-jquery.html</guid><category>JavaScript</category><category>大前端</category><category>计算机</category></item><item><title>lua 三部曲</title><link>/posts/lua-san-bu-qu.html</link><description>&lt;p&gt;Programming in Lua&lt;/p&gt;
&lt;p&gt;Lua编程手册&lt;/p&gt;
&lt;p&gt;Lua Unofficial FAQ&lt;/p&gt;
&lt;p&gt;知乎上 lua 相关的问题&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 13:36:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/lua-san-bu-qu.html</guid><category>Lua</category><category>编程语言</category><category>计算机</category></item><item><title>Python `-m`</title><link>/posts/python-m.html</link><description>&lt;h2&gt;How &lt;code&gt;-m&lt;/code&gt; is invoked&lt;/h2&gt;
&lt;p&gt;if you have a module foo&lt;/p&gt;
&lt;p&gt;write
foo/
    &lt;strong&gt;init&lt;/strong&gt;.py
    &lt;strong&gt;main&lt;/strong&gt;.py&lt;/p&gt;
&lt;p&gt;then python -m foo will execute &lt;strong&gt;main&lt;/strong&gt;.py&lt;/p&gt;
&lt;p&gt;https://pythonwise.blogspot.sg/2015/01/python-m.html&lt;/p&gt;
&lt;p&gt;json pretty print&lt;/p&gt;
&lt;p&gt;cat some_json_file | python -m json.tool&lt;/p&gt;
&lt;p&gt;zipfile&lt;/p&gt;
&lt;p&gt;zipfile.py -l zipfile.zip        # Show listing of a zipfile
zipfile.py -t zipfile.zip        # Test if a zipfile is valid
zipfile.py -e zipfile.zip target # Extract zipfile into target dir
zipfile.py -c zipfile.zip src ... # Create zipfile from sources&lt;/p&gt;
&lt;p&gt;gzip&lt;/p&gt;
&lt;p&gt;python -m gzip wordlist.txt  # Will create wordlist.txt.gz
python -m gzip -d wordlist.txt.gz  # Will extract to wordlist.txt&lt;/p&gt;
&lt;p&gt;filecmp&lt;/p&gt;
&lt;p&gt;compare two directories&lt;/p&gt;
&lt;p&gt;$ python -m filecmp /tmp/a /tmp/b
diff /tmp/a /tmp/b
Only in /tmp/a : ['1']
Only in /tmp/b : ['2']
Identical files : ['4']
Differing files : ['3']&lt;/p&gt;
&lt;p&gt;Several modules lets you encode/decode in various formats:
    • base64
    • uu
    • encodings.rot_13
    • binhex
    • mimify
    • quopri
For example
$ echo 'secertpassword' | python -m encodings.rot_13
frpregcnffjbeq&lt;/p&gt;
&lt;p&gt;servers&lt;/p&gt;
&lt;p&gt;python -m SimpleHTTPServer # 2
python -m http.server #3&lt;/p&gt;
&lt;p&gt;python -m pydoc {module/func}&lt;/p&gt;
&lt;p&gt;Profiling&lt;/p&gt;
&lt;p&gt;python -m cProfile script.py
python -m timeit script.py
python -m pstats script.py
python -m trace script.py&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 13:19:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/python-m.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>do not subclass built-in classes in python</title><link>/posts/do-not-subclass-built-in-classes-in-python.html</link><description>&lt;p&gt;In short, they will not behave what you think they will. you think dict.get in implemented in python, like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def get(self, key, default=None):
    try:
        return self[key]
    except KeyError:
        return default
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, they dict.get do not call &lt;strong&gt;getitem&lt;/strong&gt;, and they are implemented in c separately, and do not call each other.&lt;/p&gt;
&lt;p&gt;so, when you implement &lt;strong&gt;geitem&lt;/strong&gt;, get is not automatically altered! which is very dangerous.&lt;/p&gt;
&lt;p&gt;What you need do, subclass collections.abc.Mapping&lt;/p&gt;
&lt;p&gt;source:&lt;/p&gt;
&lt;p&gt;[1] http://www.kr41.net/2016/03-23-dont_inherit_python_builtin_dict_type.html&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 13:17:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/do-not-subclass-built-in-classes-in-python.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>Python 中复合的 list comprehension</title><link>/posts/python-zhong-fu-he-de-list-comprehension.html</link><description>&lt;p&gt;Python 中的 list comprehension 可以复合&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[x for li in lists for x in li if x]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;就相当于&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[x
    for li in lists
        for x in li
             if x]
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 13:17:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/python-zhong-fu-he-de-list-comprehension.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>ad talks</title><link>/posts/ad-talks.html</link><description>&lt;p&gt;广告检索相当于先验知识，如果先验知识有效后可以放开&lt;/p&gt;
&lt;p&gt;定向给广告主可见，哈哈&lt;/p&gt;
&lt;p&gt;应定向和软定向。。&lt;/p&gt;
&lt;p&gt;如果slave长期处于 standby 状态，真切过去的时候会不会 slave 根本不可用呢？要不要长期监控 salve 是不是好的&lt;/p&gt;
&lt;p&gt;广告预控，取决于预估CPM与CPM的匹配程度，在快要达到预扣费的时候开始减慢速度。&lt;/p&gt;
&lt;p&gt;PID 老一套，但是调参就可以根据历史数据由机器来调了，很好&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 13:13:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/ad-talks.html</guid><category>talks</category></item><item><title>vim 中生成和使用 tags</title><link>/posts/vim-zhong-sheng-cheng-he-shi-yong-tags.html</link><description>&lt;p&gt;To use go to definition and other advanced IDE feature, we need to generate tag files for vim to figure out where to find the functions or variables.&lt;/p&gt;
&lt;p&gt;To generate a tag file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ctags -R
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;By default, the generate tag file will be located at ./tags directory, we need to let vim know where to find it by:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:set tags+=tags
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To search for a symbol in vim, use&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:tag [symbol-name]
:tag /[search-name]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To go to the definition, we need &lt;code&gt;Ctrl-]&lt;/code&gt;, to go back, press &lt;code&gt;Ctrl-t&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:tn next tag
:tp prev tag
:ts all tags
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ref:&lt;/p&gt;
&lt;p&gt;[1] http://usevim.com/2013/01/18/tags/&lt;/p&gt;
&lt;p&gt;vim tags matchlist is not very user friendly. I should write my own that shows the list in quick fix window&lt;/p&gt;
&lt;p&gt;http://vim.1045645.n5.nabble.com/Putting-all-ctags-matches-into-quickfix-td1182150.html&lt;/p&gt;
&lt;p&gt;http://vim.1045645.n5.nabble.com/Open-tags-in-quickfix-window-td1188577.html&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 13:03:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/vim-zhong-sheng-cheng-he-shi-yong-tags.html</guid><category>vim</category><category>计算机</category><category>通用工具</category></item><item><title>python inspect library</title><link>/posts/python-inspect-library.html</link><description>&lt;p&gt;inspect.iscoroutinefunction(fn)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 13:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/python-inspect-library.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>电商在中国</title><link>/posts/dian-shang-zai-zhong-guo.html</link><description>&lt;p&gt;虽然电子商务已经在中国发展壮大，但产值还未达到惊人的规模，海量的日常服务仍在线下进行。例如中国80%的酒店客房还是线下预订。中国消费者青睐电子商务的原因不是它能带来便利，而是它比实体店的经营公开透明得多，腐败因素少得多。
正 如李开复所说，按美国标准评价，中国的实体商家普遍效率低下，大肆吹嘘的行为比比皆是。他指出：“美国有几百年公平竞争的传统，商界相对比较公平透明。” 可中国截然不同，“如果要出售房地产，交易根本是不透明的。如果想买二手车，也没有像Consumer Reports那样的独立调查机构出具质量报告，或者勇敢的消费者出面披露汽车安全问题。”李开复认为，电商无需中间商和创造声誉的系统，让交易更透明、更可信，“所以，基于社交的手机解决方案会好得多。”&lt;/p&gt;
&lt;p&gt;来自 &lt;a href="http://www.cnbeta.com/articles/462897.htm"&gt;http://www.cnbeta.com/articles/462897.htm&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 12:58:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/dian-shang-zai-zhong-guo.html</guid><category>创业</category><category>运营与产品</category></item><item><title>m4 tool</title><link>/posts/m4-tool.html</link><description>&lt;p&gt;m4 macro language  http://mbreen.com/m4.html&lt;/p&gt;
&lt;h2&gt;comman line invoking&lt;/h2&gt;
&lt;p&gt;m4 -D&lt;MACRO&gt;&lt;/p&gt;
&lt;h2&gt;builtins&lt;/h2&gt;
&lt;p&gt;define(&lt;macro&gt;, &lt;value&gt;)
undefine(&lt;macaro&gt;)
ifdef(&lt;macro&gt;, &lt;then&gt;, &lt;else&gt;)
ifelse(&lt;a&gt;, &lt;b&gt;, &lt;then&gt;, &lt;else&gt;)
eval(&lt;expr&gt;)
len(&lt;str&gt;)
include(&lt;filename&gt;)
syscmd(&lt;cmd&gt;)
`'are quotes&lt;/p&gt;
&lt;h1&gt;for comments&lt;/h1&gt;
&lt;p&gt;M4 rules
    it reads in the macro's arguments (if any)
    it determines the expansion of the macro and inserts this expansion at the beginning of its input
    m4 continues scanning the input, starting with the expansion &lt;/p&gt;
&lt;p&gt;example:
  define(&lt;code&gt;definenum',&lt;/code&gt;define(&lt;code&gt;num',&lt;/code&gt;99')')
  num                      # -&amp;gt; num
  definenum num            # -&amp;gt; define(&lt;code&gt;num',&lt;/code&gt;99') num -&amp;gt;  99&lt;/p&gt;
&lt;p&gt;Unless a nested macro is quoted, it is expanded immediately:&lt;/p&gt;
&lt;p&gt;define(&lt;code&gt;definenum', define(&lt;/code&gt;num', `99'))
  num                      # -&amp;gt; 99
  definenum                # -&amp;gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 12:57:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/m4-tool.html</guid><category>库</category><category>计算机</category></item><item><title>Python doctest library</title><link>/posts/python-doctest-library.html</link><description>&lt;h2&gt;basic usage&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;&amp;quot;&amp;quot;
&amp;gt;&amp;gt;&amp;gt; print &amp;#39;hello&amp;#39;
hello
&amp;quot;&amp;quot;&amp;quot;

doctest.testmod()
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;be verbose&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;doctest.testmod(verbose=True)&lt;/code&gt;
or 
&lt;code&gt;python module.py -v&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;traps&lt;/h2&gt;
&lt;p&gt;if you have unicode in your docstirng, add u to the doc string&lt;/p&gt;
&lt;p&gt;Notes on testing classes
&lt;em&gt; If it's testing the class as a whole, I'd put them in the class' docstring.
&lt;/em&gt; If it's testing the constructor, I'd put them in the constructor's docstring.
* If it's testing a method (as it seems to be in this case), I'd actually put it them in that method's docstring.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 12:55:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/python-doctest-library.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>markdown notes</title><link>/posts/markdown-notes.html</link><description>&lt;h2&gt;Table&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;Tables&lt;/span&gt;        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;Are&lt;/span&gt;           &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;Cool&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;-------------&lt;/span&gt; &lt;span class="p"&gt;|:-&lt;/span&gt;&lt;span class="s s-Atom"&gt;------------:&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;-----:&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;col&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;is&lt;/span&gt;      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;right&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s s-Atom"&gt;aligned&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1600&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;col&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;is&lt;/span&gt;      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;centered&lt;/span&gt;      &lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;zebra&lt;/span&gt; &lt;span class="s s-Atom"&gt;stripes&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s s-Atom"&gt;are&lt;/span&gt; &lt;span class="s s-Atom"&gt;neat&lt;/span&gt;      &lt;span class="p"&gt;|&lt;/span&gt;    &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There must be at least &lt;em&gt;3 dashes&lt;/em&gt; separating each header cell. The outer pipes (|) are optional, and you don't need to make the raw Markdown line up prettily. You can also use inline Markdown.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Markdown | Less | Pretty
--- | --- | ---
*Still* | `renders` | **nicely**
1 | 2 | 3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以使用冒号来对齐单元格&lt;/p&gt;
&lt;h2&gt;图片&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Inline&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nl"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;alt&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png &amp;quot;Logo Title Text 1&amp;quot;)&lt;/span&gt;
&lt;span class="n"&gt;Reference&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nl"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;alt&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;logo&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;logo&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png &amp;quot;Logo Title Text 2&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;横线&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Three or more...
---
Hyphens
***
Asterisks
___
Underscores
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 12:52:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/markdown-notes.html</guid><category>库</category><category>计算机</category></item><item><title>readline library</title><link>/posts/readline-library.html</link><description>&lt;p&gt;readline is widely used input lib, all the key bindings are from emacs&lt;/p&gt;
&lt;p&gt;GNU readline key bindings&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;key action  note
^a  moves the cursor to the beginning of the line    a 是第一个字母
^b  moves it one position to the left    b 是 back 的缩写
^c  send SIGINT or KeybordInterrupt 
^d  send eof on empty line  
^d  erase next char 
^e  to the end   e 表示 end
^f   把光标向前移动一格   f 表示 forward
^h   把光标向前删除     h 表示 histroy?
^i  自动补全, 和 tab 功能一样    
^k  删除到行尾    k表示kill
^y  粘贴删除的字符  y 表示 yank
^_  undo    
^p  previous    
^n  next    
^r  reverse search  r for reverse
^s  search  s for search
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using readline in python&lt;/p&gt;
&lt;p&gt;actually the input function is just readline enabled, the missing functionality is history support&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 12:51:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/readline-library.html</guid><category>库</category><category>计算机</category></item><item><title>Linux 命令行文本处理（sed/awk/grep...）</title><link>/posts/linux-ming-ling-xing-wen-ben-chu-li-sedawkgrep.html</link><description>&lt;h1&gt;sort&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-d 按照字典排序(默认)
-n 按照数字大小排序
-f 忽略大小写
-g 按照浮点数排序
-M 按照 Jan Feb 等排序

-r 逆序
-k 指定第 k 列排序 -t 指定分隔符
-b 忽略行首空格字符
-m 把两个已经排序的文件合并
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;uniq 合并重复&lt;/h1&gt;
&lt;p&gt;uniq 命令假定文件是已经排序的，因此基本要接着 sort 使用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sort unsorted.txt | uniq&lt;/code&gt; 删除重复行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sort unsorted.txt | uniq -c&lt;/code&gt; 统计行数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sort unsorted.txt | uniq -d&lt;/code&gt; 只显示重复行 -u 只显示不重复行&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;tr 翻译指令&lt;/h1&gt;
&lt;p&gt;tr "source" "target" 如果目标字符串太短的化，使用最后一个字符填充
tr -d "source" remove
tr -s "source" squeeze extra characters, useful for piping to cut
-c 参数对第一个字符串的补集
可以使用区间 a-z 0-9 等
还可以使用字符类 [:class:]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;alnum：字母和数字&lt;/li&gt;
&lt;li&gt;alpha：字母&lt;/li&gt;
&lt;li&gt;digit：数字&lt;/li&gt;
&lt;li&gt;space：空白字符&lt;/li&gt;
&lt;li&gt;lower：小写&lt;/li&gt;
&lt;li&gt;upper：大写&lt;/li&gt;
&lt;li&gt;cntrl：控制（非可打印）字符&lt;/li&gt;
&lt;li&gt;print：可打印字符&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;cut 选取某一列 sort &lt;mode&gt; &lt;which&gt;
有三种模式 -b 按字节 -c 按字符 -f 按域 -d 指定分隔符
选取的列可以使用:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;i 第 i 行&lt;/li&gt;
&lt;li&gt;a,b  i 行和 j 行&lt;/li&gt;
&lt;li&gt;a-b 第 i 到 j 行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;--completment 选取补集
--output-delimiter 输出&lt;/p&gt;
&lt;h1&gt;wc&lt;/h1&gt;
&lt;p&gt;统计单词 -c 字符数 -w 单词数 -l 行数&lt;/p&gt;
&lt;h1&gt;nl&lt;/h1&gt;
&lt;p&gt;给每行添加行号 -ba 所有行&lt;/p&gt;
&lt;h1&gt;paste&lt;/h1&gt;
&lt;p&gt;按列合并文本&lt;/p&gt;
&lt;h1&gt;xargs&lt;/h1&gt;
&lt;p&gt;xargs reformat the data it received and give it to next command. xargs squish all parameters into one line&lt;/p&gt;
&lt;p&gt;-d set delemeters
-t 回显命令
-I 执行指定的 Instruction，需要指定操作符
如 ls *.md | xargs -t -I "%" cp "%" markdown/
-n output with n args on one line&lt;/p&gt;
&lt;h1&gt;regular expression in shell&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Commands&lt;/th&gt;
&lt;th&gt;BRE&lt;/th&gt;
&lt;th&gt;ERE&lt;/th&gt;
&lt;th&gt;PCRE&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;sed&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;-E/-r&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;awk&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;grep&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;-E&lt;/td&gt;
&lt;td&gt;-P&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;find&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1&gt;Sed&lt;/h1&gt;
&lt;h2&gt;Basic format&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sed options script file
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;by default, sed uses BRE, but you probably want sed -E to enable ERE, see http://liujiacai.net/blog/2014/12/07/regexp-favors/. basically, sed works line by line and do transformation&lt;/p&gt;
&lt;p&gt;s for substitution&lt;/p&gt;
&lt;p&gt;sed s/day/night/OPTION OLDFILE &amp;gt; NEWFILE&lt;/p&gt;
&lt;p&gt;默认只替换第一处出现, /g 替换所有&lt;/p&gt;
&lt;p&gt;/只是默认的分隔符, 可以任意使用, 推荐使用:&lt;/p&gt;
&lt;p&gt;使用 &amp;amp; 作为匹配到的字符, 使用 \1 \2 来表示匹配到的分组, 这种表达方式倒是和 pcre有些类似&lt;/p&gt;
&lt;p&gt;使用 -r(linux) 或者 -E(mac) 才能够使用扩展的posix正则, 一定要带上这两个&lt;/p&gt;
&lt;p&gt;OPTION&lt;/p&gt;
&lt;p&gt;处理命令行输入输出的时候可能经常需要trim, 尤其是字符串带了\n的情况&lt;/p&gt;
&lt;p&gt;sed -n 's/PATTERN/&amp;amp;/p' file&lt;/p&gt;
&lt;p&gt;sed '/PATTERN/p' file&lt;/p&gt;
&lt;h2&gt;Options&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-i  inplace
-i.bak  inplace with backup
-E/-r   use ERE
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;script&lt;/h2&gt;
&lt;p&gt;sed command syntax: option/pattern/command parameters
pattern selects lines and do command with parameters on those lines&lt;/p&gt;
&lt;h1&gt;awk&lt;/h1&gt;
&lt;h2&gt;basic usage&lt;/h2&gt;
&lt;p&gt;gawk options program varlist file&lt;/p&gt;
&lt;p&gt;gawk, like sed, is also line-oriented&lt;/p&gt;
&lt;h2&gt;vaiables&lt;/h2&gt;
&lt;p&gt;$0  the whole line
$1...$n word in line
NR  number of rows
NF  number of fileds&lt;/p&gt;
&lt;h2&gt;awk program&lt;/h2&gt;
&lt;p&gt;awk 'BEGIN{ } pattern { } END { }' file
BEGIN in used for initilization, and END is used to print out the result, pattern {} is run against each line&lt;/p&gt;
&lt;p&gt;awk 'pattern' file
print lines with the pattern&lt;/p&gt;
&lt;h1&gt;grep&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep pattern file1 file2...
grep pattern *
grep pattern -r &amp;lt;dir&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;force grep to show file name: 
    grep pattern file /dev/null&lt;/p&gt;
&lt;h2&gt;options&lt;/h2&gt;
&lt;p&gt;-v  invert search
-r/-R   recursively
-c  count matching lines
-o  printing matched part in differnet lines
-b -o   output offset
-n  with line numbers
-i  ignore case
-l  list matched files
-f  pattern from 
--include   include files for grep
-Z  use \0 as delemeter
-q  no output only return value
-A n    lines after
-B n    lines before
-C n    lines combined&lt;/p&gt;
&lt;h1&gt;ag&lt;/h1&gt;
&lt;p&gt;按文件过滤，支持多种文件类型，可以用&lt;code&gt;ag --list-file-types&lt;/code&gt;查看支持的类型&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 12:37:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/linux-ming-ling-xing-wen-ben-chu-li-sedawkgrep.html</guid><category>后端</category><category>计算机</category></item><item><title>Linux 命令行文件管理</title><link>/posts/linux-ming-ling-xing-wen-jian-guan-li.html</link><description>&lt;h2&gt;get current file path&lt;/h2&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash &lt;/span&gt;
&lt;span class="c1"&gt;# Absolute path to this script, e.g. /home/user/bin/foo.sh&lt;/span&gt;
&lt;span class="nv"&gt;SCRIPT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;readlink -f &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Absolute path this script is in, thus /home/user/bin&lt;/span&gt;
&lt;span class="nv"&gt;SCRIPTPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;dirname &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$SCRIPT&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$SCRIPTPATH&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;这些程序基本都有一个模式：如果不给定文件作为参数，那么就从stdin读取，从 stdout 输出，非常适合 pipe，而且一般可以接受多个文件作为参数，并把结果合并&lt;/p&gt;
&lt;h2&gt;ls&lt;/h2&gt;
&lt;p&gt;ls 的一个很好用的命令组合 &lt;code&gt;ls -sail&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;stat 和 file&lt;/h2&gt;
&lt;p&gt;stat 读取一个文件的所有信息，file 猜测文件的类型&lt;/p&gt;
&lt;h2&gt;cat&lt;/h2&gt;
&lt;p&gt;cat &amp;gt; fiie1 从标准输入读取并插入到file1
cat -ns file -n命令表示加入行号，-s 表示压缩多个空行到一个&lt;/p&gt;
&lt;h2&gt;chattr&lt;/h2&gt;
&lt;h2&gt;find&lt;/h2&gt;
&lt;h3&gt;Syntax&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find &amp;lt;dir&amp;gt; [!] &amp;lt;filter&amp;gt; &amp;lt;action&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Filters&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-name   后面可以跟通配符
-wholename  
-regex  Match on a whole path -iregex 不区分大小写
-type   文件类型 f 文件 d 目录 l 链接
-atime/mtime/ctime  使用+-区分未来过去，可以使用的单位smhdw
-newer file     比
-size   后面跟大小可以使用ckMGTP
-user/-group/-nouser    用户
-perm   权限
-path   在整个路径中，使用通配符
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Actions&lt;/h3&gt;
&lt;p&gt;执行的动作跟在-exec/-ok后面&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find ... -exec command {} + .. # give all files combined to the command
find ... -exec command {} \; # give each file
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Tips&lt;/h3&gt;
&lt;p&gt;如果打印出绝对路径，使用find $PWD ...&lt;/p&gt;
&lt;h3&gt;find with xargs&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;find ... -print0 | xargs -0 ...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A numeric mode is from one to four octal digits (0-7), derived by adding up the bits with values 4, 2, and 1. Omitted digits are assumed to be leading zeros. The first digit selects the set user ID (4) and set group ID (2) and restricted deletion or sticky (1) attributes. The second digit selects permissions for the user who owns the file: read (4), write (2), and execute (1); the third selects permissions for other users in the file's group, with the same values; and the fourth for other users not in the file's group, with the same values.&lt;/p&gt;
&lt;h2&gt;权限&lt;/h2&gt;
&lt;p&gt;Linux 文件的权限可以使用0-7的四个八进制数字代表, 由1/2/4三个数字相加而成. 省略的数字会被认为是按0打头的. 第一个数字设定了 set user ID(4), set group ID(2) 和 限制删除或者叫 sticky bit(1). 第二个数字设定了文件所有者的权限: read(4), write(2), execute(1). 第三个设定了文件所在组的权限&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 12:31:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/linux-ming-ling-xing-wen-jian-guan-li.html</guid><category>命令行</category><category>后端</category><category>计算机</category></item><item><title>Jaccard coefficient(杰拉德距离)</title><link>/posts/jaccard-coefficientjie-la-de-ju-chi.html</link><description>&lt;p&gt;the jaccard index is a simple measure of how similiar two sets are.
it's simply the ratio of the size of the intersection of the sets and the size of the union of the sets.&lt;/p&gt;
&lt;p&gt;eg. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if J(A,B) is jaccard index between sets A and B
and A = {1,2,3}, B = {2,3,4}, C = {4,5,6},
then J(A,B) = 2/4 = 0.5,
and J(A,C) = 0/6 = 0,
and J(B,C) = 1/5 = 0.2
so the most &amp;quot;similiar&amp;quot; sets are A and B and the least similiar are A and C
(note also J(A,A) = J(B,B) = J(C,C) = 1)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;we have to consider what the values(jaccard coefficient) would be in real world. how are the distributed.&lt;/p&gt;
&lt;p&gt;Jeccard coeffi is not transtive, so, for a set of n sentences, we have to calculate O(n2) times. There is a way to do it in O(n) time&lt;/p&gt;
&lt;p&gt;map N-grams to a set of numbers, then use bit to express whether the N-gram exists in one word/sententce.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;A = mat -&amp;gt; {ma, at} \                              / 101 \    
                    --&amp;gt; {ma(2), ca(1), at(0)} -&amp;gt;         --&amp;gt; &amp;amp;(001), |(111)
B = cat -&amp;gt; {ca, at} /                              \ 011 /
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;J(A, B) = and(A, B)/or(A, B)&lt;/p&gt;
&lt;p&gt;let X = card(A ^ B), let U = card(A U B)
let J(A, B) = X / (X + U)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 09:45:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/jaccard-coefficientjie-la-de-ju-chi.html</guid><category>算法</category><category>计算机</category></item><item><title>JavaScript DOM API</title><link>/posts/javascript-dom-api.html</link><description>&lt;h2&gt;document object&lt;/h2&gt;
&lt;p&gt;attributes of document object&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;document.title               //设置文档标题等价于HTML的&amp;lt;title&amp;gt;标签
document.URL                 //设置URL属性从而在同一窗口打开另一网页
document.fileCreatedDate     //文件建立日期，只读属性
document.fileModifiedDate    //文件修改日期，只读属性
document.fileSize            //文件大小，只读属性
document.cookie              //设置和读出cookie
document.charset             //设置字符集 简体中文:gb2312
document.body         // body 元素
document.location.hash/host/href/port          // location
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;methods of document object&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;getElementById() // 返回一个 Element
getElementsByName() // 根据 name 属性获得元素, 返回一个 NodeList
getElementsByTagName() // 返回一个 HTMLCollection/NodeList(Webkit)
getElementsByClassName() // 返回一个 HTMLCollection
querySelector() // 返回一个符合的元素, 性能很差
querySelectorAll() // 返回所有符合的元素组成的 NodeList, 性能很差
document.write()
document.createElement()
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;window object&lt;/h2&gt;
&lt;h3&gt;functions in window object&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;setTimeout(func, milliseconds, parameters...)
setInterval(func, milliseconds, parameters...)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;NOTE: javascript is asynchonous, even if you set 0 timeout, the function is just put into the execute queue, not invoked immediately.&lt;/p&gt;
&lt;h3&gt;window.location&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;location    setting location will cause the page to redirect to new page
location.href   
location.protocol   
location.host   
location.hostname   
location.port   
location.pathname   
location.search 
location.hash   
location.assign()    go to a new address
location.replace()   go to a new address and do not disturb the history
location.reload()   reload the page
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;window.history&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;history.back()  
history.forward()   
history.go(number)  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;window.screen&lt;/h3&gt;
&lt;p&gt;window.screen.width screen width, not the viewport width
window.screen.height    screen height&lt;/p&gt;
&lt;h3&gt;alert, confirm and prompt&lt;/h3&gt;
&lt;p&gt;alert   show a message
confirm return a bool by user action
prompt  &lt;/p&gt;
&lt;h2&gt;Same Origin Policy&lt;/h2&gt;
&lt;p&gt;document.domain is the key to decide the origin of a script.&lt;/p&gt;
&lt;p&gt;scripts under different subdomain can set the their document.domain to a same domain, and then then can share the same cookie or communicate&lt;/p&gt;
&lt;p&gt;Cross-Origin Resource Sharing&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 09:45:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/javascript-dom-api.html</guid><category>JavaScript</category><category>大前端</category><category>计算机</category></item><item><title>Graph Theory</title><link>/posts/graph-theory.html</link><description>&lt;p&gt;四个基础算法&lt;/p&gt;
&lt;p&gt;http://www.cnblogs.com/aiyelinglong/archive/2012/03/26/2418707.html&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 09:18:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/graph-theory.html</guid><category>算法</category><category>计算机</category></item><item><title>memcacheq</title><link>/posts/memcacheq.html</link><description>&lt;h1&gt;memcacheq&lt;/h1&gt;
&lt;p&gt;memcacheq is based on memcachedb which is based on memcached and Berkeley DB
memcachedb adds persistent for memcached by using Berkeley DB and is fully compatible with the memcached API
 
memcached API http://www.tutorialspoint.com/memcached/memcached_set_data.htm&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;set key flags exptime bytes [noreply] 
value 
 
--&amp;gt; STORED // success
--&amp;gt; ERROR // error
 
get key
 
--&amp;gt;
VALUE key flags bytes
value
 
END
 
memcacheq http://memcachedb.org/memcacheq/&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;memcacheq uses only the get and set verb&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 08:10:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/memcacheq.html</guid><category>库</category><category>计算机</category></item><item><title>ncurses library</title><link>/posts/ncurses-library.html</link><description>&lt;p&gt;ncurses is a lib for building command line user interface(TUI)&lt;/p&gt;
&lt;p&gt;Hello World&lt;/p&gt;
&lt;h1&gt;include &lt;ncurses.h&gt;&lt;/h1&gt;
&lt;p&gt;int main() { 
    initscr();
    printw("Hello World !!!"); refresh();
    getch();
    endwin();
    return 0; 
} &lt;/p&gt;
&lt;p&gt;初始化控制函数&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 08:08:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/ncurses-library.html</guid><category>库</category><category>计算机</category></item><item><title>JavaScript 学习笔记</title><link>/posts/javascript-xue-xi-bi-ji.html</link><description>&lt;h2&gt;Values&lt;/h2&gt;
&lt;p&gt;类型转换&lt;/p&gt;
&lt;p&gt;Object to bool，全部转换为True，包括 [] {}和new Boolean(false)&lt;/p&gt;
&lt;p&gt;to string 首先调用toString()，如果没有然后调用valueOf()&lt;/p&gt;
&lt;p&gt;to number 首先调用valueOf(),如果没有然后调用toString()&lt;/p&gt;
&lt;h2&gt;Array&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Array.join()    
Array.reverse() 
Array.sort([func])  // function cmp(a, b) {return a - b;}, implace
Array.concat(val or array)  // combination of python append and extend, will not recursively smash array, return new
Array.slice(a, b)  // allow negative
Array.splice(a, b, replacements...)  // both a and b are inclusive
push/pop    
unshift/shift   
indexOf/lastIndexOf  // return the first find index or -1 if not found
forEach  // no way to good stop the iteration
map  // return a new array
filter   //return the selected elements
every/some  // return true or false, return immediately after the result is dicided 
reduce  //reduce(function(a, b) {}, initial_value), when not supplied, the first element is used as initial value on empty array, no initial value will throw error
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;ES5 functional array methods&lt;/h2&gt;
&lt;p&gt;they are both defined as Array.prototype.method and Array.method in firefox&lt;/p&gt;
&lt;h3&gt;common pattern&lt;/h3&gt;
&lt;p&gt;array.method(function(value, index, array) {}, this) // second parameter is treated as this in the function&lt;/p&gt;
&lt;h3&gt;using strings as arrays&lt;/h3&gt;
&lt;p&gt;Array.method.call(str, parameters)&lt;/p&gt;
&lt;h2&gt;this&lt;/h2&gt;
&lt;h3&gt;normal function&lt;/h3&gt;
&lt;p&gt;in ES3 and ES5, this is window by default.
in ES5 strict mode, this is undefined.
in ES6 arrow function, this is inherited from outer function&lt;/p&gt;
&lt;h3&gt;constructor function&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;var m = new MyClass(3, 5);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;this&lt;/code&gt; is the new constructed object, But, if something is returned from the constructor, then the temporary object is thrown&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyOtherClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MyOtherClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;method function&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;point.setX = function (x) {
    this.x = x;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;this&lt;/code&gt; is the object&lt;/p&gt;
&lt;h4&gt;tricky closure&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;constfuncs() {&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;funcs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;funcs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt; &lt;span class="c1"&gt;// they refers to only one i in the closure, which is 10 in the end&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;funcs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;funcs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;constfuncs&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;funcs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt; &lt;span class="c1"&gt;// returns 10,&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;call and apply&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;func.call(obj, params...)&lt;/code&gt; is equal to obj.func(params...)
&lt;code&gt;func.apply(obj, [params...])&lt;/code&gt;
&lt;code&gt;func.bind(obj)&lt;/code&gt; will return a function with &lt;code&gt;this&lt;/code&gt; bound as obj to the function&lt;/p&gt;
&lt;p&gt;call any method against null or undefined will result in TypeError
 
by default &lt;code&gt;this&lt;/code&gt; for a function in strict mode is undefined
 
+ prefer both operands to be numbers, comparison prefers both operands to be strings
 
if a property is not found in a object, it's looked up in the prototype, if not, it's looked up
object created by new 's prototype is the constructor's prototype
object created by
 
 &lt;/p&gt;
&lt;h1&gt;class&lt;/h1&gt;
&lt;p&gt;if two instances inherited from the same prototype, we say then are inherited from the same class. by default, the prototype is constructor's prototype
 &lt;/p&gt;
&lt;h2&gt;subclassing&lt;/h2&gt;
&lt;p&gt;SubClass.prototype = Object.create(Base.prototype)
SubClass.prototype.constructor = SubClass
 &lt;/p&gt;
&lt;h1&gt;Regular Expression&lt;/h1&gt;
&lt;p&gt;syntax: /regexp/modifier
 
Modifiers:
 
i
ignore case
g
global, if not sepcified, return only one match
m
multiline
 
String expression methods:
 
String.search(pattern)
return first matched index or -1
String.replace(pattern, replacement)
back reference is used as $n, replacement can be a function
String.match(pattern)
return an array of matched groups, [0] is the whole match, [n] being each group
String.split(pattern)
return a splited elements
 
Regexp methods:
 
regexp.exec(String)
equals to String.match(regexp)
regexp.test(String)
true or false
regexp.exec(String) can be called multitimes for a string when regexp is not global mode. Each returns the 
 &lt;/p&gt;
&lt;h1&gt;Date&lt;/h1&gt;
&lt;h2&gt;Constructs&lt;/h2&gt;
&lt;p&gt;new Data();
new Date(milliseconds);
new Data(datestring);
new Data(y, m, d, h, m, s, ms);
 &lt;/p&gt;
&lt;h2&gt;methods&lt;/h2&gt;
&lt;p&gt;date.toString() return  a time string
date.valueOf() returns timestamp
Date.now() returns current timestamp
Date.parse() returns a timestamp
Date.UTC(y, m, d, h, m, s, ms) returns utc timestamp
 &lt;/p&gt;
&lt;h1&gt;Globals&lt;/h1&gt;
&lt;p&gt;encodeURI()
encode URI to %xx syntax
encodeURIComponent
encode every character including /?=+,#
decodeURI
 
decodeURIComponent
 
isFinite()
 
isNaN
 
parseInt
 
parseFloat
 
Infinity
 
 
 &lt;/p&gt;
&lt;h1&gt;Math&lt;/h1&gt;
&lt;p&gt;Math.random() // -&amp;gt; random number between 0 and 1
 
Number
 
Number.MAX_VALUE, Number.MIN_VALUE, Number.NaN, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY
 &lt;/p&gt;
&lt;h1&gt;String&lt;/h1&gt;
&lt;p&gt;String.charAt()
String.charCodeAt()
String.concat()
String.indexOf/lastIndexOf()
String.slice()
String.substr(start, length)
String.substring(from, to)
String.toLowerCase()/toUpperCase()
String.trim()&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 07:53:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/javascript-xue-xi-bi-ji.html</guid><category>JavaScript</category><category>大前端</category><category>计算机</category></item><item><title>Chrome Hotkeys</title><link>/posts/chrome-hotkeys.html</link><description>&lt;p&gt;In Omnibar, press tab after a search-able website will search for the website
prefix ? will search forcefully&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;⌘T  Open a new tab
⇧⌘T Reopen tab just closed
⌘W  colse a tab
⌘⌥→ Go to left tab
⌘[  / Delete    Go back in history
⌘]  / Delete    Go forward in history
⌘M  minimize
⇧⌘B show/hide bookmark bar
⇧⌘J Open Downloads
⌘Y  Open History
⌘L  omni bar
⌘R  reload page
⌘F  find
⌘G / ⏎  find next
⌘⌥I Inspect element
⌘⌥J JavaScript Console
⌘+Shift+D   Save all tabs in one folder
^⌘F Full screen(Mac style)
⌘-Shift-F   Real Full Screen
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 07:50:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/chrome-hotkeys.html</guid><category>小技巧</category><category>计算机</category><category>通用工具</category></item><item><title>gitbook</title><link>/posts/gitbook.html</link><description>&lt;p&gt;Summary.md 这个文件相对于是一本书的目录结构。比如SUMMARY.md :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Summary
* [Introduction](README.md)
* [基本安装](howtouse/README.md)
   * [Node.js安装](howtouse/nodejsinstall.md)
   * [Gitbook安装](howtouse/gitbookinstall.md)
   * [Gitbook命令行速览](howtouse/gitbookcli.md)
* [图书项目结构](book/README.md)
   * [README.md 与 SUMMARY编写](book/file.md)
   * [目录初始化](book/prjinit.md)
* [图书输出](output/README.md)
   * [输出为静态网站](output/outfile.md)
   * [输出PDF](output/pdfandebook.md)
* [发布](publish/README.md)
   * [发布到Github Pages](publish/gitpages.md)
* [结束](end/README.md)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;SUMMARY.md基本上是列表加链接的语法。链接中可以使用目录，也可以使用。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 07:50:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/gitbook.html</guid><category>计算机</category><category>通用工具</category></item><item><title>Macbook tricks</title><link>/posts/macbook-tricks.html</link><description>&lt;p&gt;用起来的确爽，视网膜屏幕绝对打开新的世界&lt;/p&gt;
&lt;p&gt;4k屏幕打开另一个世界，一个屏幕可以开4个窗口，哈哈&lt;/p&gt;
&lt;p&gt;PYTHONPATH 变量会干扰brew安装的python3&lt;/p&gt;
&lt;p&gt;Dock放在左边，设置F1，设置轻触，设置全局控制 使用tab键切换&lt;/p&gt;
&lt;p&gt;You can make movie with quick time&lt;/p&gt;
&lt;p&gt;Option + Command +Esc 强制退出程序&lt;/p&gt;
&lt;p&gt;Homebrew + iterm2 真乃神器
Brew cask is a good thing &lt;/p&gt;
&lt;p&gt;Hold option+command and mouse to do a block selection&lt;/p&gt;
&lt;p&gt;Weird, mac echo not working with \e but \033&lt;/p&gt;
&lt;p&gt;给pycharm添加PYTHONPATH，也不知道是哪个弄对了&lt;/p&gt;
&lt;h1&gt;快速设置一台新的 Mac&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0. Install iterm2, 
    a. set the color scheme to solarized and 
    b. change alt key to esc+
    c. Set font to monaco for powerline
1. install Homebrew from http://brew.sh
2. Generate a new ssh key by:
    a.     `ssh-keygen`
    b.     `ssh-add ~/.ssh/id_rsa`
3.  install zsh: 
4. install go and python: `brew install go python python3`
5. install tmux: `brew install tmux`
6. install dotfiles: `git clone git@github.com:yifeikong/dotfiles .dotfiles`
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;快捷键&lt;/h1&gt;
&lt;p&gt;Command-H 隐藏最前端应用的窗口。要查看最前端的应用但隐藏所有其他应用，请按 Command-Option-H。&lt;/p&gt;
&lt;p&gt;Option-Command-= 最大化窗口&lt;/p&gt;
&lt;p&gt;Command-M 将最前端的窗口最小化至 Dock。要最小化最前端应用的所有窗口，请按 Command-Option-M。&lt;/p&gt;
&lt;p&gt;Command-W 关闭最前端的窗口。要关闭该应用的所有窗口，请按 Command-Option-W。&lt;/p&gt;
&lt;p&gt;Option-Command-Esc 强制退出：选择要强制退出的应用。或者，按住 Command-Shift-Option-Esc 3 秒钟可仅强制最前端的应用退出。&lt;/p&gt;
&lt;p&gt;Shift-Command-3 屏幕快照：拍摄整个屏幕的屏幕快照。了解更多屏幕快照快捷键。&lt;/p&gt;
&lt;p&gt;Command-逗号 (,) 偏好设置：打开最前端应用的偏好设置。&lt;/p&gt;
&lt;p&gt;Control–Command–电源按钮 强制 Mac 重新启动。&lt;/p&gt;
&lt;p&gt;Control–Shift–（电源按钮或介质推出键）将显示器置于睡眠状态。&lt;/p&gt;
&lt;p&gt;Command-D 从“打开”对话框或“存储”对话框中选择“桌面”文件夹。&lt;/p&gt;
&lt;p&gt;Option-Delete 删除插入点左边的字词。&lt;/p&gt;
&lt;p&gt;Fn-Delete在没有向前删除键的键盘上向前删除。也可以使用 Control-D。&lt;/p&gt;
&lt;p&gt;Command-Delete 在包含“删除”或“不存储”按钮的对话框中选择“删除”或“不存储”。&lt;/p&gt;
&lt;p&gt;Fn–上箭头 向上翻页：向上滚动一页。 &lt;/p&gt;
&lt;p&gt;Command–上箭头 将插入点移至文稿开头。&lt;/p&gt;
&lt;p&gt;Command–左箭头 将插入点移至当前行的行首。&lt;/p&gt;
&lt;p&gt;Option–左箭头 将插入点移至上一字词的词首。&lt;/p&gt;
&lt;p&gt;Option–左箭头 将插入点移至上一字词的词首。&lt;/p&gt;
&lt;p&gt;Control-L 将光标或所选内容置于可见区域中央。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 07:46:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/macbook-tricks.html</guid><category>小技巧</category><category>计算机</category><category>通用工具</category></item><item><title>pthread</title><link>/posts/pthread.html</link><description>&lt;p&gt;pthreads online reference&lt;/p&gt;
&lt;p&gt;https://computing.llnl.gov/tutorials/pthreads/
http://pages.cs.wisc.edu/~travitch/pthreads_primer.html&lt;/p&gt;
&lt;p&gt;pthread does not define semphore&lt;/p&gt;
&lt;p&gt;http://blog.jobbole.com/59676/ ACTOR vs PROACTOR&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 07:43:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/pthread.html</guid><category>并发编程</category><category>C 语言</category><category>编程语言</category><category>计算机</category></item><item><title>Ngram</title><link>/posts/ngram.html</link><description>&lt;p&gt;ng&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 07:42:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/ngram.html</guid><category>计算机</category><category>机器学习</category></item><item><title>decompile apk</title><link>/posts/decompile-apk.html</link><description>&lt;h1&gt;jadx[1]&lt;/h1&gt;
&lt;h2&gt;compile and install jadx&lt;/h2&gt;
&lt;p&gt;mkdir jadx
git clone https://github.com/skylot/jadx.git
cd jadx
./gradlew dist   # you might need to wait on this&lt;/p&gt;
&lt;h2&gt;decompile apk&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. change apk to zip file and unzip it
2. copy out the class.dex file
3. build/jadx/bin/jadx -d OUTDIR PATH_TO_CLASS.DEX
or jadxgui PATH
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;工具&lt;/h1&gt;
&lt;p&gt;apk studio&lt;/p&gt;
&lt;p&gt;如何 sign：https://www.nevermoe.com/?p=373&lt;/p&gt;
&lt;p&gt;smali code tutorial： https://forum.xda-developers.com/showthread.php?t=2193735&lt;/p&gt;
&lt;p&gt;一篇很好的pdf的文档，利用smali code：http://www.security-assessment.com/files/documents/whitepapers/Bypassing%20SSL%20Pinning%20on%20Android%20via%20Reverse%20Engineering.pdf&lt;/p&gt;
&lt;p&gt;安卓中 pinning 的原理&lt;/p&gt;
&lt;p&gt;使用自己的keystore实例化 TrustManagerFactory&lt;/p&gt;
&lt;p&gt;关键语句&lt;/p&gt;
&lt;p&gt;InputStream in = resources.openRawResource(certificateRawResource);//file name of res/raw keyStore = KeyStore.getInstance("BKS"); keyStore.load(resourceStream, password);&lt;/p&gt;
&lt;p&gt;http://fdwills.github.io/diary/2014/06/13/ssl-pinning.html&lt;/p&gt;
&lt;p&gt;一些现成的 工具&lt;/p&gt;
&lt;p&gt;https://github.com/ac-pm/SSLUnpinning_Xposed  xposed 插件，已测试不好用
https://github.com/iSECPartners/Android-SSL-TrustKiller 需要cydia&lt;/p&gt;
&lt;p&gt;豌豆荚商店中有一个 xposed installer miui专版，使用这个可以很好地安装 xposed&lt;/p&gt;
&lt;p&gt;之后安装&lt;/p&gt;
&lt;p&gt;另一只种思路，找到，找到bks文件，替换掉，重新打包，签名&lt;/p&gt;
&lt;p&gt;https://stackoverflow.com/questions/30708548/how-to-modify-the-data-in-the-assets-folder-in-existing-apk-programmatically&lt;/p&gt;
&lt;p&gt;另外一些工具&lt;/p&gt;
&lt;p&gt;https://github.com/ac-pm/Inspeckage&lt;/p&gt;
&lt;p&gt;https://github.com/iSECPartners/Android-SSL-TrustKiller  需要cydia&lt;/p&gt;
&lt;p&gt;https://github.com/iSECPartners/android-ssl-bypass 一个基础工具，通过替换trust manager实现&lt;/p&gt;
&lt;p&gt;arm 汇编教程&lt;/p&gt;
&lt;p&gt;https://mp.weixin.qq.com/s/DKeXqzE6bj5t0eWTkLLCBQ&lt;/p&gt;
&lt;p&gt;[1] http://www.jianshu.com/p/65c2f447946e&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 07:31:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/decompile-apk.html</guid><category>大前端</category><category>Android</category><category>计算机</category></item><item><title>关于推广和冷启动的一些想法</title><link>/posts/guan-yu-tui-yan-he-leng-qi-dong-de-yi-xie-xiang-fa.html</link><description>&lt;p&gt;总体思路主要两个，一个就是借助于搜索引擎，另一个就是借助于 SNS。不过两个方法并不是完全对立的，比如说在知乎的答案中提到自己的公众号或者 app，那么既是一种社会化推广（粉丝会看到），也是一种很好的搜索引擎推广（知乎的权重很高）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;获得新增用户无非两个手段，一个是主动拉新用户，比如去 QQ 群中宣传；另一个是被动获得，坐等其他人通过搜索引擎发现自己的网站。&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;推广的平台&lt;/h1&gt;
&lt;h2&gt;一些权重比较高的网站&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;知乎&lt;/li&gt;
&lt;li&gt;知乎专栏&lt;/li&gt;
&lt;li&gt;微博&lt;/li&gt;
&lt;li&gt;豆瓣&lt;/li&gt;
&lt;li&gt;CSDN &lt;a href="https://blog.csdn.net/ivan_/article/details/74398261"&gt;一个推广芯片的例子&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;cnblogs&lt;/li&gt;
&lt;li&gt;简书&lt;/li&gt;
&lt;li&gt;贴吧&lt;/li&gt;
&lt;li&gt;GitHub。在 GitHub 仓库中的内容似乎也不错&lt;/li&gt;
&lt;li&gt;medium&lt;/li&gt;
&lt;li&gt;V2EX&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;可以提交链接的网站&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;reddit&lt;/li&gt;
&lt;li&gt;Hacker News&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;发送自己文章链接的平台&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;QQ 群&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;SEO&lt;/h2&gt;
&lt;p&gt;为什么需要 SEO？因为你缺少一个让用户可以持续接触到你的产品的渠道。问题在于Product Hunt 和Hacker News上的用户可能并不是你产品的目标客户，他们仅仅是了解今天发布了什么新的产品，然后继续干他们自己的事情。那些真正的用户，是很难靠这种方法获取到的。&lt;/p&gt;
&lt;p&gt;交换友链这种行为基本上已经过时了，现在是内容更重要。所以首先你需要写点什么，哪怕你付钱让别人写也好。&lt;/p&gt;
&lt;p&gt;一个可行的策略：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;写一些有趣的，有用的东西&lt;/li&gt;
&lt;li&gt;将站点的链接，放到你想主推的关键词里面去&lt;/li&gt;
&lt;li&gt;在内容平台上进行发布&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;内容&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;当搜索一个问题没有好的文章或者回答的时候，自己写一个，并把连接贴到对方的评论区&lt;/li&gt;
&lt;li&gt;自己写了一个文章之后，搜索相关的关键字，然后把自己的文章贴到评论区&lt;/li&gt;
&lt;li&gt;把链接提交到 reddit 等社区&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;知乎&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在知乎答题，要带上自己的公众号、头条号和博客&lt;/li&gt;
&lt;li&gt;如果你确信自己答得比较好，可以技术性踩其他的答案（这个问题里的其他回答都是垃圾，实名反对最高票的答案）&lt;/li&gt;
&lt;li&gt;答案本身需要优质&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;头条&lt;/h2&gt;
&lt;p&gt;头条上的不少评论文章并没有什么深入的观点，甚至根本不足以称作一篇文章，但是因为蹭热点，反倒评论里面很多宣泄情绪的人，甚至都不读文章，直接开骂的，这样反倒刺激了推荐系统把这种文章推给更多的人。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 07:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/guan-yu-tui-yan-he-leng-qi-dong-de-yi-xie-xiang-fa.html</guid><category>创业</category><category>运营与产品</category></item><item><title>如何做一个 Code Review</title><link>/posts/ru-he-zuo-yi-ge-code-review.html</link><description>&lt;p&gt;转载自：https://mp.weixin.qq.com/s?__biz=MzIwMzg1ODcwMw==&amp;amp;mid=2247486399&amp;amp;idx=1&amp;amp;sn=219af64c7ecbf9e6c601cefddd0a0eba&amp;amp;source=41#wechat_redirect&lt;/p&gt;
&lt;p&gt;众所周知，在团队中进行代码审查（Code Review）可以提升代码质量，分享项目知识、明确责任，最终达到构建更好的软件、更好的团队。如果你花几秒钟搜索代码审查的相关信息，你会看到许多关于代码审查带来的价值的文章。也有许多方法来进行代码审查：在GitHub中提pull request，或使用像JetBrains的Upsource之类的工具。然而即使拥有清晰的流程和正确的工具，还遗留了一个大问题需要解决——我们需要找寻哪些问题。&lt;/p&gt;
&lt;p&gt;可能没有明确关于“我们需要找寻哪些问题”的文章，是因为有许多不同的要点需要考虑。正如任何其他的需求，各个团队对各个方面都有不同的优先级。&lt;/p&gt;
&lt;p&gt;本文的目标是列出一些审查者可以找寻的要点，而各个方面的优先级就因各个团队而异了。&lt;/p&gt;
&lt;p&gt;在我们继续之前，让我们考虑一下大家在代码审查时会讨论到的问题。对于代码的格式、样式和命名以及缺少测试这些问题是很常见的几点。如果你想拥有可持续的、可维护的代码，这些是有用的检查点。然而，在代码审查时讨论这些就有些浪费时间，因为很多这样的检查可以（也应该）被自动化。&lt;/p&gt;
&lt;p&gt;那哪些要点是只能由人工进行审查而不能依靠工具的呢？&lt;/p&gt;
&lt;p&gt;回答是有惊人数量的点只能由人工进行审查。在本文剩下的部分，我们会覆盖一系列广泛的特性，并深入其中的两点具体的区域：性能和安全。&lt;/p&gt;
&lt;h1&gt;设计&lt;/h1&gt;
&lt;p&gt;如何让新代码与全局的架构保持一致？&lt;/p&gt;
&lt;p&gt;代码是否遵循SOLID原则，是否遵循团队使用的设计规范，如领域驱动开发等？&lt;/p&gt;
&lt;p&gt;新代码使用了什么设计模式？这样使用是否合适？&lt;/p&gt;
&lt;p&gt;基础代码是否有结合使用了一些标准或设计样式，新的代码是否遵循当前的规范？代码是否正确迁移，或参照了因不规范而淘汰的旧代码？&lt;/p&gt;
&lt;p&gt;代码的位置是否正确？比如涉及订单的新代码是否在订单服务相关的位置？&lt;/p&gt;
&lt;p&gt;新代码是否重用了现存的代码？新代码是否可以被现有代码重用？新代码是否有重复代码？如果是的话，是否应该重构成一个更可被重用的模式，还是当前还可以接受？&lt;/p&gt;
&lt;p&gt;新代码是否被过度设计了？是否引入现在还不需要的重用设计？团队如何平衡可重用和YAGNI(You Ain’t Gonna Need It)这两种观点？&lt;/p&gt;
&lt;h1&gt;可读性和可维护性&lt;/h1&gt;
&lt;p&gt;字段、变量、参数、方法、类的命名是否真实反映它们所代表的事物。&lt;/p&gt;
&lt;p&gt;我是否可以通过读代码理解它做了什么？&lt;/p&gt;
&lt;p&gt;我是否理解测试用例测了什么？&lt;/p&gt;
&lt;p&gt;测试是否很好地覆盖了用例的各种情况？它们是否覆盖了正常和异常用例？是否有忽略的情况？&lt;/p&gt;
&lt;p&gt;错误信息是否可被理解？&lt;/p&gt;
&lt;p&gt;不清晰的代码是否被文档、注释或容易理解的测试用例所覆盖？具体可以根据团队自身的喜好决定使用哪种方式。&lt;/p&gt;
&lt;h1&gt;功能&lt;/h1&gt;
&lt;p&gt;代码是否真的达到了预期的目标？如果有自动化测试来确保代码的正确性，测试的代码是否真的可以验证代码达到了协定的需求？&lt;/p&gt;
&lt;p&gt;代码看上去是否包含不明显的bug，比如使用错误的变量进行检查，或误把and写成or？&lt;/p&gt;
&lt;h1&gt;你是否考虑过……？&lt;/h1&gt;
&lt;p&gt;是否需要满足相关监管需求？&lt;/p&gt;
&lt;p&gt;作者是否需要创建公共文档或修改现存的帮助文档？&lt;/p&gt;
&lt;p&gt;是否检查了面向用户的信息的正确性？&lt;/p&gt;
&lt;p&gt;是否有会在生产环境中导致应用停止运行的明显错误？代码是否会错误地指向测试数据库，是否存在应在真实服务中移除的硬编码的stub代码？&lt;/p&gt;
&lt;p&gt;你对性能的需求是什么，你是否考虑了安全问题？这些是需要覆盖到的重大区域也是至关重要的话题。&lt;/p&gt;
&lt;p&gt;让我们深入探讨下性能，这是一个真正能从代码审查中获益的方面。&lt;/p&gt;
&lt;p&gt;系统对性能方面的非功能性需求应当同所有架构、设计的领域一样被置于重要位置。无论你是开发只容许纳秒级延时的低延迟交易系统，还是管理“待办事项”的手机应用，你都应该了解用户所认为的“太慢”。&lt;/p&gt;
&lt;p&gt;在考虑我们是否需要就代码性能进行代码审查之前，我们应该问自己几个关于具体需求是什么的问题。虽然一些应用确实不需要考虑每毫秒都花费在哪里，对于大部分应用，花费几个小时的折腾进行优化来获得的些许CPU下降的价值也是有限的，但有些地方还是审查者可以检查一下的，进而确保代码不会有一些常见可避免的性能缺陷。&lt;/p&gt;
&lt;h2&gt;这段代码是否有硬性的性能需求？&lt;/h2&gt;
&lt;p&gt;接受审查的代码是否涉及之前发布的服务等级协议（SLA）？或这个需求本身有特别的性能需求？&lt;/p&gt;
&lt;p&gt;如果代码导致“登录页面加载太慢”，那原始的开发者需要找出合适的加载时间是多久，不然审查者或作者本人如何确保改进后的速度足够快？&lt;/p&gt;
&lt;p&gt;如果有硬性的需求，是否有测试能证明满足了该需求？任何注重性能的系统应该就性能提供自动化测试，这能确保发布的SLA达到预期（如所有订单请求要在10毫秒内处理）。没有这些，你只能依靠你的用户来告诉你没有达到对应的SLA。这不仅是一种糟糕的用户体验，还会带来原本可避免的罚金和支出。&lt;/p&gt;
&lt;p&gt;这个修复或新增的功能是否会反向影响到任何现存的性能测试结果
如果你定期运行性能测试或有测试套件可以按需运行它们，那你就需要检查新的代码是否使得性能关键区域的系统性能有所下降。这可以是一个自动化的流程，但由于在持续集成环境中更常运行单元测试而不是性能测试，所以值得特别指出可以在代码审查中检查这项。&lt;/p&gt;
&lt;h2&gt;调用外部的服务或应用的代价是昂贵的&lt;/h2&gt;
&lt;p&gt;任何通过网路来使用外部系统的方式通常会比没有很好优化的方法有更差的性能。考虑以下几点：&lt;/p&gt;
&lt;p&gt;调用数据库：最坏的情况是问题隐藏在系统抽象中，如关系对象映射（ORM）中。但是在代码审查中你应该可以找到常见的导致性能问题的问题，如在循环中逐个调用数据库，一种情况就是加载ID列表之后，再在数据库中逐个查询ID对应的每条数据。 &lt;/p&gt;
&lt;p&gt;不必要的网络调用：就像数据库一样，远程服务有时也会被过度使用，原来只要一个远程调用就可实现的，或者可以使用批量或缓存防止昂贵网络调用的，却使用多个远程调用来实现。再次强调，像数据库一样，有时抽象类会隐藏调用远程API的方法。 &lt;/p&gt;
&lt;p&gt;移动或可穿戴应用过于频繁地调用后端程序：这基本上和&amp;ldquo;不必要的网络调用&amp;rdquo;相同，但是在移动设备上会产生其他问题，这不仅会产生不必要的调用后端使得性能变差，还会更快地消耗电量甚至导致用户的金钱支出。&lt;/p&gt;
&lt;h2&gt;有效且高效地使用资源&lt;/h2&gt;
&lt;p&gt;代码是否用锁来控制共享资源的访问？这是否会导致性能降低或死锁？&lt;/p&gt;
&lt;p&gt;锁是一个性能开销大户，并在多线程环境中很难理清。考虑使用以下模式：单线程写或修改值，其余线程只读，或使用无锁算法。&lt;/p&gt;
&lt;p&gt;是否存在内存泄露？Java中一些常见的原因会是：可变的静态字段，使用ThreadLocal变量和使用类加载器。 &lt;/p&gt;
&lt;p&gt;是否存在内存无限增长？这个和内存泄露不同，内存泄漏是指无用的对象不能被垃圾回收器回收。但对于任何语言，就算是没有垃圾回收的语言，也能创建无限变大的数据结构。作为审查者，如果你看见新的变量不断被加到list或map中，你就要问下，这个list或map什么时候失效或清除无用数据。&lt;/p&gt;
&lt;p&gt;代码是否关闭了连接或数据流？关闭连接或文件、网络数据流很容易会被忘记。当你审查别人代码时，如果使用到文件、网络或数据库连接，就要确保它们被正确地关闭了。&lt;/p&gt;
&lt;p&gt;资源池是否配置正确？针对一个环境的最佳配置取决于很多因素，所以作为审查者你很难马上知道像数据库连接池大小是否正确等这些问题。但是有一些是你一眼就可以看出来的，像资源池是否太小（比如大小设置为1）或太大（如数百万线程）。如果无法确定，就从默认值开始。没有使用默认值的就需要提供一定的测试或计算来证明这么配置的合理性。&lt;/p&gt;
&lt;h2&gt;审查者可以轻松找出的警告信号&lt;/h2&gt;
&lt;p&gt;一些代码一眼就能看出存在潜在性能问题。这依赖于所使用的语言和类库。&lt;/p&gt;
&lt;p&gt;反射：Java的反射比正常调用要慢。如果你在审查含有反射的代码，你就要问下是否必须使用它。&lt;/p&gt;
&lt;p&gt;超时：当你审查代码时，你可能不知道一个操作合适的超时时间，但是你要想一下“如果超时了，会对系统其他部分造成什么影响？”。作为审查者你应该考虑最坏的情况：当发生5分钟的延时，应用是否会阻塞？如果超时时间设置成1秒钟最坏的情况会是怎么样的？如果代码作者不能确定超时长度，你作为审查者也不知道一个选定的时间的好坏，那么是时候找一个理解这其中影响的人参与代码审查了。&lt;/p&gt;
&lt;p&gt;并行：代码是否使用多线程来运行一个简单的操作？这样是否花费了更多的时间以及复杂度而并没有提升性能？如果使用现代化的Java，那其中潜在的问题相较于显示创建线程中的问题更不容易被发现：代码是否使用Java 8新的并行流计算但并没有从并行中获益？比如，在少量元素上使用并行流计算，或者只是运行非常简单的操作，这可能比在顺序流上运算还要慢。&lt;/p&gt;
&lt;h2&gt;正确性&lt;/h2&gt;
&lt;p&gt;这些不一定影响系统的性能，但是它们与多线程环境运行关系密切，所以和这个主题有关：&lt;/p&gt;
&lt;p&gt;代码是否使用了正确的适合多线程的数据结构。&lt;/p&gt;
&lt;p&gt;代码是否存在竞态条件（race conditions）？多线程环境中代码非常容易造成不明显的竞态条件。作为审查者，可以查看不是原子操作的get和set。&lt;/p&gt;
&lt;p&gt;代码是否正确使用锁？和竞态条件相关，作为审查者你应该检查被审代码是否允许多个线程修改变量导致程序崩溃。代码可能需要同步、锁、原子变量来对代码块进行控制。&lt;/p&gt;
&lt;p&gt;代码的性能测试是否有价值？很容易将小型的性能测试代码写得很糟糕，或者使用不能代表生产环境数据的测试数据，这样只会得到错误的结果。&lt;/p&gt;
&lt;p&gt;缓存：虽然缓存是一种能防止过多高消耗请求的方式，但其本身也存在一些挑战。如果审查的代码使用了缓存，你应该关注一些常见的问题，如，不正确的缓存失效方式。&lt;/p&gt;
&lt;h2&gt;代码级优化&lt;/h2&gt;
&lt;p&gt;对大部分并不是要构建低延时应用的机构来说，代码级优化往往是过早优化，所以首先要知道代码级优化是否必要。&lt;/p&gt;
&lt;p&gt;代码是否在不需要的地方使用同步或锁操作？如果代码始终运行在单线程中，锁往往是不必要的。&lt;/p&gt;
&lt;p&gt;代码是否可以使用原子变量替代锁或同步操作？&lt;/p&gt;
&lt;p&gt;代码是否使用了不必要的线程安全的数据结构？比如是否可以使用ArrayList替代Vector？&lt;/p&gt;
&lt;p&gt;代码是否在通用的操作中使用了低性能的数据结构？如在经常需要查找某个特定元素的地方使用链表。&lt;/p&gt;
&lt;p&gt;代码是否可以使用懒加载并从中获得性能提升？&lt;/p&gt;
&lt;p&gt;条件判断语句或其他逻辑是否可以将最高效的求值语句放在前面来使其他语句短路？&lt;/p&gt;
&lt;p&gt;代码是否存在许多字符串格式化？是否有方法可以使之更高效？&lt;/p&gt;
&lt;p&gt;日志语句是否使用了字符串格式化？是否先使用条件判断语句校验了日志等级，或使用延迟求值？&lt;/p&gt;
&lt;h2&gt;简单的代码即高效的代码&lt;/h2&gt;
&lt;p&gt;Java代码中有一些简单的东西可以供审查者寻找，这些会使JVM很好地替你优化你的代码：&lt;/p&gt;
&lt;p&gt;短小的方法和类。&lt;/p&gt;
&lt;p&gt;简单的逻辑，即消除嵌套的条件或循环语句。&lt;/p&gt;
&lt;h1&gt;安全&lt;/h1&gt;
&lt;p&gt;你在构建一个安全、稳固的系统所花费的精力，和花在其他特性上的一样，取决于项目本身，项目运行的地方、它使用的用户、需要访问的数据等。我们现在着重看一些你可能在代码审查时关注的地方。&lt;/p&gt;
&lt;h2&gt;尽可能使用自动化&lt;/h2&gt;
&lt;p&gt;有惊人数量的安全检查可以被自动化，而不需要人工干预。安全测试不一定要启动所有系统进行完整的渗透测试，一些问题可以在代码级就能被发现。&lt;/p&gt;
&lt;p&gt;常见问题如SQL注入或跨站脚本可以在持续集成环境通过相应工具检查出。你也能通过OWASP依赖检测工具自动化检查你依赖中已知的漏洞。&lt;/p&gt;
&lt;h2&gt;有时需要“看情况”&lt;/h2&gt;
&lt;p&gt;对有的校验你可以简单回答“是”或“否”，有时你需要一个工具指出潜在的问题，之后再由人工来决定这个是否需要解决。这也正是Upsource真正的闪光点。Upsource显示代码检查结果，审查者可以利用这些来决定代码是否需要改动或还可以接受目前的情况。&lt;/p&gt;
&lt;h2&gt;理解你用到的依赖&lt;/h2&gt;
&lt;p&gt;第三方类库是侵蚀系统安全并引起漏洞的一个途径。当审查代码时至少你要检查是否引入了新的依赖（如第三方类库）。如果你还没有自动化检查漏洞，你应该检查新引入的类库中已知的问题。&lt;/p&gt;
&lt;p&gt;你也应该尝试着最小化每个类库的版本，当然如果其他依赖有一个额外的间接依赖，这点可能达不到。但最简单的最小化自己代码暴露在他人代码的（通过类库或服务）安全问题中的方法有：&lt;/p&gt;
&lt;p&gt;尽可能使用源码并理解它的可信度。&lt;/p&gt;
&lt;p&gt;使用你所能得到的质量最高的类库。 &lt;/p&gt;
&lt;p&gt;追踪你在何处使用了什么，当新的漏洞出现，你可以查看你受影响的程度。&lt;/p&gt;
&lt;h2&gt;检查是否新的路径和服务需要认证&lt;/h2&gt;
&lt;p&gt;无论你开发web应用、提供web服务或一些其他需要认证的API，当你增加一个新的URI或服务时，你应该确保它不能在没有认证的情况下被访问（假设认证是你系统的需求）。你只要简单地检查代码的开发者写了合适的测试用例来展示进行了认证。&lt;/p&gt;
&lt;p&gt;你应该不只针对使用用户名和密码的人类用户来考虑认证。其他系统或自动化流程来访问你的应用或服务也会需要认证。这可能影响你们系统中对“用户”的定义。&lt;/p&gt;
&lt;h2&gt;数据是否需要加密&lt;/h2&gt;
&lt;p&gt;当你保存一些数据到磁盘或通过线缆传输，你需要了解数据是否应该被加密。显然密码永远不应该是简单文本，但是有诸多其他情况数据需要加密。如果被审查的代码通过线缆来传送数据或保存在某地或以其他方式离开你的系统，且你不知道它是否应该被加密，尝试询问下你组织中可以回答这个问题的人。&lt;/p&gt;
&lt;h2&gt;密码是否被很好地控制？&lt;/h2&gt;
&lt;p&gt;这里的密码包含密码（如用户密码、数据库密码或其他系统的密码）、秘钥、令牌等等。这些永远不应该存放在会提交到源码控制系统的代码或配置文件中，有其他方式管理这些密码，例如通过密码服务器（secret server）。当审查代码时，要确保这些密码不会悄悄进入你的版本控制系统中。&lt;/p&gt;
&lt;h2&gt;代码的运行是否应该被日志记录或监控？是否正确地使用？&lt;/h2&gt;
&lt;p&gt;日志和监控需求因各个项目而不同，一些需要合规，一些拥有比别人严格的行为、事件日志规范。如果你有规章规定哪些需要记录日志，何时、如何记录，那么作为代码审查者你应该检查提交的代码是否满足要求。如果你没有固定的规章，那么就考虑：&lt;/p&gt;
&lt;p&gt;代码是否改变了数据（如增删改操作）？是否应该记录由谁何时改变了什么？&lt;/p&gt;
&lt;p&gt;代码是否涉及关键性能的部分？是否应该在性能监控系统中记录开始时间和结束时间？&lt;/p&gt;
&lt;p&gt;每条日志的日志等级是否恰当？一个好的经验法则是“ERROR”触发一个提示发送到某处，如果你不想这些消息在凌晨3点叫醒谁，那么就将之降级为“INFO”或“DEBUG”。当在循环中或一条数据可能产生多条输出的情况下，一般不需要将它们记录到生产日志文件中，它们更应该被放在“DEBUG”级别。&lt;/p&gt;
&lt;h2&gt;记得叫上专家&lt;/h2&gt;
&lt;p&gt;安全是个很大的话题，大到足以让你的公司聘请技术安全专家。我们有安全专家就可以获得他们的帮助，如，邀请他们参加代码审查，或邀请他们在审查代码时和我们结对。如果这个无法实现，我们可以充分学习我们系统的环境，来理解我们有哪种安全需求（面向内部的企业级应用和面向客户的网页应用有不同的标准），所以我们可以更好地理解我们应该在代码审查中看什么。&lt;/p&gt;
&lt;h1&gt;总结&lt;/h1&gt;
&lt;p&gt;代码审查是一个很好的方式，不仅确保了代码质量和一致性，也在团队中或团队间分享了项目知识。即使你已经自动化了基础的校验，还有许多不同代码、设计的方面需要考虑。代码审查工具，如Upsource，通过在每个代码提交的检查中高亮可疑的代码并分析哪些问题已经被修复，新引入哪些问题，可以帮你定位一些潜在的问题。工具也可以简化流程，因为它提供了一个平台来讨论设计和代码实现，也可以邀请审查者、作者和其他相关人员参加讨论直到达成共识。&lt;/p&gt;
&lt;p&gt;最后，团队需要花时间决定代码质量的哪些因素对他们是重要的，也需要专家人工决定哪些规则应用到各个代码审查中，参与到审查中的每个人都应该具备并使用人际交往的技巧，如积极的反馈、谈判妥协以达到最终的共识，即代码应该怎么样才“足够好”可以通过审查。&lt;/p&gt;
&lt;p&gt;关于作者
Trisha Gee为一系列行业开发Java应用程序，包括金融、制造业、软件和非盈利组织，包括各种规模的公司。她在开发Java高性能系统上有丰富经验，并积极帮助开发者使他们拥有高生产率，她也涉足开源开发。Trisha是Sevilla Java用户组和Java Champion的带头人，她信任社区并分享自己的观点，帮助我们从错误中学习，并在成功的基础上继续发展。她是JetBrains技术推广人，也就是说她会不断分享所有有趣的发现。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;https://mp.weixin.qq.com/s?__biz=MzIwMzg1ODcwMw==&amp;amp;mid=2247486399&amp;amp;idx=1&amp;amp;sn=219af64c7ecbf9e6c601cefddd0a0eba&amp;amp;source=41#wechat_redirect&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 07:00:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/ru-he-zuo-yi-ge-code-review.html</guid><category>想法</category><category>计算机</category></item><item><title>How to publish your game</title><link>/posts/how-to-publish-your-game.html</link><description>&lt;p&gt;A few thoughts as someone who has developed games for iOS, Android, and the web:
In today's world, if you want to retain implicit ownership of your product's name, a simultaneous triple-platform release is not optional, it is required. It must be performed in precisely the following way, or your launch will fail:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Register your game's domain before announcing it to the public.&lt;/li&gt;
&lt;li&gt;Next, upload your iOS app to iTunes Connect and wait for up to one week for the app to be approved.&lt;/li&gt;
&lt;li&gt;Next, upload your Android app to the Google Play store; approval only takes a few hours.&lt;/li&gt;
&lt;li&gt;Finally, make the web version public, and announce the game along with links to the mobile versions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you deviate from this order, then you're screwed. One example: I released a game on the web and waited one day to upload the Android version to the Google Play store. I figured that gave me a little extra time to test and check for bugs, and what's the rush anyway? Nobody could steal a game in just 24 hours, right? Wrong. My app was rejected because Google insisted my app was attempting to impersonate another developer's app. &lt;strong&gt;The other developer's app was simply my own website, stolen line for line, tossed into Phonegap, and released the same day as my website. I explained this to Google in the appeal form, even including a link proving I owned the site the other developer stole it from, and they rejected my appeal without checking the link - I could clearly see in my server logs that they never clicked on it. Google does not allow you to file a second appeal, so I had to give my app an awful name no one would recognize it by, and the clone received all the downloads and glory thanks to the buzz my website's name was generating for it.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Another example: I was the first to publish an iOS app with the same name as my website. After the app had been waiting for review for four days, I figured it would be approved any moment now, and that it was safe for me to launch my website. I launched, and it turns out that Apple's app review process is not FIFO, because two days later, a clone with the same name and all the code stolen from my site was already approved for iOS, yet my own app was still waiting for review. My app was then rejected a few days later because it had the same name as an app that stole my code... again.
Gabriele Cirulli is an extremely unlucky man stuck in an extremely unfair landscape, and I cannot fault him for wallowing in the first of the five stages of grief. If Flappy Bird's alleged $50,000/day income can safely be assumed to be the average earned by the ads on any given #1 iTunes free app, then the entity which first claimed the name "2048" in iTunes Connect is currently a millionaire, because 2048 was at the very top of the iTunes free app charts for weeks. Gabriele seems to believe or hope that the masses will see his "repost" of his own app and be stricken by the desire to do the ethically right thing and uninstall all of the rushed clones and install the legitimate version and play it with all the fervor and excitement as if the global 2048 hype still currently existed. Unfortunately this will NEVER happen.&lt;/p&gt;
&lt;p&gt;On a side note, Phonegap is only getting worse over time. Typical Adobe rot is setting in; the last version had a catastrophic bug causing the xml manifest to simply not be read during the build process, because a critical "for" loop was referencing the child element of a nonexistent variable. They swept this under the rug; countless hapless developers were mindlessly releasing broken apps during this period. Half of Phonegap's documentation refers to "Cordova" and executing "cordova" on the command line where it should say "Phonegap". Commands that have different names between Cordova and Phonegap are still documented as the Cordova equivalent, so one must use Google to find other people who searched for hours until they themselves came across the explanation that the same command in Phonegap requires the use of a completely different word. It is an absolute trainwreck, but aside from that, the primary issue for consumers now is that apps built with Phonegap no longer work correctly on newer versions of Android and haven't for months, which is why Gabriele's extremely simple and resource-minimal app is currently getting a bunch of 1- and 2-star reviews in the Google Play store with complaints about the speed.&lt;/p&gt;
&lt;p&gt;来源： &lt;a href="https://news.ycombinator.com/item?id=7704800"&gt;https://news.ycombinator.com/item?id=7704800&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;翻译&lt;/h2&gt;
&lt;p&gt;作为一个曾经为iOS,android,web开发过游戏的人，下面是我的一些经验：
在现在的世界里，如果你想获得你产品名字的所有权, 那么需要近乎同时的在三个平台发布, 并且你必须这么做. 而且你得严格的按照下面这几步做, 不然你的发布就失败了.&lt;/p&gt;
&lt;p&gt;在公之于众之前注册你游戏的域名
接下来,上传你的 iOS 应用到 iTunes Connect 然后等待多达一周的时间知道通过审核
然后上传你的 Android 应用到 Google Play, 大概只需要几小时就能通过
最后公布你的 web 版本, 然后附带着移动版本的链接发布你的游戏&lt;/p&gt;
&lt;p&gt;如果你偏离的这个顺序, 那么你就完蛋了. 举个栗子, 我现在网上发布了一个游戏然后才在一天之后才上传到 Google Play 市场. 因为我觉得我需要更多的时间来测试和检查 bug, 而且着啥急啊? 总不能有人在24消失之内就把我的游戏偷了吧? 错了, 我的应用被 Google 拒绝了因为他们坚持认为我的应用正在模仿其他人的. 其他开发者的应用完全是把我的网站一行不差的包装了一下（用Phonegap）。我向google解释了这一切&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 04:10:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/how-to-publish-your-game.html</guid><category>创业</category></item><item><title>Python 标准库中的容器</title><link>/posts/python-biao-zhun-ku-zhong-de-rong-qi.html</link><description>&lt;h2&gt;namedtuple&lt;/h2&gt;
&lt;p&gt;a class template to generated memory efficient class&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MyClass = namedtuple('MyClass', [attrib_foo, attrib_bar, ...])&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;keys and items of a dict can be used as a set.&lt;/p&gt;
&lt;h2&gt;deque&lt;/h2&gt;
&lt;p&gt;deque is implemented as deque, it can be created with maxlen=N&lt;/p&gt;
&lt;p&gt;appendleft, popleft, append, pop&lt;/p&gt;
&lt;h2&gt;defaultdict&lt;/h2&gt;
&lt;p&gt;multidict = defaultdict(list) # builds a multidict using list
multidict = defaultdict(set) # builds a multidict using set&lt;/p&gt;
&lt;h2&gt;OrderedDict&lt;/h2&gt;
&lt;p&gt;it perserves the order as insertion, implemented with a linked list&lt;/p&gt;
&lt;h2&gt;Counter&lt;/h2&gt;
&lt;p&gt;words_count = Counter(words)&lt;/p&gt;
&lt;p&gt;Counter.most_common(N)  returns tuple
Counter.update(more)    add more words&lt;/p&gt;
&lt;p&gt;counter even supports +/-&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 04:09:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/python-biao-zhun-ku-zhong-de-rong-qi.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>python logging library</title><link>/posts/python-logging-library.html</link><description>&lt;h2&gt;Yifei's Notes&lt;/h2&gt;
&lt;p&gt;Very sad, logging only supports %-style string formatting&lt;/p&gt;
&lt;p&gt;&lt;code&gt;logging.exception&lt;/code&gt; is the right way to log exceptions, not &lt;code&gt;logging.error&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Basic Usage&lt;/h2&gt;
&lt;p&gt;库只应该定义自己的日志的格式, 而不应该定义自己的日志如何输出, 日志输出应该由最终的使用程序来定义.
 
如果使用systemd来运行程序的话, 直接把所有日志打印到stdout就可以了&lt;/p&gt;
&lt;p&gt;&lt;code&gt;logging.basicConfig(level=level, format=fmt_string, filename=file, datefmt=datefmt)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;if you don't supply filename, the log is printed to stdout&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;logging.debug(&amp;#39;%string&amp;#39;, args) # send to format string as message
logging messages

logging.getLogger.level = logging.DEBUG
# reset logging level
# basicConfig can only be called once in the main thread
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;python 的 logging&lt;/h1&gt;
&lt;h2&gt;基本使用&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# myapp.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mylib&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;myapp.log&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Started&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;mylib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Finished&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# mylib.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Doing something&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you run myapp.py, you should see this in myapp.log:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Started&lt;/span&gt;
&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Doing&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt;
&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Finished&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;进阶教程&lt;/h2&gt;
&lt;p&gt;logging 模块提供了四种不同的模块&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Loggers expose the interface that application code directly uses.&lt;/li&gt;
&lt;li&gt;Handlers send the log records (created by loggers) to the appropriate destination.&lt;/li&gt;
&lt;li&gt;Filters provide a finer grained facility for determining which log records to output.&lt;/li&gt;
&lt;li&gt;Formatters specify the layout of log records in the final output.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;logger 是一棵树，默认的logger 是 root logger，logging 模块的方法也都是在调用这个logger&lt;/p&gt;
&lt;h2&gt;Logging in a library&lt;/h2&gt;
&lt;h3&gt;get Logger&lt;/h3&gt;
&lt;p&gt;by defualt, the logger is called root logger.&lt;/p&gt;
&lt;p&gt;You should use the factory method logging.getLogger(name) to instaniate a logger object, the name is supposed to be foo.bar.baz, so the recommnend value is &lt;strong&gt;name&lt;/strong&gt;，That’s because in a module, &lt;strong&gt;name&lt;/strong&gt; is the module’s name in the Python package namespace.&lt;/p&gt;
&lt;h3&gt;in lib.py&lt;/h3&gt;
&lt;p&gt;logger = logging.getLogger(&lt;strong&gt;name&lt;/strong&gt;)
logger.addHandler(logging.NullHandler())&lt;/p&gt;
&lt;p&gt;logger.debug('')&lt;/p&gt;
&lt;h3&gt;in app.py&lt;/h3&gt;
&lt;p&gt;logging.basicConfig() # seems like logging.start... must be called to enable logging&lt;/p&gt;
&lt;h2&gt;turn off 3rd party logs&lt;/h2&gt;
&lt;p&gt;logging.getLogger("requests").setLevel(logging.WARNING)&lt;/p&gt;
&lt;p&gt;import logging&lt;/p&gt;
&lt;p&gt;log = logging.getLogger(&lt;strong&gt;name&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;log.setLevel(logging.INFO)  # 设置logger的级别&lt;/p&gt;
&lt;p&gt;handler = logging.NullHandler()
handler.setLevel(logging.INFO)  # 设置handler的级别&lt;/p&gt;
&lt;p&gt;formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)&lt;/p&gt;
&lt;p&gt;log.addHandler(handler)&lt;/p&gt;
&lt;h1&gt;日志的作用&lt;/h1&gt;
&lt;p&gt;Logging serves two purposes: [1]
    • Diagnostic logging records events related to the application’s operation. If a user calls in to report an error, for example, the logs can be searched for context.
    • Audit logging records events for business analysis. A user’s transactions can be extracted and combined with other user details for reports or to optimize a business goal.&lt;/p&gt;
&lt;h1&gt;最佳实践&lt;/h1&gt;
&lt;p&gt;Here is an example of best practice from the requests source – place this in your &lt;strong&gt;init&lt;/strong&gt;.py
import logging
logging.getLogger(&lt;strong&gt;name&lt;/strong&gt;).addHandler(logging.NullHandler())&lt;/p&gt;
&lt;p&gt;日志应该看作是事件流, 不要自己管理日志, 把日志输出到stdout[2]&lt;/p&gt;
&lt;p&gt;[1] http://docs.python-guide.org/en/latest/writing/logging/&lt;/p&gt;
&lt;p&gt;logging模块是thread safe的, 至少理论上来说是的...&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 03:54:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/python-logging-library.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>python3 venv</title><link>/posts/python3-venv.html</link><description>&lt;h1&gt;Yifei's Notes&lt;/h1&gt;
&lt;h2&gt;traps&lt;/h2&gt;
&lt;p&gt;venv puts the current directory's name in its source code generated, so after renaming your directory, you will have to rename the &lt;code&gt;activate&lt;/code&gt; file and the &lt;code&gt;pip&lt;/code&gt; file.&lt;/p&gt;
&lt;h1&gt;venv&lt;/h1&gt;
&lt;p&gt;In Python 3, there comes a virtual environment shipped with the standard lib called &lt;code&gt;venv&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;to create a new venv, you can simply call:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python3 -m venv &amp;amp;lt;venv-name&amp;amp;gt;
virtualenv VENV_NAME  # for python 2
    --system-site-pakcages to bring system packages
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to activate the venv, you need source the generated shell script&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;source &amp;amp;lt;venv-name&amp;amp;gt;/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note: the generated activate script contains directory infomation based on your local computer and projects, so it's NOT portable.&lt;/p&gt;
&lt;p&gt;to deactivate it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;deactivate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But, in most times, we don't really care about the name of the virtual env, so let's simply call it &lt;code&gt;.venv&lt;/code&gt;, and you can add the following to your &lt;code&gt;.bashrc&lt;/code&gt; for convinence&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DEFAULT_VENV_NAME=&amp;quot;.venv&amp;quot;
alias create-venv=&amp;quot;python3 -m venv $DEFAULT_VENV_NAME&amp;quot;
alias activate=&amp;quot;source $DEFAULT_VENV_NAME/bin/activate&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;after you activated you venv, there would be a prompt before your shell prompt. You can see that &lt;code&gt;python3&lt;/code&gt; and &lt;code&gt;pip3&lt;/code&gt; is set to the venv copy of python3 by running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;which python3 # -&amp;amp;gt; .venv/bin/python3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;if you run &lt;code&gt;pip install&lt;/code&gt;, the packages will be install in your local venv directory, so no sudo needed!&lt;/p&gt;
&lt;p&gt;since the venv directory is not portable, the best practice would be save your dependencies is your &lt;code&gt;requirements.txt&lt;/code&gt; file.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 03:52:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/python3-venv.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>用于替代ajax的 fetch API</title><link>/posts/yong-yu-ti-dai-ajaxde-fetch-api.html</link><description>&lt;p&gt;fetch is the new and easy api for js to make request to the server, it replaces XMLHttpRequest.&lt;/p&gt;
&lt;h2&gt;Objects:&lt;/h2&gt;
&lt;p&gt;fetch, Request, Reponse, Headers&lt;/p&gt;
&lt;h2&gt;Usage:&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fetch(&amp;#39;/path/to/fetch&amp;#39;,
    {method: &amp;#39;GET&amp;#39;}
).then(function (response) {
    // process response;
    return response.json(); // returns a json promise
    return response.text(); // returns a text promise


    return ret; // will be consumed in the next then funcion
}).then(function (data) {
    // data is a json or text
    // process
}).catch(function (err) {

    // error handling
});
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;notice, the useful method &lt;/p&gt;
&lt;p&gt;Advanced:&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 03:45:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/yong-yu-ti-dai-ajaxde-fetch-api.html</guid><category>大前端</category><category>计算机</category></item><item><title>List of OpenGL online tutorials</title><link>/posts/list-of-opengl-online-tutorials.html</link><description>&lt;p&gt;So I started to learn OpenGL, but the red book and blue book is just too detailed. I googled around, and knew that modern OpenGL is preferred (version 3 and above), however, the old Nehe's tutorial which is about OpenGL 1.x is still everywhere. To help beginners from digging too much into the old and deprecated way, here is a list of tutorials targeting modern OpenGL:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://antongerdelan.net/opengl/"&gt;Anton's OpenGL Tutorials&lt;/a&gt;
    Great, updated frequently, but there is no source code provided. Good as a reference and starting point, but you just can't get anything up and running with it, you can just get the concept of how to do things in OpenGL.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://open.gl/"&gt;open.gl&lt;/a&gt;
    not complete, but worth a view, the source code is elegant. Uses GLFW as window management&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.opengl-tutorial.org"&gt;OpenGL Tutorial&lt;/a&gt;
    Great, the code is horriable, but somehow they did make it clear about what they are doing. Uses GLFW and glm.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tomdalling.com/blog/category/modern-opengl/"&gt;Tom Dalling's OpenGL Tutorials&lt;/a&gt;
    Great, short and covers the basics&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.arcsynthesis.org/gltut"&gt;Learning Modern 3D Graphics Programming&lt;/a&gt;
    Great, intermediate&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ogldev.atspace.co.uk/index.html"&gt;ogldev's OpenGL Step by Step&lt;/a&gt;
    Great, a little long(40 lessons), targeting linux&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nopper.tv/norbert/opengl.html"&gt;OpenGL 3 and OpenGL 4 with GLSL&lt;/a&gt;
    only source code, no guides, eclipse needed.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.scratchapixel.com/"&gt;Scratch a Pixel&lt;/a&gt;
    a website about math used in Computer Graphics&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.swiftless.com/opengl4tuts.html"&gt;Swiftless's OpenGL Tutorial&lt;/a&gt;
    not complete, outdated&lt;/li&gt;
&lt;li&gt;&lt;a href="http://openglbook.com/the-book/"&gt;OpenGL Book&lt;/a&gt;
    not complete&lt;/li&gt;
&lt;li&gt;&lt;a href="http://duriansoftware.com/joe/An-intro-to-modern-OpenGL.-Table-of-Contents.html"&gt;Joe's&lt;/a&gt;
    not complete&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 03:44:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/list-of-opengl-online-tutorials.html</guid><category>图形学</category><category>计算机</category></item><item><title>跨过长城的镜像</title><link>/posts/kua-guo-chang-cheng-de-jing-xiang.html</link><description>&lt;h2&gt;pip&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Douban pip mirror： sudo pip install -i http://pypi.douban.com/simple/ flask&lt;/li&gt;
&lt;li&gt;Aliyun pip mirror： http://mirrors.aliyun.com/pypi/simple/&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 03:43:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/kua-guo-chang-cheng-de-jing-xiang.html</guid><category>小技巧</category><category>计算机</category><category>通用工具</category></item><item><title>HTTPS 和 SSL 相关信息</title><link>/posts/https-he-ssl-xiang-guan-xin-xi.html</link><description>&lt;h1&gt;证书文件&lt;/h1&gt;
&lt;p&gt;the de facto SSL certs format is X.509 v3&lt;/p&gt;
&lt;p&gt;it contains:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;version   &lt;/li&gt;
&lt;li&gt;serial number &lt;/li&gt;
&lt;li&gt;algoirthm &lt;/li&gt;
&lt;li&gt;authority &lt;/li&gt;
&lt;li&gt;validate date &lt;/li&gt;
&lt;li&gt;orgnisation   &lt;/li&gt;
&lt;li&gt;pubkey    &lt;/li&gt;
&lt;li&gt;etc.  &lt;/li&gt;
&lt;li&gt;sign, the ca signs the cert using its private key&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 03:38:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/https-he-ssl-xiang-guan-xin-xi.html</guid><category>计算机</category><category>网络</category></item><item><title>动态规划</title><link>/posts/dong-tai-gui-hua.html</link><description>&lt;p&gt;如果每个阶段的决策都和状态无关，那么就是贪心算法&lt;/p&gt;
&lt;p&gt;如果需要把整个解空间都遍历一遍，那么就是穷举&lt;/p&gt;
&lt;p&gt;如果可一个根据上一步的结果的出下一步的结果，可以使用动态规划&lt;/p&gt;
&lt;p&gt;以下转载自：https://www.zhihu.com/question/39948290/answer/155958549&lt;/p&gt;
&lt;h1&gt;1.动态规划是什么?&lt;/h1&gt;
&lt;p&gt;答：动态规划是一种通过“大而化小”的思路解决问题的算法。区别于一些固定形式的算法，如二分法，宽度优
先搜索法，动态规划没有实际的步骤来规定第一步做什么第二步做什么。所以更加确切的说，动态规划是一种
解决问题的思想。这种思想的本质是，一个规模比较大的问题（假如用2‑3个参数可以表示），是通过规模比
较小的若干问题的结果来得到的（通过取最大，取最小，或者加起来之类的运算）所以我们经常看到的动态规
划的核心——状态转移方程都长成这样：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;f[i][j] = f[i ‑ 1][j] + f[i][j ‑ 1]&lt;/li&gt;
&lt;li&gt;f[i] = max{f[j] if j &amp;lt; i and …} + 1&lt;/li&gt;
&lt;li&gt;f[i][j] = f[0][j ‑ 1] &amp;amp;&amp;amp; judge(1,i) || f[1][j ‑ 1] &amp;amp;&amp;amp; judge(2,i) || …&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;2.动态规划面试考得多么？&lt;/h1&gt;
&lt;p&gt;答：多。并且越来越多。随着CS从业与求职者的增加，并伴随大家都是“有备而来”的情况下，一般简单的反转
链表之类的题目已经无法再在面试中坚挺了。因此在求职者人数与招聘名额的比例较大的情况下，公司会倾向
于出更难的面试问题。而动态规划就是一种比较具有难度，又比较“好出”的面试问题。相比其他的算法与数据
结构知识来说，贪心法分治法太难出题了，搜索算法往往需要耗费求职者过长的程序编写时间一般也不倾向于
出，二叉树链表等问题题目并没有那么多，而且求职者也都会着重准备这一块。因此动态规划这一类的问题，
便越来越多的出现在了面试中。&lt;/p&gt;
&lt;h1&gt;3.动态规划快在哪儿？&lt;/h1&gt;
&lt;p&gt;答：动态规划一般来说是“高效”的代名词，因为其解决的问题一般退而求其次的算法只有搜索了。以“数字三
角形”一题为例子（lintcode.com/problem/tr） ，在“三角矩阵”中找一条从上到下的路径，使得权值之和最
小。如果使用暴力搜索的算法，那么需求穷举出2^(n‑1)条路径（n为三角形高度），而使用动态规划的话，则
时间复杂度降低到了n^2，完成了质的飞跃。那么究竟为什么这么快呢？原因在于动态规划算法去掉了“无用和
重复的运算”。在搜索算法中，假如从A‑&amp;gt;B有2条路径，一条代价为10，另外一条代价为100，B‑&amp;gt;终点有1024
条路径。当我们选择了代价为10的那条路径走到B时，可以继续往下走完1024条路径到终点，但是在此之后，
我们再从代价为100的路径从A走到B时，我们可以发现此时无论如何走，都不可能有刚才从10的路径走过来更
好，所以这些计算是“无用”的计算，也可以说是“重复”的计算。这就是动态规划之所以“快”的重要原因。&lt;/p&gt;
&lt;h1&gt;4.学习动态规划有什么捷径？&lt;/h1&gt;
&lt;p&gt;答：我们将动态规划的常见类型分为如下几种：
&lt;em&gt; 矩阵型
&lt;/em&gt; 序列型
&lt;em&gt; 双序列型
&lt;/em&gt; 划分型
&lt;em&gt; 区间型
&lt;/em&gt; 背包型
&lt;em&gt; 状态压缩型
&lt;/em&gt; 树型
其中，在技术面试中经常出现的是矩阵型，序列型和双序列型。划分型，区间型和背包型偶尔出现。状态压缩
和树型基本不会出现（一般在算法竞赛中才会出现）。
每种类型都有着自己的题目特点和状态的表示方法。以矩阵型动态规划为例，一般题目会给你一个矩阵，告诉
你有一个小人在上面走动，每次只能向右和向下走，然后问你比如有多少种方案从左上走到右下
(lintcode.com/problem/un)。这种类型状态表示的特点一般是使用坐标作为状态，如f[i][j]表示走到(i,j)这个位
置的时候，一共有多少种方案。状态的转移则是考虑是从哪儿走到(i,j)这个坐标的。而序列型的动态规划，一
般是告诉你一个序列；双序列的动态规划一般是告诉你两个字符串或者两个序列。
将所做过的动态规划问题按照这些类别进行归类，分析状态的表示方法和状态转移方程的构造方法在每种类型
中的近似之处，会让你更快的学会动态规划。&lt;/p&gt;
&lt;h1&gt;5.什么样的问题适合使用动态规划？&lt;/h1&gt;
&lt;p&gt;答：可以使用动态规划的问题一般都有一些特点可以遵循。如题目的问法一般是三种方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;求最大值/最小值&lt;/li&gt;
&lt;li&gt;求可不可行&lt;/li&gt;
&lt;li&gt;求方案总数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果你碰到一个问题，是问你这三个问题之一的，那么有90%的概率是使用动态规划来求解。
要重点说明的是，如果一个问题让你求出“所有的”方案和结果，则肯定不是使用动态规划。&lt;/p&gt;
&lt;h1&gt;6.解决一个动态规划问题的步骤是什么？&lt;/h1&gt;
&lt;p&gt;答：首先根据“问5”判断是否是动态规划的问题，如果是，则尝试将其按照“问4”进行分类，找到对应的类别和
相似的问题。接着从下面的4个要素去逐步剖析解决这道题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;状态是什么&lt;/li&gt;
&lt;li&gt;状态转移方程是什么&lt;/li&gt;
&lt;li&gt;状态的初始值是什么&lt;/li&gt;
&lt;li&gt;问题要求的最后答案是什么&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;每个步骤分析完成之后，就基本上解决了整道动态规划的问题。&lt;/p&gt;
&lt;h1&gt;7.怎么优化动态规划的时间？&lt;/h1&gt;
&lt;p&gt;答：一般来说，使用动态规划求解的问题，时间上已经比暴力搜索要优化很多了。但是仍然存在着一些可以优
化的空间。通常来说，动态规划的时间优化，有如下两种常见的方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过变换状态优化&lt;/li&gt;
&lt;li&gt;通过决策单调优化&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于通过变换状态来优化的问题比较难，需要一些经验和灵感。而对于决策单调的优化，则比较简单，但适用
范围不广，一般只适用于划分型动态规划当中，通常这个方法可以将复杂度降低一个数量级。&lt;/p&gt;
&lt;h1&gt;8.怎样优化动态规划的空间？&lt;/h1&gt;
&lt;p&gt;答：动态规划的空间优化往往采用滚动数组优化。以一个二维的动态规划为例子。假如状态转移方程如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;f[i][j] = f[i ‑ 1][j] + f[i][j ‑ 1]。
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们可以发现，第i层的状态，已经和第i‑2层的状态没有关系了，那么这种情况下，用于存储第i‑2层的空间就可以被重复利用。方法非常简单，把数组的第一维对2取模就可以了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;f[i % 2][j] = f[(i ‑ 1) % 2][j] + f[i % 2][j‑1]。
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这种方法通常可以将空间复杂度降低一个数量级。&lt;/p&gt;
&lt;h1&gt;9.有什么书籍和参考资料可以推荐么？&lt;/h1&gt;
&lt;p&gt;著名的背包九讲：
vdisk.weibo.com/s/tanGy （也可以直接在网上搜索背包九讲）&lt;/p&gt;
&lt;h1&gt;10.有哪些动态规划题目必须要练习的？&lt;/h1&gt;
&lt;p&gt;在LintCode上包含了30余道动态规划的练习题，都是从实际的面试问题中汇总的精选练习：
lintcode.com/tag/dynami&lt;/p&gt;
&lt;p&gt;所以，动态规划自学并不难，关键是你要掌握学习的方法。
如果你觉得我说的很有用，欢迎关注我的微信公众号：ninechapter，里面有海量的算法题等你领取~&lt;/p&gt;
&lt;h2&gt;基础介绍&lt;/h2&gt;
&lt;p&gt;http://www.hawstein.com/posts/dp-novice-to-advanced.html&lt;/p&gt;
&lt;h2&gt;数组分割问题&lt;/h2&gt;
&lt;p&gt;http://www.cnblogs.com/liyukuneed/archive/2013/05/27/3090454.html&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 03:36:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/dong-tai-gui-hua.html</guid><category>算法</category><category>计算机</category></item><item><title>基础 socket 编程</title><link>/posts/ji-chu-socket-bian-cheng.html</link><description>&lt;p&gt;创建与使用 socket, 一个 echo server 和 client&lt;/p&gt;
&lt;p&gt;socket 客户端的四个步骤: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 socket 函数创建连接&lt;/li&gt;
&lt;li&gt;使用 connect 连接到服务器&lt;/li&gt;
&lt;li&gt;使用 send 和 recv 接收和发送消息&lt;/li&gt;
&lt;li&gt;使用 close 关闭连接&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第一步 创建一个 TCP socket
int sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
返回的 sock 可以看做一个 handle, 本质上是一个文件描述符( file descriptor) , 小于0表示错误&lt;/p&gt;
&lt;p&gt;表示 socket 地址的结构 sockaddr_in, 其中 in 表示 internet, 不是input&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;struct sockaddr_in {
    __uint8_t   sin_len;
    sa_family_t sin_family;
    in_port_t   sin_port;
    struct in_addr    sin_addr;
    char        sin_zero[8];
};
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中 sin_family和 sin_port和 sin_addr.s_addr 字段必须填写&lt;/p&gt;
&lt;p&gt;使用 inet_pton把 IP 字符串转化为32位整形
端口号需要使用 htons 转化&lt;/p&gt;
&lt;p&gt;下一步就是连接了, 注意 connect 和好多函数都要求把参数从 sockaddr_in 转化到 sockaddr, 然后再跟一个参数表示实际的数据结构的长度. 这是因为 C 不支持多态.&lt;/p&gt;
&lt;p&gt;第三步就是发送和接收数据, 我们使用 send 函数发送, send成功的话会返回发送成功的数据的长度, 可能和指定的数据不等, 因此需要判断是否发送成功. recv 也可能返回任意长度的数据, 因此需要在一个循环里接受. send 和 recv 都是阻塞的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;int send(int socket, const void* buffer, size_t length, int flags);
int recv(int socket, const void* buffer, size_t length, int flags);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最后关闭连接&lt;/p&gt;
&lt;p&gt;需要特别注意的是, 永远不要把来自其他主机的消息使用 pritnf 等不安全的函数打印出来&lt;/p&gt;
&lt;p&gt;socket 服务器的四个流程&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 socket 函数创建链接&lt;/li&gt;
&lt;li&gt;使用 bind 函数绑定端口号&lt;/li&gt;
&lt;li&gt;使用 listen打开监听模式&lt;/li&gt;
&lt;li&gt;使用 accept 接收新的客户, 并为之服务
    a.  accept 会为每个客户创建新的 socket
    b. 通过这个 socket 与客户端之间 send/recv
    c. 关闭该 socket&lt;/li&gt;
&lt;li&gt;关闭监听的 socket&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第一步,创建 socket, 和客户端完全一样
注意, 服务端的地址有所不同, 为了接受任何一个客户, 我们需要监听服务器的所有 IP (服务器可能有多个网卡, 也就有多个 IP).&lt;/p&gt;
&lt;p&gt;第二步, 使用 bind 绑定到对应的 ip 和端口号, listen 把 socket 设定为监听状态. 注意 listen 还有一个参数代表&lt;/p&gt;
&lt;p&gt;第三步, 使用 accept 开始阻塞地等待客户端. 注意 accept 实际上有两个返回值,一个通过函数返回的形式返回一个客户端的 socket, 还有一个通过指针的形式返回一个 sockaddr_in&lt;/p&gt;
&lt;p&gt;第四步,接下来, 把每一个获得的 client socket 都对应地处理&lt;/p&gt;
&lt;p&gt;关闭主 socket&lt;/p&gt;
&lt;p&gt;最后需要注意的是, &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用到的一些转化函数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;inet_pton/inetntop htons, ntohs, htonl, ntohl&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;socket  为地址定义了通用的数据结构 sockaddr, 也就是 sockaddr_in 等结构应该看作是 sockaddr 的子类. 在 connect 和 bind 等函数中的参数都是 sockaddr* 以及实际数据类型的 size.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;使用 UDP socket&lt;/h1&gt;
&lt;p&gt;相比来说, UDP 就非常简单了, 相对于 TCP 在 IP 层之上提供个各种服务, UDP 只添加了两项, 端口号和校验, 而且只是简单地把校验出错的包丢掉.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 03:28:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/ji-chu-socket-bian-cheng.html</guid><category>C 语言</category><category>编程语言</category><category>计算机</category><category>网络</category></item><item><title>如何让安卓手机插上电源自动开机</title><link>/posts/ru-he-rang-an-zhuo-shou-ji-cha-shang-dian-yuan-zi-dong-kai-ji.html</link><description>&lt;p&gt;非常简单的原理，把充电电池动画文件替换成重启命令。&lt;/p&gt;
&lt;p&gt;比如说，对于红米 Note2，这个文件是 &lt;code&gt;/system/bin/kpoc_charger&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;替换成如下文件&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/system/bin/sh&lt;/span&gt;
/system/bin/reboot
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;然后 &lt;code&gt;chmod +x /system/bin/kpoc_charger&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;http://developwear.com/blog/2014/07/03/autobootstart-android-when-charger-is-connected/&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 03:10:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/ru-he-rang-an-zhuo-shou-ji-cha-shang-dian-yuan-zi-dong-kai-ji.html</guid><category>大前端</category><category>Android</category><category>计算机</category></item><item><title>python random library</title><link>/posts/python-random-library.html</link><description>&lt;h2&gt;Basic Usage&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;random.randrange(start, stop, step)
random.randint(a, b)
random.random()

random.choice(seq)
random.shuffle(seq)
random.sample(seq, k)
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 03:09:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/python-random-library.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>Python pip 极简教程</title><link>/posts/python-pip-ji-jian-jiao-cheng.html</link><description>&lt;p&gt;让 pip 使用国内的源&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;阿里云 https://mirrors.aliyun.com/pypi/simple/ &lt;/li&gt;
&lt;li&gt;中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/ &lt;/li&gt;
&lt;li&gt;豆瓣 http://pypi.douban.com/simple/
&lt;em&gt; 清华大学 https://pypi.tuna.tsinghua.edu.cn/simple/ 
&lt;/em&gt; 中国科学技术大学 http://pypi.mirrors.ustc.edu.cn/simple/&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install scrapy -i https://pypi.tuna.tsinghua.edu.cn/simple/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改 ~/.pip/pip.conf (没有就创建一个)， 内容如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[global]&lt;/span&gt;
&lt;span class="na"&gt;https://pypi.tuna.tsinghua.edu.cn/simple/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之前的 pip 教程&lt;/p&gt;
&lt;h2&gt;installing packages&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pip install &amp;lt;package-name&amp;gt;==&amp;lt;version&amp;gt;&lt;/code&gt;, version is optional&lt;/p&gt;
&lt;p&gt;To install a package from git repository:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip install -e git+REPO&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;pip currently supports cloning over git, git+https and git+ssh:&lt;/p&gt;
&lt;p&gt;Here are the supported forms:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[-e] git+git://git.myproject.org/MyProject#egg=MyProject
[-e] git+https://git.myproject.org/MyProject#egg=MyProject
[-e] git+ssh://git.myproject.org/MyProject#egg=MyProject  # for private repo, you can only use this
[-e] git+git@git.myproject.org:MyProject#egg=MyProject

Passing branch names, a commit hash or a tag name is possible like so:
[-e] git://git.myproject.org/MyProject.git@master#egg=MyProject
[-e] git://git.myproject.org/MyProject.git@v1.0#egg=MyProject
[-e] git://git.myproject.org/MyProject.git@da39a3ee5e6b4b0d3255bfef95601890afd80709#egg=MyProject
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;if you add the &lt;code&gt;-e&lt;/code&gt;(editable) option, then you can save the version info in freeze, which is exactly what you need.&lt;/p&gt;
&lt;h2&gt;upgrade a package:&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install package-name --upgrade
pip install xxx -U
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;忽略缓存&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install --on-cache-dir xxx
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;requirements file&lt;/h2&gt;
&lt;p&gt;save current dependencies to a requirement file:&lt;/p&gt;
&lt;p&gt;pip freeze &amp;gt; requirements.txt&lt;/p&gt;
&lt;p&gt;install from a requirement file&lt;/p&gt;
&lt;p&gt;pip install -r requirements.txt&lt;/p&gt;
&lt;p&gt;http://crazygit.wiseturtles.com/2018/01/08/pipenv-tour/&lt;/p&gt;
&lt;h1&gt;卸载的时候删除所有依赖&lt;/h1&gt;
&lt;p&gt;可以使用 pip-autoremove 包&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install pip-autoremove
pip-autoremove requrests -y  # requests 有严重的内存泄露，而且代码非常不优雅，强烈建议不要使用。
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;新工具 pipenv&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;pipenv 太垃圾了，吹得很牛逼，结果基本不能用。不知道为啥不使用官方的 venv，而要使用 virtualenv，简直脑残。后面的教程请忽略。&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-&amp;gt; % cd repos/crawler
yifei@Yifeis-MacBook [07:14:07] [~/repos/crawler]
-&amp;gt; % pipenv --python 3
Creating a virtualenv for this project…
Using /usr/local/bin/python3 (3.6.5) to create virtualenv…
⠋Running virtualenv with interpreter /usr/local/bin/python3
Using base prefix &amp;#39;/usr/local/Cellar/python/3.6.5/Frameworks/Python.framework/Versions/3.6&amp;#39;
New python executable in /Users/yifei/repos/.venv/bin/python3.6
Also creating executable in /Users/yifei/repos/.venv/bin/python
Installing setuptools, pip, wheel...done.

Virtualenv location: /Users/yifei/repos/.venv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;相关的 issue：https://github.com/pypa/pipenv/issues/70&lt;/p&gt;
&lt;p&gt;原文：&lt;/p&gt;
&lt;p&gt;pip 是一个简单的 python 的包管理工具，相比于 node 的npm 或者 rust 的cargo 来说，功能非常弱，不过python官方已经出了一个新的工具——pipenv，终于跟上了时代。&lt;/p&gt;
&lt;p&gt;pipenv 结合了之前 pip 和 venv/virtualenv 的功能，不再使用 requirements.txt 来管理。&lt;/p&gt;
&lt;h1&gt;安装&lt;/h1&gt;
&lt;p&gt;直接全局安装，不要在 venv 中安装。建议使用 python3 的 pip 安装。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip(3) install pipenv
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;使用&lt;/h1&gt;
&lt;h2&gt;创建虚拟环境&lt;/h2&gt;
&lt;p&gt;如果当前目录没有虚拟环境，pipenv会在运行 pipenv install 的时候自动创建一个，不过也可以手工创建。首先设定环境变量 PIPENV_VENV_IN_PROJECT，这样pipenv 就会在当前目录下的.venv 目录创建虚拟环境，而不是在系统的某个目录中统一创建。可以参考&lt;a href="https://github.com/pypa/pipenv/issues/259"&gt;这里&lt;/a&gt;。使用 --python 参数可以指定创建的虚拟环境的版本，比如 2、3、3.5 等等。当然得是你系统中已经安装的版本。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-&amp;gt; % pwd
~/repos/test/

-&amp;gt; % export $PIPENV_VENV_IN_PROJECT=1

-&amp;gt; % pipenv --python 3

Creating a virtualenv for this project…
Using /usr/local/bin/python3 (3.6.5) to create virtualenv…
⠋Running virtualenv with interpreter /usr/local/bin/python3
Using base prefix &amp;#39;/usr/local/Cellar/python/3.6.5/Frameworks/Python.framework/Versions/3.6&amp;#39;
New python executable in /Users/yifei/repos/test/.venv/bin/python3.6
Also creating executable in /Users/yifei/repos/test/.venv/bin/python
Installing setuptools, pip, wheel...done.

Virtualenv location: /Users/yifei/repos/test/.venv
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;安装库&lt;/h2&gt;
&lt;p&gt;安装库可以使用 == 指定版本信息，当然也可以不指定。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv install requests==2.13.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或者直接使用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;pipenv 会直接从 requirements.txt 或者 Pipfile 中安装包。或者使用&lt;code&gt;-r&lt;/code&gt;手工指定之前的 requirements.txt 的位置。&lt;/p&gt;
&lt;p&gt;需要注意的是，pivenv install 会直接修改 Pipfile，而&lt;em&gt;不需要&lt;/em&gt;加&lt;code&gt;--save&lt;/code&gt;参数。&lt;/p&gt;
&lt;h2&gt;锁定&lt;/h2&gt;
&lt;p&gt;使用 pipenv lock 可以生成当前安装的版本的锁定文件 Pipfile.lock。&lt;/p&gt;
&lt;h2&gt;运行&lt;/h2&gt;
&lt;p&gt;当运行脚本的时候直接使用 &lt;code&gt;pipenv run python main.py&lt;/code&gt; 就可以避免手工启用 venv 了。&lt;/p&gt;
&lt;p&gt;如果配置了 .env 文件，pipenv run 的时候也会加载里面的环境变量。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 03:04:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/python-pip-ji-jian-jiao-cheng.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>Python 中的异常总结</title><link>/posts/python-zhong-de-yi-chang-zong-jie.html</link><description>&lt;h2&gt;User defined class&lt;/h2&gt;
&lt;p&gt;for user defined exceptions, just subclass Exception&lt;/p&gt;
&lt;h2&gt;Catching Exceptions&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;except Exception as e: # SystemExit, KeyboardInterrupt, GeneratorExit is not captured
    log(&amp;#39;Reason&amp;#39;, e)    # the baseline is to record
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;容易抛出异常的地方&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;网络读取，requests.get&lt;/li&gt;
&lt;li&gt;调用其他命令超时，subprocess.call&lt;/li&gt;
&lt;li&gt;读取他人的数据，IndexError&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;容易阻塞的地方&lt;/h3&gt;
&lt;p&gt;网络&lt;/p&gt;
&lt;h2&gt;内置的异常树&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;BaseException
 +-- SystemExit
 +-- *KeyboardInterrupt*
 +-- GeneratorExit
 +-- Exception
      +-- *StopIteration*
      +-- *StandardError*
      |    +-- BufferError
      |    +-- *ArithmeticError*
      |    |    +-- FloatingPointError
      |    |    +-- OverflowError
      |    |    +-- ZeroDivisionError
      |    +-- AssertionError
      |    +-- AttributeError
      |    +-- EnvironmentError
      |    |    +-- *IOError*
      |    |    +-- OSError
      |    |         +-- WindowsError (Windows)
      |    |         +-- VMSError (VMS)
      |    +-- EOFError
      |    +-- *ImportError*
      |    +-- *LookupError*
      |    |    +-- IndexError
      |    |    +-- KeyError
      |    +-- MemoryError
      |    +-- *NameError*
      |    |    +-- UnboundLocalError
      |    +-- ReferenceError
      |    +-- RuntimeError
      |    |    +-- NotImplementedError
      |    +-- *SyntaxError*
      |    |    +-- IndentationError
      |    |         +-- TabError
      |    +-- SystemError
      |    +-- *TypeError*
      |    +-- *ValueError*
      |         +-- UnicodeError
      |              +-- UnicodeDecodeError
      |              +-- UnicodeEncodeError
      |              +-- UnicodeTranslateError
      +-- *Warning*
           +-- DeprecationWarning
           +-- PendingDeprecationWarning
           +-- RuntimeWarning
           +-- SyntaxWarning
           +-- UserWarning
           +-- FutureWarning
       +-- ImportWarning
       +-- UnicodeWarning
       +-- BytesWarning
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 03:01:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/python-zhong-de-yi-chang-zong-jie.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>如何让技术博客有更多流量</title><link>/posts/ru-he-rang-ji-zhu-bo-ke-you-geng-duo-liu-liang.html</link><description>&lt;p&gt;always have SEO in your mind when choosing what words to use&lt;/p&gt;
&lt;p&gt;分析 Why kotlin is better than whatever language you are using&lt;/p&gt;
&lt;p&gt;第一行，我就是标题党，解释了标题
描述了 java
描述了 第一印象
一些见解
安卓
总结&lt;/p&gt;
&lt;p&gt;投放自己文章的渠道：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开发者头条：由于截图的时候没有新发文章，之前那篇秒杀架构实践发了之后博客 80% 的流量都是从头条过来的，而且质量很高，不得不点个赞。&lt;/li&gt;
&lt;li&gt;并发编程网: 并发编程网是由阿里大牛清英(买了那本《并发编程的艺术》就被圈粉了)创办的，其中的文章质量普遍较高(导致也会有一点写作门槛)。由于网站的流量也比较高，只要你的文章质量不错肯定会得到好处。&lt;/li&gt;
&lt;li&gt;掘金：掘金这两年也比较火，是专门做开发者内容的，也是网站流量不错。&lt;/li&gt;
&lt;li&gt;开源中国：开源中国的博客也不错，自己也有代码托管，但我还是更喜欢用 GitHub，一般上了编辑推荐都会有不错的访问量。&lt;/li&gt;
&lt;li&gt;V2EX：大名鼎鼎的 V 站，其实受众较少，正因为如此也形成了独有的文化，因此也是我每天比逛(摸鱼)的网站，由于受众大多是开发者所以也能得到很多有用的反馈。&lt;/li&gt;
&lt;li&gt;大佬推荐：最快捷的方式其实就是口口相传，其中当然是大佬的效率最高。之前有个纯洁的微笑、程序猿DD 都投过稿，也能带来不错的流量。&lt;/li&gt;
&lt;li&gt;简书:本来不想推荐简书的（之前的事件以及现在鸡汤太多），但是流量还可以，现在就纯粹当做博客备份的工具了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;引流&lt;/h1&gt;
&lt;h2&gt;简书&lt;/h2&gt;
&lt;p&gt;简书上一些低端的教程似乎在google的结果中能够排得比较靠前的位置，比如&lt;a href="http://www.jianshu.com/p/ecf3a88d9ae1"&gt;这篇&lt;/a&gt;，简单的利用scrapy爬取链家数据的文章，类似的文章还有很多。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 02:44:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/ru-he-rang-ji-zhu-bo-ke-you-geng-duo-liu-liang.html</guid><category>创业</category><category>运营与产品</category></item><item><title>steal money by payed phones</title><link>/posts/steal-money-by-payed-phones.html</link><description>&lt;p&gt;https://www.arneswinnen.net/2016/07/how-i-could-steal-money-from-instagram-google-and-microsoft/&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 02:42:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/steal-money-by-payed-phones.html</guid><category>他山之石</category><category>创业</category></item><item><title>HTTP 缓存介绍</title><link>/posts/http-huan-cun-jie-shao.html</link><description>&lt;p&gt;和缓存相关的 header 共有如下几种&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Pragma&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Cache-Control&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Expires&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Last-Modified&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Etag&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;If-Modified-Since&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;If-Non-Match&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Expires 由服务器返回，用于指定当前页面过期时间，使用绝对时间表示。&lt;/p&gt;
&lt;p&gt;Cache-Control 指定了相对过期的时间，由当前时间多久后过期的秒数表示。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Cache-Control: max-age=86400
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Last-Modified 是由服务器给出了文档的过期时间，当第二次请求该文档的时候，浏览器可以使用 If-Modified-Since 头部指定该过期时间，如果文档还没有过期，那么服务器应该返回 304，否则返回 200 和新文档。&lt;/p&gt;
&lt;p&gt;Etag 是由服务器给出的文档的哈希值，当第二次请求该文档的时候，浏览器可以使用 If-None-Match 头部指定该哈希值，如果文档没有变动，那么服务器应该返回 304，如果有变动，那么哈希值也变了，应该返回 200 和新文档。&lt;/p&gt;
&lt;p&gt;可以看出 Etag 相比 Last-Modified 更准确一些，所以两个头部都有的前提下，应该是 Etag 优先。&lt;/p&gt;
&lt;p&gt;实际使用中，为了兼容性考虑，应该把这几种头部都结合起来使用。&lt;/p&gt;
&lt;p&gt;see: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;https://www.mnot.net/cache_docs/&lt;/li&gt;
&lt;li&gt;http://stackoverflow.com/questions/499966/etag-vs-header-expires&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 02:37:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/http-huan-cun-jie-shao.html</guid><category>HTTP</category><category>计算机</category><category>网络</category></item><item><title>理解程序的执行过程</title><link>/posts/li-jie-cheng-xu-de-zhi-xing-guo-cheng.html</link><description>&lt;p&gt;想象一个函数是一个流水线，每一个函数调用都是在当前函数旁边新开了一个流水线。&lt;/p&gt;
&lt;p&gt;新的调用是从调用者分出的一条叉，所有的调用构成了一个从左向右的栈。&lt;/p&gt;
&lt;p&gt;把每个循环想象成一个并行执行的流水线&lt;/p&gt;
&lt;p&gt;把每一个 if/case 语句想象为一个流水线的一个分叉点，当然两条叉可能最后会聚合。&lt;/p&gt;
&lt;p&gt;把一个类当做相关的动作和分享同一个状态的一个集合&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://ww2.sinaimg.cn/large/006tNbRwgy1fg35hmla6ij30j9087t94.jpg"&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 01:49:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/li-jie-cheng-xu-de-zhi-xing-guo-cheng.html</guid><category>想法</category><category>计算机</category></item><item><title>Python 中的序列化库</title><link>/posts/python-zhong-de-xu-lie-hua-ku.html</link><description>&lt;h2&gt;basic usage&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pickle.dumps(obj)  # dumps a object to a bytes, not binary safe
pickle.loads(bytes)  # loads a object from a bytes.
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;tricks&lt;/h2&gt;
&lt;p&gt;pickling dict is stable&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;In [5]: pickle.dumps({&amp;#39;a&amp;#39;: &amp;#39;b&amp;#39;, &amp;#39;1&amp;#39;: &amp;#39;2&amp;#39;})
Out[5]: b&amp;#39;\x80\x03}q\x00(X\x01\x00\x00\x001q\x01X\x01\x00\x00\x002q\x02X\x01\x00\x00\x00aq\x03X\x01\x00\x00\x00bq\x04u.&amp;#39;

In [6]: pickle.dumps({&amp;#39;1&amp;#39;: &amp;#39;2&amp;#39;, &amp;#39;a&amp;#39;: &amp;#39;b&amp;#39;})
Out[6]: b&amp;#39;\x80\x03}q\x00(X\x01\x00\x00\x001q\x01X\x01\x00\x00\x002q\x02X\x01\x00\x00\x00aq\x03X\x01\x00\x00\x00bq\x04u.&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;json&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;json.dumps(dict,
    sort_keys=True,  # keys will be in order
)
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 01:47:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/python-zhong-de-xu-lie-hua-ku.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>Python 中的 bytesio/stringio</title><link>/posts/python-zhong-de-bytesiostringio.html</link><description>&lt;p&gt;Python 中的io 包提供了 BytesIO 和 StringIO，分别可以把一个对象作为一个内存中的二进制文件和文本文件，除了文件的read/write/readline等操作外，支持 getvalue 操作。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BytesIO&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 二进制文件只能写 b&amp;#39;xxx&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getvalue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 01:46:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/python-zhong-de-bytesiostringio.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>命令行压缩图片的工具</title><link>/posts/ming-ling-xing-ya-suo-tu-pian-de-gong-ju.html</link><description>&lt;p&gt;加载速度对于网页的体验还是很重要的, 而每个页面比较耗费带宽的资源就是图片了, 所以在页面发布后对图像做适当的压缩是很有必要的.&lt;/p&gt;
&lt;p&gt;常用的图片格式基本有三种: jpg, png 和 gif, 分别有不同的压缩工具&lt;/p&gt;
&lt;p&gt;JPG 压缩建议使用 jpegoptim, 实测压缩比在40%左右, 最常用的语法是&lt;/p&gt;
&lt;p&gt;&lt;code&gt;jpegoptim -p -m&amp;lt;dd&amp;gt;  &amp;lt;imagefile&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其中 -p 是保留 mtime 的意思, 也可以用 --perserve, -m 后面跟两个数字表示, 压缩的比例, 一般用90即可, 肉眼无法分辨, 且能够压缩掉40%左右&lt;/p&gt;
&lt;p&gt;png 压缩有两个选项, 常规的 optipng 和另一个新一点 pngquant, 测试了一下, 发现 optipng 速度慢而且压缩效率低, pngquant 则表现相当优秀, 但是需要注意 pngquant 是有损压缩.&lt;/p&gt;
&lt;p&gt;pngquant 的用法也简单粗暴, 直接 pngquant &lt;filename&gt; 就好了, 如果嫌压缩不够可以使用 pngquant &lt;numColors&gt; &lt;filename&gt;. 指定一个较少的色彩数.&lt;/p&gt;
&lt;p&gt;gif 图像的压缩可以使用gifsicle&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gifsicle -O2 old.gif -o new.gif&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;另外需要注意的是, jpegoptim 默认覆盖原图像, pngquant 会生成新的图像, gifsicle 需要制定新图像的名字.&lt;/p&gt;
&lt;p&gt;如果需要对一个目录下的所有文件都进行优化, 可以配合 find 命令使用, 比如&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find . -name &amp;quot;*.jpg&amp;quot; -exec jpegoptim {} -m90 -p
find . -name &amp;quot;*.png&amp;quot; -exec pngquant {}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过以上命令就可以把降低一些图片的体积&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 01:42:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/ming-ling-xing-ya-suo-tu-pian-de-gong-ju.html</guid><category>命令行</category><category>后端</category><category>计算机</category></item><item><title>converting mp4 to gif</title><link>/posts/converting-mp4-to-gif.html</link><description>&lt;h2&gt;Converting MP4 to gif&lt;/h2&gt;
&lt;p&gt;To convert the entire video to GIF, use the following command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ffmpeg -i small.mp4 small.gif&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To convert just a portion of a video clip to GIF, use the following command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ffmpeg -t 3 -ss 00:00:02 -i small.webm small-clip.gif&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The snippet above directs ffmpeg to create a GIF 3 seconds long starting at 2 seconds into the video.
The default conversion doesn't appear to be high quality, so you can configure the bitrate via another parameter:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ffmpeg -i small.mp4 -b 2048k small.gif&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Convert GIF to Video&lt;/h2&gt;
&lt;p&gt;The command is quite simple:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ffmpeg -f gif -i animation.gif animation.mp4&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can use this same command format to convert to other video formats:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ffmpeg -f gif -i animation.gif animation.mpeg
ffmpeg -f gif -i animation.gif animation.webm
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ffmpeg and ImageMagick are awesome media utilities which you should take some time to check out if you have any questions about how to get something done!&lt;/p&gt;
&lt;h2&gt;optimize&lt;/h2&gt;
&lt;p&gt;gifsicle to scale down the image to a smaller size&lt;/p&gt;
&lt;p&gt;I used &lt;code&gt;ffmpeg -i foo.mp4 -r 5 -vf scale=270:-1 foo.gif&lt;/code&gt; , where -r 5 cuts it to 5 frames per second, and &lt;code&gt;-vf scale=270:-1&lt;/code&gt; scales the output to a width of 270 pixels and a height that matches the aspect ratio.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 01:40:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/converting-mp4-to-gif.html</guid><category>命令行</category><category>后端</category><category>计算机</category></item><item><title>profitable side projects on HN</title><link>/posts/profitable-side-projects-on-hn.html</link><description>&lt;h2&gt;Udemy&lt;/h2&gt;
&lt;p&gt;I made a course on Udemy on how to make complete web applications without writing code using APEX.
Link and free coupons:
https://www.udemy.com/create-web-apps-with-apex-5/?couponCod...&lt;/p&gt;
&lt;p&gt;Expenses:
$100 for a nice microphone (not necessary) but didn't want to record a bunch and have it be garbage $100 for Screenflow (to do video editing). 20 hours time (split across a couple of weekends&lt;/p&gt;
&lt;p&gt;Profit:
I've made $1405 on it so far. It is almost completely passive income.&lt;/p&gt;
&lt;p&gt;Proof:
http://i.imgur.com/sexsrzK.png?1&lt;/p&gt;
&lt;p&gt;If you know any of the topics in the Hot Topics list and can do desktop recording, maybe you should think about teaching others and making some side money while doing it. Best of all, the Udemy community is awesome. They are very supportive of each other.&lt;/p&gt;
&lt;p&gt;https://teach.udemy.com/course-creation/hot-topic-courses/&lt;/p&gt;
&lt;h2&gt;Ebay crawler&lt;/h2&gt;
&lt;p&gt;A year. I was spending way too much time on eBay, so I wrote something for myself that would scrape the web pages and use a kill list to filter out the junk. I wanted a better UI to add words to the kill list and realised I could make money via the eBay affiliate program.&lt;/p&gt;
&lt;p&gt;So I took two months off between contracts and wrote the first version of AuctionSieve - http://auctionsieve.com&lt;/p&gt;
&lt;p&gt;There was a D&amp;amp;D forum, the Acaeum where a bunch of people started using it and giving feedback.
It was making me money from day 1 but it probably took about a year to repay that 2 months of time investment.&lt;/p&gt;
&lt;p&gt;It's now been 13 years(!) and it still makes me money - not enough to live off (the payout calculations from eBay have changed several times) but a nice chunk of change. And I only have to occasionally prod it. And add the occasional new feature.&lt;/p&gt;
&lt;h2&gt;Inovices&lt;/h2&gt;
&lt;p&gt;I've worked over a year on https://www.boxfactura.com/ which is a special email service for invoices in Mexico.&lt;/p&gt;
&lt;p&gt;It has been profitable since January after quite some legwork, on the technical side as well as the sales and persuation side. &lt;/p&gt;
&lt;p&gt;reply by emilioolivares 1 day ago &lt;/p&gt;
&lt;p&gt;Hey man, I'm also from Mexico but currently live in NY. This is pretty awesome. How did you manage to get traction with small businesses? Would love to chat if you have time, my email is emilioolivares, I use Google email. &lt;/p&gt;
&lt;p&gt;reply by rsoto 1 day ago &lt;/p&gt;
&lt;p&gt;Hey, Emilio!
Sure, I'll send you an email, however, I'd like to keep the answer to your question on the public side, if you don't mind.
It has been quite a ride to get traction, mostly the first clients signed up after talking to them about their issues with their invoices and expenses--once they're interested, we begin the education process. The other sources are a mix of everything. One of our services is a platform in which our client's vendors can upload invoices so they can manage them. We get some information on several businesses, both small and big so we can begin to offer our solution. This particular product might be the best source for viral growth, as one client can introduce 10 or 20 new users on our platform.
We also have a relatively successful side project on a related field [1], which has several hundred hits daily. There's an ad there, there might be some optimization on both the ad and the landing, but we're still trying to figure that out. Finally, our focus has been towards explaining the product, as there's nothing like it on the market (actually there are, but they're small and having the same difficulties we have). Once they sign up, our onboarding process is focused on one point: send your first invoice. As we saw many of the new signups not completing this step (or the previous 2), we set up an email communication strategy for each one of the steps, with our contact information in each email. I've blogged a bit [2] about it.&lt;/p&gt;
&lt;p&gt;Now that we're sure our product is helpful for the businesses, we just started promoting heavily with a sales force.&lt;/p&gt;
&lt;p&gt;I hope that answered your question!&lt;/p&gt;
&lt;p&gt;1: http://isrmatic.com/
2: http://www.therror.com/weblog/2016/mar/como_el_email_marketi...&lt;/p&gt;
&lt;h2&gt;Ghost themes&lt;/h2&gt;
&lt;p&gt;http://www.gtheme.io/
I run GTheme.io for 2 years and now ramen profitable. Current site running with minimal management.
The site selling premium ghost.org theme.&lt;/p&gt;
&lt;p&gt;From &lt;a href="https://news.ycombinator.com/item?id=11898992"&gt;https://news.ycombinator.com/item?id=11898992&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 30 May 2017 01:19:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-30:/posts/profitable-side-projects-on-hn.html</guid><category>他山之石</category><category>创业</category></item><item><title>Crontab 的语法和使用</title><link>/posts/crontab-de-yu-fa-he-shi-yong.html</link><description>&lt;p&gt;Crontab 时间的语法:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Minute Hour Day Month DoW
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;每一个选项默认都是第几的意思&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Minute, 每小时的第几分, 可选值 0-59&lt;/li&gt;
&lt;li&gt;Hour, 每天的第几个小时, 可选值 0-23&lt;/li&gt;
&lt;li&gt;Day, 每月的第几天, 可选值 1-31&lt;/li&gt;
&lt;li&gt;Month, 每年的第几个月, 可选值 1-12&lt;/li&gt;
&lt;li&gt;DoW, 每周的第几天, 可选值 0-7, 0 和 7 都代表 Sunday&lt;/li&gt;
&lt;li&gt;Command, 要执行的命令&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用 * 表示所有&lt;/li&gt;
&lt;li&gt;可以用逗号分隔指定多个&lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;*/xx&lt;/code&gt; 表示每 xx 一次&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;5 * * * * echo &amp;quot;hello world&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;每小时的第五分钟打印 hello world&lt;/p&gt;
&lt;p&gt;更多地例子&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;* * * * *   每分钟
12 * * * *  每小时第 12 分
0,15,30,45 * * * * 每小时的第 0, 15, 30, 45 分, 也就是每15分钟一次
0 4 * * *   每天的凌晨 4 点
0 4 * * 2   每周二的凌晨 4 点
*/4 2-6 * * *   2点和6点之间每 4 分钟一次, 也就是 0, 4, 8...
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;crontab 命令&lt;/h1&gt;
&lt;p&gt;应该使用 crontab 命令来编辑 crontab 文件, tab 就是 table 的缩写&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;crontab -e # 编辑 crontab
crontab -l # 列出 crontab
crontab -u # 指定用户
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;crontab 还支持一些特殊语法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@hourly 相当于 0 * * * * 也就是每小时执行
@daily  相当于 0 0 * * * 也就是每天执行
@weekly 相当于 0 0 0 0 0
monthly
@yearly
@reboot at reboot
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;NOTE:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# add these line to tweak cron behavior
SHELL=/bin/bash
HOME=/
MAILTO=&amp;quot;example@digitalocean.com&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Cron 表达式的局限性&lt;/h1&gt;
&lt;p&gt;cron 表达式难以表达 "every x" 这个语义。比如说每隔 9 个小时如何， 每隔 13 分钟如何如何。&lt;/p&gt;
&lt;h1&gt;cron 的实现&lt;/h1&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 29 May 2017 15:41:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-29:/posts/crontab-de-yu-fa-he-shi-yong.html</guid><category>后端</category><category>计算机</category></item><item><title>C/C++ 中的 RAII</title><link>/posts/cc-zhong-de-raii.html</link><description>&lt;h1&gt;RAII 的好处&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;异常安全&lt;/li&gt;
&lt;li&gt;保证匹配&lt;/li&gt;
&lt;li&gt;防止内存泄露&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;RAII in C&lt;/h1&gt;
&lt;p&gt;This is inherent implementation dependent, since the Standard doesn't include such a possibility. For GCC, the cleanup attribute runs a function when a variable goes out of scope:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;scoped&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;pvariable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;variable (%d) goes out of scope&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pvariable&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;before scope&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;watched&lt;/span&gt; &lt;span class="n"&gt;__attribute__&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;cleanup&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scoped&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
        &lt;span class="n"&gt;watched&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;after scope&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Prints:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;before scope
variable (42) goes out of scope
after scope
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 29 May 2017 15:36:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-29:/posts/cc-zhong-de-raii.html</guid><category>C 语言</category><category>编程语言</category><category>计算机</category></item><item><title>reading Calculas With Python</title><link>/posts/reading-calculas-with-python.html</link><description>&lt;p&gt;https://github.com/ryancheunggit/Calculus-with-Python&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 29 May 2017 15:30:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-29:/posts/reading-calculas-with-python.html</guid><category>数学</category></item><item><title>学习 greasemonkey 教程</title><link>/posts/xue-xi-greasemonkey-jiao-cheng.html</link><description>&lt;p&gt;GreaseMonkey/TamperMonkey 学习&lt;/p&gt;
&lt;h1&gt;头部命令&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;@name | 脚本名字| &lt;/li&gt;
&lt;li&gt;@namespace|命名空间|  &lt;/li&gt;
&lt;li&gt;@version| 版本| &lt;/li&gt;
&lt;li&gt;@author|作者|       &lt;/li&gt;
&lt;li&gt;@description      &lt;/li&gt;
&lt;li&gt;@homepage     &lt;/li&gt;
&lt;li&gt;@icon     &lt;/li&gt;
&lt;li&gt;@updateURL        &lt;/li&gt;
&lt;li&gt;@downloadURL      &lt;/li&gt;
&lt;li&gt;@include      &lt;/li&gt;
&lt;li&gt;@exclude      &lt;/li&gt;
&lt;li&gt;@resource key url     &lt;/li&gt;
&lt;li&gt;@require  include scripts &lt;/li&gt;
&lt;li&gt;@connect  reach cross origin domains  self, current domain, localhost,  or *&lt;/li&gt;
&lt;li&gt;@run-at   when to run the script  document-start/document-body/document-end/document-idle/context-menu&lt;/li&gt;
&lt;li&gt;@grant    whitelist GM_* functions    If no @grant tag is given TM guesses the scripts needs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;函数&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;GM_addStyle(css)        
GM_get/set/deleteValue      
GM_listValues()     
GM_getResourceText(name)        
GM_getResourceURL(name) get base64 encoded urI  
GM_openInTab(url)       
GM_getTab(cb)   Get a object that is persistent as long as this tab is open.    
GM_getTabs(cb)  Get all tab objects as a hash to communicate with other script instances.   
GM_setClipboard(data, info) set the clipboard   


GM_xmlhttprequest can do cross domain request
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;using it in $.ajax https://gist.github.com/yifeikong/9e93cc38297cce989ffbef5587ad2f39&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 29 May 2017 15:23:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-29:/posts/xue-xi-greasemonkey-jiao-cheng.html</guid><category>大前端</category><category>浏览器扩展</category><category>计算机</category></item><item><title>kNN algorithm</title><link>/posts/knn-algorithm.html</link><description>&lt;p&gt;kNN是一个有监督的分类算法，目的是把给定的数据的类型确定出来。具体做法是通过把给定数据与已知训练集中的数据之间计算距离（欧氏距离，曼哈顿距离。。。）来找出距离给定数据 X 最近的 k 个数据，然后取这 k 个数据中出现最多的分类作为 X 的分类，如果给定数据的维度是两维的话，在平面笛卡尔坐标系里表示出来就是这样的&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 29 May 2017 15:22:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-29:/posts/knn-algorithm.html</guid><category>计算机</category><category>机器学习</category></item><item><title>YAML 语言和 Python 中的使用</title><link>/posts/yaml-yu-yan-he-python-zhong-de-shi-yong.html</link><description>&lt;h2&gt;Install&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install pyyaml
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Basic Example&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;yaml&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yaml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;yaml_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# to python list or dict&lt;/span&gt;
&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yaml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;py_object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# NOTE: unlike the json module, the method here is load/dump, not loads/dumps&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Yaml&lt;/h2&gt;
&lt;p&gt;YAML uses three dashes (“---”) to separate documents within a stream. Three dots ( “...”) indicate the end of a document without starting a new one, for use in communication channels.&lt;/p&gt;
&lt;p&gt;empty string in yaml is '' or "", if you have a blank entry, it will be converted to None
you don't need to quote strings in yaml&lt;/p&gt;
&lt;p&gt;for dumping, when dumping to a file, do this&lt;/p&gt;
&lt;p&gt;with open('file.yml', 'w') as f:
    yaml.dump(data, f, default_flow_style=False, allow_unicode=True)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 29 May 2017 15:20:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-29:/posts/yaml-yu-yan-he-python-zhong-de-shi-yong.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>C语言中的 vargs</title><link>/posts/cyu-yan-zhong-de-vargs.html</link><description>&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;int max(int n, ...) {
    va_list arg_pointer;
    int result = INT_MIN;

    va_start(arg_pointer, n);
    for (int i = 0; i &amp;lt; n; i++) {
        int arg = va_arg(arg_pointer, int);
        if (arg &amp;gt; result)
            result = arg;
    }
    va_end(arg_pointer);

    return result;
}     
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;http://www.cnblogs.com/chinazhangjie/archive/2012/08/18/2645475.html&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;http://wiki.jikexueyuan.com/project/c-advance/other.html&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 29 May 2017 15:02:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-29:/posts/cyu-yan-zhong-de-vargs.html</guid><category>C 语言</category><category>编程语言</category><category>计算机</category></item><item><title>get and change android device id</title><link>/posts/get-and-change-android-device-id.html</link><description>&lt;h2&gt;get device id&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;String id = Secure.getString(getContentResolver(), Secure.ANDROID_ID);&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;set device id&lt;/h2&gt;
&lt;p&gt;As far as Settings.Secure.ANDROID_ID goes, this should do the trick:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;adb shell sqlite3 /data/data/com.android.providers.settings/databases/settings.db "UPDATE secure SET value='newid' WHERE name='android_id'"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Where newid is usually the 16 hex digit code (i.e. don't append "Android_" to it).
I only tried this on the emulator. I imagine a real phone would need to be rooted first.&lt;/p&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;http://stackoverflow.com/questions/4686263/change-the-device-id-on-an-android-emulator&lt;/li&gt;
&lt;li&gt;http://stacktips.com/tutorials/android/get-device-id-example-in-android&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 29 May 2017 14:48:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-29:/posts/get-and-change-android-device-id.html</guid><category>大前端</category><category>Android</category><category>计算机</category></item><item><title>Image Hashing with Python</title><link>/posts/image-hashing-with-python.html</link><description>&lt;h2&gt;dhash&lt;/h2&gt;
&lt;p&gt;http://www.hackerfactor.com/blog/index.php?/archives/529-Kind-of-Like-That.html
http://blog.iconfinder.com/detecting-duplicate-images-using-python/&lt;/p&gt;
&lt;h2&gt;ahash&lt;/h2&gt;
&lt;p&gt;http://www.hackerfactor.com/blog/index.php?/archives/432-Looks-Like-It.html&lt;/p&gt;
&lt;h2&gt;phash&lt;/h2&gt;
&lt;p&gt;https://zh.wikipedia.org/wiki/%E7%A6%BB%E6%95%A3%E4%BD%99%E5%BC%A6%E5%8F%98%E6%8D%A2&lt;/p&gt;
&lt;h2&gt;Python Implementaion(too redundant)&lt;/h2&gt;
&lt;p&gt;https://github.com/JohannesBuchner/imagehash&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 29 May 2017 14:44:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-29:/posts/image-hashing-with-python.html</guid><category>计算机</category><category>爬虫</category></item><item><title>读 Web Scraping with Python</title><link>/posts/du-web-scraping-with-python.html</link><description>&lt;h1&gt;Chapter I Introduction&lt;/h1&gt;
&lt;h2&gt;为什么要写爬虫？&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;每个网站都应该提供 API，然而这是不可能的&lt;/li&gt;
&lt;li&gt;即使提供了 API，往往也会限速，不如自己找接口&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意已知条件（robots.txt 和 sitemap.xml）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;robots.txt 中可能会有陷阱&lt;/li&gt;
&lt;li&gt;sitemap 中可能提供了重要的链接&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;估算网站的大小&lt;/h2&gt;
&lt;p&gt;一个简便方法是使用 site:example.com 查询，然而这种方法对于大站不适用&lt;/p&gt;
&lt;h2&gt;识别网站所使用的技术&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;builtwith 模块&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install builtwith
builtwith.parse(url) # returns a dict
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;python-whois 模块&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;whois&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;whois&lt;/span&gt;
&lt;span class="n"&gt;whois&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;whois&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;下载器&lt;/h2&gt;
&lt;p&gt;下载器需要提供的几个功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;错误重试，仅当返回的错误为500的时候重试，一般400错误可认为不可恢复的网页&lt;/li&gt;
&lt;li&gt;伪装 UA&lt;/li&gt;
&lt;li&gt;策略
    a. 爬取站点地图 sitemap
    b. 通过 ID 遍历爬取
        i. ID 可能不是连续的，比如某条记录被删除了
        ii. ID 访问失效 n 次以后可以认为遍历完全了&lt;/li&gt;
&lt;li&gt;相对连接转化，这点可以利用 lxml 的 make_link_absolute 函数&lt;/li&gt;
&lt;li&gt;处理 robots.txt 可以利用标准库的 robotsparser 模块&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;robotsparser&lt;/span&gt;
&lt;span class="n"&gt;rp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;robotparser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RobotFileParser&lt;/span&gt;
&lt;span class="n"&gt;rp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path_to_robots.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;rp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;rp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;can_fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;UA&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;支持代理&lt;/li&gt;
&lt;li&gt;下载限速，粒度应该精确到每一个站点比较好&lt;/li&gt;
&lt;li&gt;避免爬虫陷阱，尤其是最后一页自身引用自身的例子
   a. 记录链接深度&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;例子：https://bitbucket.org/wswp/code/src/chpter01/link_crawler3.py&lt;/p&gt;
&lt;h1&gt;Chapter II Scraping&lt;/h1&gt;
&lt;h2&gt;抽取资源的方式&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;正则
        不适用于匹配网页结构，因为网页结构中空白等都是无关紧要的，而可能破坏正则 Structural-based
        适用于数据本身符合某种模式，比如 IP 地址，比如日期等 Content-based&lt;/li&gt;
&lt;li&gt;xpath 与 CSS
        适用于匹配网页的结构信息 Strctual-based，lxml 的 CSS 选择器在内部是转换为 xpath 实现的，css 远不如 xpath 灵活&lt;/li&gt;
&lt;li&gt;BeautifulSoup，慢，从来没有在生产代码中见到过&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下载的第二步，就是把获得的网页传递给 Extractor 来提取内容，可以通过传递给下载函数回调来处理，但是这种耦合性太强了&lt;/p&gt;
&lt;h1&gt;Chapter III Downloader Cache&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;书中的缓存把所有相应都做了缓存，包括500的错误响应，实际上这样的直接不缓存好了。。&lt;/li&gt;
&lt;li&gt;书中的磁盘缓存把 url normalize 逻辑也加到了这里，感觉比较混乱&lt;/li&gt;
&lt;li&gt;注意使用磁盘文件缓存的话会受限于磁盘单目录文件的数量，即使是 ext4 文件系统也不大&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Chapter IV&lt;/h1&gt;
&lt;p&gt;执行下载时间估算也是很重要的，每个链接下载需要多长时间，整个过程需要多长时间
多线程的下载例子，手工模拟线程池&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def process_queue(q):
    pass

threads = []
while thread or crawl_queue:
    for thread in threads:
        if not threads.is_alive():            
            threads.remove(thread)
    while len(threads) &amp;lt; max_threads and crawl_queue:
        thread = threading.Thread(target=process_queue, daemon=True)
        thread.start()
        threads.append(thread)
    time.sleep(some_time)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;性能的增长与线程和进程的数量并不是成线性比例的，而是对数比例，因为切换要花费一定的时间，再者最终是受限于带宽的&lt;/p&gt;
&lt;h1&gt;Chapter V Dynamic Content&lt;/h1&gt;
&lt;h2&gt;逆向接口&lt;/h2&gt;
&lt;p&gt;依赖于 Ajax 的网站看起来更复杂，但是实际上因为数据和表现层的分离会更简单，但是如果逆向工程也不好得到通用的方法，如何构建一个辅助工具呢？表示出网页上哪些地方是动态加载的，列出 js 全局变量，列出可能的 jsonp 请求&lt;/p&gt;
&lt;p&gt;利用 Ajax 接口时，可以利用各种边界情况，比如把搜索条件置为空，置为 *，置为 .&lt;/p&gt;
&lt;h2&gt;渲染动态网页&lt;/h2&gt;
&lt;p&gt;使用Qt，使用 Selenium 或者 PhantomJS，这时附加 Cookie 等都是很严重的问题&lt;/p&gt;
&lt;h1&gt;Chapter VI Form Interaction&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;登录表单中往往会有隐藏的参数，比如 form_key 用于避免表单重复提交，还可能需要 cookie 验证&lt;/li&gt;
&lt;li&gt;Wow，竟然可以直接从浏览器加载 Cookie，使用 browsercookie 模块&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Chapter VII&lt;/h1&gt;
&lt;p&gt;使用机器识别验证码
使用 Pillow 和 pytesseract 识别验证码，但是 tesseract 本不是用来识别验证码的&lt;/p&gt;
&lt;h2&gt;一种锐化方法&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;img.convert(&amp;#39;L&amp;#39;)
img.point(lambda x: 0 if x &amp;lt; 1 else 255, &amp;#39;l&amp;#39;)
tessact.image_to_string(img)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;还可以通过限定字符集提高识别率&lt;/p&gt;
&lt;p&gt;还可以使用人工打码平台&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 29 May 2017 14:31:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-29:/posts/du-web-scraping-with-python.html</guid><category>读书笔记</category></item><item><title>为什么要写爬虫？</title><link>/posts/wei-shi-yao-yao-xie-pa-chong.html</link><description>&lt;p&gt;为什么要爬数据？&lt;/p&gt;
&lt;p&gt;To quote Wikipedia&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The key element that distinguishes data scraping from regular parsing is that the output being scraped was intended for display to and &lt;em&gt;end-user&lt;/em&gt;, rather than as input to another program, and is therefore usually &lt;em&gt;neither documented nor structured&lt;/em&gt; for convenient parsing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;爬取整站思路：使用图遍历算法&lt;/li&gt;
&lt;li&gt;爬取更新思路：找列表页，不断刷新获得更新&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如何获得列表页？
通过爬取整站，通过机器学习，查找列表页&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 29 May 2017 14:24:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-29:/posts/wei-shi-yao-yao-xie-pa-chong.html</guid><category>计算机</category><category>爬虫</category></item><item><title>Python 读写 CSV 文件</title><link>/posts/python-du-xie-csv-wen-jian.html</link><description>&lt;h2&gt;typical usage&lt;/h2&gt;
&lt;p&gt;注意dictwriter需要提供fieldnames&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;with open(&amp;#39;csvfile&amp;#39;, &amp;#39;wt&amp;#39;, newline=&amp;#39;&amp;#39;) as f:
    writer = csv.DictWriter(f, fieldnames=[], extrasaction=&amp;#39;ignore&amp;#39;)
    writer.writeheader()
    writer.writerow(d) # list of dict if writerows

with open(&amp;#39;csvfile&amp;#39;, &amp;#39;wt&amp;#39;, newline=&amp;#39;&amp;#39;) as f:
    writer = csv.writer(f)
    writer.writerow(l) # list of list if writerows

with open(&amp;#39;csvfile&amp;#39;, &amp;#39;rt&amp;#39;) as f:
    reader = csv.reader(f)
    for row in reader:
        print(row)
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 29 May 2017 14:14:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-29:/posts/python-du-xie-csv-wen-jian.html</guid><category>Python</category><category>编程语言</category><category>计算机</category></item><item><title>okhttp</title><link>/posts/okhttp.html</link><description>&lt;p&gt;Good tutorial: http://www.vogella.com/tutorials/JavaLibrary-OkHttp/article.html#creating-request-objects-for-make-network-calls&lt;/p&gt;
&lt;p&gt;注意：很多国产ROM 会限制应用的后台联网，需要把应用加入白名单&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 29 May 2017 14:08:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-29:/posts/okhttp.html</guid><category>大前端</category><category>Android</category><category>计算机</category></item><item><title>vysor.io</title><link>/posts/vysorio.html</link><description>&lt;p&gt;download from here: https://vysornuts.clockworkmod.com/download/osx, basically it's an electorn app&lt;/p&gt;
&lt;h2&gt;How it works&lt;/h2&gt;
&lt;p&gt;http://zke1ev3n.me/2016/07/02/vysor%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8AAndroid%E5%90%8C%E5%B1%8F%E6%96%B9%E6%A1%88/&lt;/p&gt;
&lt;h2&gt;How to crack it&lt;/h2&gt;
&lt;p&gt;https://carlislechan.github.io/2016/08/24/Vysor%20Pro%20%E7%A0%B4%E8%A7%A3%E6%96%B9%E6%B3%95/&lt;/p&gt;
&lt;p&gt;chrome 插件
/Users/USERNAME/Library/Application Support/Google/Chrome/Profile 1/Extensions
uglify.js&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;e() {&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;licensed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;licenseCached&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;changed to &lt;code&gt;true&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 29 May 2017 13:50:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-29:/posts/vysorio.html</guid><category>大前端</category><category>Android</category><category>计算机</category></item><item><title>安卓的文件系统</title><link>/posts/an-zhuo-de-wen-jian-xi-tong.html</link><description>&lt;p&gt;let's assume &lt;code&gt;/system&lt;/code&gt; is the rom folder&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Partition&lt;/th&gt;
&lt;th&gt;Explanation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;/boot&lt;/td&gt;
&lt;td&gt;kernel &amp;amp; Co.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/cache&lt;/td&gt;
&lt;td&gt;app cache&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/data&lt;/td&gt;
&lt;td&gt;user data partition¹&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/data/data&lt;/td&gt;
&lt;td&gt;app data¹&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/dev&lt;/td&gt;
&lt;td&gt;devices, virtual fs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/mnt/asec&lt;/td&gt;
&lt;td&gt;encrypted apps (App2SD)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/mnt/emmc&lt;/td&gt;
&lt;td&gt;internal sdcard³&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/mnt/sdcard&lt;/td&gt;
&lt;td&gt;external sdcard³&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/proc&lt;/td&gt;
&lt;td&gt;process information²&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/recovery&lt;/td&gt;
&lt;td&gt;used in recovery mode&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/system&lt;/td&gt;
&lt;td&gt;system ROM (read-only)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;code&gt;/data&lt;/code&gt; and &lt;code&gt;/data/data&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;These are in most cases two separate partitions, but there might be cases where this is handled otherwise. One thing they have in common (add /cache here as well): they get wiped on a factory-reset, while the other partitions are usually left untouched by that.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Directory&lt;/th&gt;
&lt;th&gt;Explanation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;/data/anr&lt;/td&gt;
&lt;td&gt;traces from app crashes (App Not Responding)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/data/app&lt;/td&gt;
&lt;td&gt;.apk files of apps installed by the user&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/data/backup&lt;/td&gt;
&lt;td&gt;Googles Cloud-Backup stuff&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/data/dalvik-cache&lt;/td&gt;
&lt;td&gt;optimized versions of installed apps¹&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/data/data&lt;/td&gt;
&lt;td&gt;app data²&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/data/local&lt;/td&gt;
&lt;td&gt;temporary files from e.g. Google Play³&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/data/misc&lt;/td&gt;
&lt;td&gt;system configuration (WiFi, VPN, etc.)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/data/system&lt;/td&gt;
&lt;td&gt;more system related stuff (certs, battstat)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/data/tombstones&lt;/td&gt;
&lt;td&gt;more crash stuff ("core dumps")&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/data/user&lt;/td&gt;
&lt;td&gt;multi-user support, /data/user/0 is a symlink to /data/data&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;p&gt;[1] http://android.stackexchange.com/questions/46926/android-folder-hierarchy
[2] http://android.stackexchange.com/questions/48393/what-kind-of-data-is-stored-in-data-user-directory&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 29 May 2017 13:39:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-29:/posts/an-zhuo-de-wen-jian-xi-tong.html</guid><category>大前端</category><category>Android</category><category>计算机</category></item><item><title>cross compiling on android</title><link>/posts/cross-compiling-on-android.html</link><description>&lt;h2&gt;basic knowledge&lt;/h2&gt;
&lt;p&gt;first, we need a cross compiler, which you can download from the source or somewhere.&lt;/p&gt;
&lt;p&gt;second, when we use gcc to build stuff, actually we are implicitly linking to the stdlib of c, if we are cross compiling programs for another platform, then we need another platform's filesystem to be accessible to us. However, we only need the target's /usr directory, because that's where the header files lives in. &lt;/p&gt;
&lt;p&gt;we place target's header files in a directory called &lt;em&gt;sysroot&lt;/em&gt;, and gcc supports the argument &lt;code&gt;--sysroot&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;gcc config parameters&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;|options  | explaination                                    |
|---------|-------------------------------------------------|
|--build  |the machine which you build on                   |
|--host   |the machine which your binary will be running on |
|--target |the machine that GCC will produce code for       |

|--build |--host |--target|result |
|--------|-------|--------|-------|
|-   |-  | -      |native |
|-   |-      | x      |cross complie|
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;LDFLAGS="$LDFLAGS -m32 ?&lt;/code&gt;
Argument &lt;code&gt;--target&lt;/code&gt; makes sense only when building compiler (e.g. GCC).&lt;/p&gt;
&lt;h2&gt;How to&lt;/h2&gt;
&lt;p&gt;Let's assume you have directory called ~/x-compile&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You have your tool-chain installed, that it is the correct tool-chain and the PATH environment variable is correctly set, so that the cross-compiler and all other cross-tools binaries can be called from any folder.&lt;/li&gt;
&lt;li&gt;You have the sysroot installed in ~/x-compile/sysroot&lt;/li&gt;
&lt;li&gt;Your code depends on a library for which you have the source code in ~/x-compile/depsrc/&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You have the source code to be cross-compiled in ~/x-compile/src&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;compile you dependency lib, if your dependency lib don't need stdlib&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./configure CC=arm-linux-gnueabihf-gcc --prefix=~/x-compile/deps --host=arm-linux-gnueabihf
make
make install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;if your dependency needs system libs, then you need &lt;code&gt;--sysroot&lt;/code&gt; as below&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;compile your program&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;compile python on android&lt;/h2&gt;
&lt;p&gt;在安卓上编译python&lt;/p&gt;
&lt;p&gt;compiling 2.7.2&lt;/p&gt;
&lt;p&gt;https://mdqinc.com/blog/2011/09/cross-compiling-python-for-android/&lt;/p&gt;
&lt;p&gt;another tutorial&lt;/p&gt;
&lt;p&gt;http://www.srplab.com/en/files/others/compile/cross_compiling_python_for_android.html&lt;/p&gt;
&lt;p&gt;best tutorial&lt;/p&gt;
&lt;p&gt;http://joaoventura.net/blog/2014/python-android-5/&lt;/p&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;p&gt;http://www.fabriziodini.eu/posts/cross_compile_tutorial/
https://landley.net/writing/docs/cross-compiling.html
http://stackoverflow.com/questions/5139403/whats-the-difference-of-configure-option-build-host-and-target  &lt;/p&gt;
&lt;p&gt;very confusing, the second answer is better&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 29 May 2017 13:27:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-29:/posts/cross-compiling-on-android.html</guid><category>大前端</category><category>Android</category><category>计算机</category></item><item><title>安卓的adb工具与命令行</title><link>/posts/an-zhuo-de-adbgong-ju-yu-ming-ling-xing.html</link><description>&lt;h1&gt;Yifei's Notes&lt;/h1&gt;
&lt;p&gt;adb is pretty unstable, it's meant for debug usage, NOT for a long-running service.&lt;/p&gt;
&lt;h1&gt;Install&lt;/h1&gt;
&lt;p&gt;install on ubuntu: &lt;code&gt;apt-get install android-tools-adb android-tools-fastboot&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;install on mac: &lt;code&gt;brew install android-platform-tools&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;Connect model&lt;/h1&gt;
&lt;p&gt;there is a server on PC called adb server, if not started, will be started on first adb client call commands. there is an adbd daemon on phone, run as not root by default.&lt;/p&gt;
&lt;h1&gt;adb devices&lt;/h1&gt;
&lt;p&gt;list all devices, give serial number for usb, and ip:port for wifi devices as adb id. if only one device, all commands are issued to that device, if many, use adb -s &lt;adb-id&gt; command to select a device.&lt;/p&gt;
&lt;h2&gt;Connect over Wifi&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;first usb adb to the device&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;second&lt;/p&gt;
&lt;p&gt;if rooted and run this on phone&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;su
setprop service.adb.tcp.port 5555
stop adbd &amp;amp;&amp;amp; start adbd
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if not rooted and run this on computer
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;adb tcpip 5555
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;&lt;code&gt;adb connect ip:port&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;adb usb&lt;/code&gt;  # back to usb mode&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;pull/push&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;adb pull phone_path pc_path&lt;/code&gt;
&lt;code&gt;adb push pc_path phone_path&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;install/uninstall&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;adb install 
adb uninstall
adb shell pm clear PACKAGE_NAME  # clears package data
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;forward&lt;/h2&gt;
&lt;p&gt;adb forward local:port android:port&lt;/p&gt;
&lt;p&gt;adb wait-for-device&lt;/p&gt;
&lt;p&gt;read the adb help&lt;/p&gt;
&lt;h2&gt;remount&lt;/h2&gt;
&lt;p&gt;remounts the /system, /vendor (if present) and /oem (if present) partitions on the device read-write&lt;/p&gt;
&lt;p&gt;adb forward&lt;/p&gt;
&lt;p&gt;which forwards requests on a specific host port to a different port on a device&lt;/p&gt;
&lt;p&gt;&lt;code&gt;adb forward host device&lt;/code&gt;
&lt;code&gt;adb forward tcp:6100 tcp:7100&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;get running activity name&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;adb shell dumpsys activity | grep mFocusedActivity&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;pm
setprop/getprop
netcfg
screencap
screenrecord&lt;/p&gt;
&lt;p&gt;error closed&lt;/p&gt;
&lt;p&gt;可能是权限不够，执行了n权限过高的操作，需要首先执行 adb root&lt;/p&gt;
&lt;p&gt;能用 ssh，就用 ssh ，不要用 adb&lt;/p&gt;
&lt;h1&gt;Android Shell Command&lt;/h1&gt;
&lt;p&gt;https://github.com/jackpal/Android-Terminal-Emulator/wiki/Android-Shell-Command-Reference
http://forum.xda-developers.com/showthread.php?t=1694251 
http://forum.xda-developers.com/wiki/Guide%3aUsing_the_Terminal#SSHD
http://www.kpbird.com/2013/05/android-shell-command-pm-package-manager.html&lt;/p&gt;
&lt;p&gt;termux&lt;/p&gt;
&lt;h1&gt;32 bit adb 在64位linux上无法运行&lt;/h1&gt;
&lt;p&gt;The error message is no such file of directory, which is quite miss-leading&lt;/p&gt;
&lt;h1&gt;adb install 安装失败&lt;/h1&gt;
&lt;p&gt;apk 没有权限  应该777
apk 有证书不一致的 卸载旧的apk&lt;/p&gt;
&lt;h1&gt;Configuator 设置 uiautomator 的超时时间，参见[1]&lt;/h1&gt;
&lt;p&gt;[1] https://developer.android.com/reference/android/support/test/uiautomator/Configurator.html&lt;/p&gt;
&lt;p&gt;从手机上拉取已安装应用的apk文件&lt;/p&gt;
&lt;p&gt;adb shell pm path com.example.someapp&lt;/p&gt;
&lt;p&gt;adb pull /data/app/com.example.someapp-2.apk&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 29 May 2017 12:45:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-29:/posts/an-zhuo-de-adbgong-ju-yu-ming-ling-xing.html</guid><category>大前端</category><category>Android</category><category>计算机</category></item><item><title>Linux 命令行账户管理</title><link>/posts/linux-ming-ling-xing-zhang-hu-guan-li.html</link><description>&lt;p&gt;执行 &lt;code&gt;sudo vi /etc/suduers&lt;/code&gt;, 然后输入：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;username ALL=(ALL) NOPASSWD: ALL&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;useradd -m USERNAME  # add a user
userdel USERNAME  # delete a user
passwd -e  # password expire next time user login

groups username  # view username groups
usermod -G groupname username  # add user to a group
usermod -g groupname username # set user to a group

newgrp
make newly added group work immediately without login/out
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;chsh 提示输入密码的问题&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Changing /etc/pam.d/chsh: from:

auth       required   pam_shells.so
to

auth       sufficient   pam_shells.so
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 29 May 2017 12:40:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-29:/posts/linux-ming-ling-xing-zhang-hu-guan-li.html</guid><category>命令行</category><category>后端</category><category>计算机</category></item><item><title>TCP 握手常见考点</title><link>/posts/tcp-wo-shou-chang-jian-kao-dian.html</link><description>&lt;h1&gt;连接建立&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" src="https://ws3.sinaimg.cn/large/006tKfTcly1ftppcaaoz7j30i40bdgn0.jpg"&gt;&lt;/p&gt;
&lt;p&gt;上面的图说的已经很好了，不再赘述。&lt;/p&gt;
&lt;h2&gt;为什么需要三次握手&lt;/h2&gt;
&lt;p&gt;这主要是为了防止已失效的连接请求报文段突然又传送到了服务端，服务端建立一个新的连接，因而产生错误。 &lt;/p&gt;
&lt;p&gt;所谓已失效的连接请求报文段是这样产生的。A发送连接请求，但因连接请求报文丢失而未收到确认，于是A重发一次连接请求，成功后建立了连接。数据传输完毕后就释放了连接。&lt;/p&gt;
&lt;p&gt;现在假定A发出的第一个请求报文段并未丢失，而是在某个网络节点长时间滞留了，以致延误到连接释放以后的某个时间才到达B。本来这是一个早已失效的报文段。但B收到此失效的连接请求报文段后，就误以为A又发了一次新的连接请求，于是向A发出确认报文段，同意建立连接。假如不采用三次握手，那么只要B发出确认，新的连接就建立了。 &lt;/p&gt;
&lt;p&gt;由于A并未发出建立连接的请求，因此不会理睬B的确认，也不会向B发送数据。但B却以为新的运输连接已经建立了，并一直等待A发来数据，因此白白浪费了许多资源。 &lt;/p&gt;
&lt;p&gt;采用TCP三次握手的方法可以防止上述现象发生。例如在刚才的情况下，由于A不会向B的确认发出确认，连接就不会建立。&lt;/p&gt;
&lt;h2&gt;如果在TCP第三次握手中的报文段丢失了会发生什么情况?&lt;/h2&gt;
&lt;p&gt;Client认为这个连接已经建立，如果Client端向Server写数据，Server端将以RST包响应，方能感知到Server的错误。&lt;/p&gt;
&lt;h1&gt;链接释放&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" src="https://ws2.sinaimg.cn/large/006tKfTcly1ftppdqkfzij311g0rok0s.jpg"&gt;&lt;/p&gt;
&lt;p&gt;需要注意的是，TCP 是全双工的协议，因此链接建立之后就没有客户端服务器的概念了，两边是对等的，都可以释放链接&lt;/p&gt;
&lt;p&gt;MSS（最长报文长度）, 由两端的较短值决定, 在以太网中的典型值为1460, 是以太网的 MTU(1500)减去 IP 的头部 40B 得到的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://ws1.sinaimg.cn/large/006tKfTcly1ftpt8b0upyj30f40lc765.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;为什么需要 TIME_WAIT 状态&lt;/h2&gt;
&lt;p&gt;首先是另一个概念 MSL, 最长报文生命周期, 在 BSD 系统上一般设定为30s, 不过可以长到 2min。TIME_WAIT 状态的时间设定为2MSL。&lt;/p&gt;
&lt;p&gt;TIME_WAIT 是主动关闭端进入的状态, 发送完最后一个 ACK 之后进入 TIME_WAIT 状态等待 2MSL 才进入 CLOSED 状态&lt;/p&gt;
&lt;p&gt;TIME_WAIT 状态存在的两个理由:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可靠地实现 TCP 全双工链接的终止; 假如对方没能收到最后一个 ACK, 那么他将会重新发送 FIN, 这时候如果客户端已经关闭了显然不能再次回复 ACK 了.&lt;/li&gt;
&lt;li&gt;保证上一个相同连接的数据包已经在网络上消失; 如果一个新的链接建立在了同一个端口上, 那么他将可能收到上一个进程的数据包, 这是我们为老连接保留了2MSL 的 TIME_WAIT 值, 那么就可以保证原有的链接都不存在网络上了.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;如果服务端主动关闭链接，也需要等待两个 MSL，那么重启服务器怎么绑定原有端口？&lt;/h2&gt;
&lt;p&gt;主动关闭链接端相应的端口会在 2 MSL 内处于 TIME-WAIT 状态而不能用。如果是客户端，那么问题不大，客户端一般会重新使用一个新的端口。如果是在服务端，因为服务端使用的都是常用端口，不能改变，也就是需要等待两个 MSL 才能使用刚拿的端口，比如 Nginx 重启，内核会显示当前端口是 busy 的，不能使用，等待 4min 显然是不现实的。为了解决这个问题，可以强制复用端口，在创建 socket 的时候使用 SO_REUSEADDR 就可以了。不过需要注意的是，SO_REUSEADDR 仅对 TIME_WAIT 状态有用，如果 socket 在其他状态，是不能复用的。注意不是 SO_REUSEPORT。&lt;/p&gt;
&lt;h2&gt;多个进程绑定同一个端口&lt;/h2&gt;
&lt;p&gt;我们知道一个同一个端口只有一个进程可以 bind 成功，那么 web 服务器是如何做到多进程呢？传统方法是在主进程使用 listen 然后在其他进程使用 accept 接受链接。不过这样会导致当有链接来的时候，所有的进程都会被唤醒，影响性能。在 3.9 内核之后，添加了 SO_REUSEPORT 属性，可以使用 SO_REUSEPORT 让每一个进程有当单独的监听队列，这样当有链接来的时候，内核只会唤醒一个进程。&lt;/p&gt;
&lt;h2&gt;当网络断开时，TCP 链接会断开吗？&lt;/h2&gt;
&lt;p&gt;TCP 链接有 keepalive 的功能，需要手动打开，但是一般来说没有人用。所以可以认为一般情况下，当物理网络断开时的时候，如果仅考虑 TCP 层，那么这个链接永远不会断开。不过一般来说，通过其他层面会知道这个链接断开了。比如说一般的应用层协议都会有心跳包的机制，这样就可以知道链接断开了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://img-blog.csdn.net/20150907214517068"&gt;&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;https://serverfault.com/questions/329845/how-to-forcibly-close-a-socket-in-time-wait&lt;/li&gt;
&lt;li&gt;http://www.unixguide.net/network/socketfaq/4.5.shtml&lt;/li&gt;
&lt;li&gt;https://blog.csdn.net/Yaokai_AssultMaster/article/details/68951150&lt;/li&gt;
&lt;li&gt;https://www.zhihu.com/question/53672815&lt;/li&gt;
&lt;li&gt;https://blog.qiusuo.im/blog/2014/09/14/linux-so-reuseport/&lt;/li&gt;
&lt;li&gt;https://blog.csdn.net/xy010902100449/article/details/48274635&lt;/li&gt;
&lt;li&gt;https://www.nginx.com/blog/socket-sharding-nginx-release-1-9-1/&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 29 May 2017 11:47:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-29:/posts/tcp-wo-shou-chang-jian-kao-dian.html</guid><category>计算机</category><category>网络</category></item><item><title>笔记生涯</title><link>/posts/bi-ji-sheng-ya.html</link><description>&lt;p&gt;写笔记也有几年时间了，最开始自然用的是开山鼻祖 Evernote，当时并没有什么独立思考的能力，大概是看到有什么好的文章，一时消化不了或者想着会回头来看，便用 Evernote Webclipper 剪辑下来，到最后这些『笔记』自然是没有看过多少，翻了翻，仅剩下几篇还算是自己写的其余便都删了。&lt;/p&gt;
&lt;p&gt;后来开始读研，国内的笔记软件也多了起来，听说 wiz 对 markdown 的支持是最好的，又是一个小团队出品，甚和我心，用了一年有余，记笔记也不多，然而总是感觉有些不顺手，遂弃之&lt;/p&gt;
&lt;p&gt;虽然从大三开始便用 ubuntu 做主力系统，然而竟直到研二才算是习惯 vi 的操作方式，甚至用熟悉 shell 竟是第一份工作之后的事，当然这是后话了。用熟了 vi，直接用一个命令(vilog)写 markdown 文件好了，半年有余，算是日志，也是笔记吧，唯一的不满就是表格太不方便表达了。&lt;/p&gt;
&lt;p&gt;再后来用半年挣来的外快终于有闲钱够得一天 mac，甚喜，第一次有一种愉快的图形界面的体验，偶尔会在手机上看看笔记，又觉得只在电脑上写几个文件的方式不甚移动化，有一番考察，发现 OneNote 甚合我意，最贴心的功能是能够在一个笔记的任何地方点上一点便可以在此处开始一个新的文本框，实在方便。&lt;/p&gt;
&lt;p&gt;从研二开始，用 OneNote 两年有余，大部分都是自己的笔记，感悟，然而 OneNote 似乎渐渐也满足不了我的用途，主要有下列几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;只能同时查看一个笔记页面，也就是不能多窗口&lt;/li&gt;
&lt;li&gt;不能自动生成目录&lt;/li&gt;
&lt;li&gt;分享很不友好&lt;/li&gt;
&lt;li&gt;不安全，毕竟是在微软的服务器上，一个是数据泄密，一个是数据丢失&lt;/li&gt;
&lt;li&gt;同一片笔记只能在一个目录下&lt;/li&gt;
&lt;li&gt;Mac 版功能不全&lt;/li&gt;
&lt;li&gt;不能设置默认字体，字体变来变去&lt;/li&gt;
&lt;li&gt;不支持 markdown&lt;/li&gt;
&lt;li&gt;经常需要登录&lt;/li&gt;
&lt;li&gt;添加附件不能支持预览&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;OneNote 有两点好处希望也能够保留&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自由的插入表格和图片&lt;/li&gt;
&lt;li&gt;能够在一篇笔记中加入多个文本框，点到哪里写哪里&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;尝试着自己写笔记软件, 却又发现前端什么的实在太庞杂, 遂放弃.&lt;/p&gt;
&lt;p&gt;后来买了 iPad Pro 2, 发现用Apple Pencil 和 Good Note 才是绝配. 当然还是无法发表分享&lt;/p&gt;
&lt;p&gt;恰好在这两日在学习 django，不如自己发布一下，所以就有了 ynote.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 29 May 2017 01:09:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-29:/posts/bi-ji-sheng-ya.html</guid><category>计算机</category><category>通用工具</category></item><item><title>Configuring OpenWrt in TP-Link 702n</title><link>/posts/configuring-openwrt-in-tp-link-702n.html</link><description>&lt;h1&gt;如何重置一个损坏的 OpenWrt&lt;/h1&gt;
&lt;p&gt;删除 overlay 下的文件即可&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rm -rf /overlay/*
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;网络配置&lt;/h1&gt;
&lt;h3&gt;1.Assign a Password for Root&lt;/h3&gt;
&lt;p&gt;telnet 192.168.1.1
    passwd root
    exit&lt;/p&gt;
&lt;h3&gt;2.Interface config: &lt;code&gt;/etc/config/network&lt;/code&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        config interface &amp;#39;loopback&amp;#39;
            option ifname &amp;#39;lo&amp;#39;
            option proto &amp;#39;static&amp;#39;
            option ipaddr &amp;#39;127.0.0.1&amp;#39;
            option netmask &amp;#39;255.0.0.0&amp;#39;
        config interface &amp;#39;lan&amp;#39;
            option ifname &amp;#39;eth0&amp;#39;
            option proto &amp;#39;dhcp&amp;#39;
        config interface &amp;#39;wifi&amp;#39;
            option proto &amp;#39;static&amp;#39;
            option ipaddr &amp;#39;172.19.1.1&amp;#39;
            option netmask &amp;#39;255.255.255.0&amp;#39; 
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;3.Wireless Config: &lt;code&gt;/etc/config/wireless&lt;/code&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        1) **remove to enable wifi**
            # REMOVE THIS LINE TO ENABLE WIFI:
            option disabled 1
        2) config wifi interface
            config wifi-iface
                option device &amp;#39;radio0&amp;#39;
                option network &amp;#39;wifi&amp;#39;
                option mode &amp;#39;ap&amp;#39;
                option ssid &amp;#39;WR703n&amp;#39;
                option encryption &amp;#39;psk2&amp;#39;
                option key &amp;#39;secret&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;4.DHCP Config: &lt;code&gt;/etc/config/dhcp&lt;/code&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        config dhcp wifi                                          
            option interface        wifi                      
            option start    100                               
            option limit    150                               
            option leasetime        12h                       
                                                          
        config dhcp lan                               
            option interface        lan           
            option ignore   1
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;5.Firewall Config: &lt;code&gt;/etc/config/firewall&lt;/code&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        config defaults
            option syn_flood 1
            option input ACCEPT
            option output ACCEPT
            option forward ACCEPT
        config zone
            option name lan
            option network &amp;#39;lan&amp;#39;
            option input ACCEPT
            option output ACCEPT
            option forward ACCEPT
            option masq 1
            option mtu_fix 1
        config zone
            option name wifi
            option network &amp;#39;wifi&amp;#39;
            option input ACCEPT
            option output ACCEPT
            option forward ACCEPT
        config forwarding
            option src lan
            option dest wifi
        config forwarding
            option src wifi
            option dest lan 
    PS: to use pppoe, lan -&amp;gt; wan
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;6.Reboot&lt;/h3&gt;
&lt;h2&gt;2.Mount Exteral Drive and Extroot(pivot root)&lt;/h2&gt;
&lt;h3&gt;1.Add USB support&lt;/h3&gt;
&lt;p&gt;opkg update &amp;amp;&amp;amp; opkg install kmod-usb2
        insmod ehci-hcd
        opkg install kmod-usb-storage block-mount kmod-fs-ext4
    &lt;/p&gt;
&lt;h3&gt;2.Copy the Entire &lt;code&gt;/&lt;/code&gt; to USB Storage&lt;/h3&gt;
&lt;p&gt;mkdir -p /mnt/sda1
        mount /dev/sda1 /mnt/sda1
        mkdir -p /tmp/cproot
        mount --bind / /tmp/cproot
        tar -C /tmp/cproot -cvf - . | tar -C /mnt/sda1 -xf -
        umount /tmp/cproot
        umount /mnt/sda1&lt;/p&gt;
&lt;h3&gt;2.Edit &lt;code&gt;/etc/config/fstab&lt;/code&gt; file&lt;/h3&gt;
&lt;p&gt;config mount
            option target /  # this is curcial
            option device /dev/sda1
            option fstype ext4
            option options rw,sync
            option enabled 1 #remeber to change this
            option enabled_fsck 0 
3.(Necessary only if you are not extrooting) Opkg to Exteral Drive&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;1.Edit &lt;code&gt;/etc/opkg.conf&lt;/code&gt; file&lt;/h3&gt;
&lt;p&gt;dest usb /mnt/usb&lt;/p&gt;
&lt;h3&gt;2.Edit &lt;code&gt;/etc/profile&lt;/code&gt; file&lt;/h3&gt;
&lt;p&gt;export USB=/mnt/usb
        # it's crucial to make customized bin preceeds system ones
        export PATH=$USB/usr/bin:$USB/usr/sbin:$PATH
        export LD_LIBRARY_PATH=$USB/lib:$USB/usr/lib&lt;/p&gt;
&lt;h3&gt;3.Remeber to use&lt;/h3&gt;
&lt;p&gt;opkg isntall &lt;package&gt; -d usb&lt;/p&gt;
&lt;h3&gt;4.fix&lt;/h3&gt;
&lt;p&gt;run linkmaker to link /etc to /mnt/usb/etc
!!!!!!!!!!!!!!!!!!!!!below is down on extroot!!!!!!!!!!!!!!!!!!!!!!!&lt;/p&gt;
&lt;h1&gt;安装 Python&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;opkg install python
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;TODO: 不知道能否交叉编译一个 micropython&lt;/p&gt;
&lt;h2&gt;5.Samba configuration&lt;/h2&gt;
&lt;p&gt;1.Install Samba
        opkg install samba36-server
    2.mkdir ~/share
      chmod 777 ~/share
    3.Share Level Share
        1. Edit &lt;code&gt;/etc.config/samba&lt;/code&gt; file
        config samba
            option 'name'                   'OpenWrt'
            option 'workgroup'              'WORKGROUP'
            option 'description'            'OpenWrt'
            option 'homes'                  '0' # disable ~ dir sharing
        config sambashare
            option name                     share
            option path                     /root/share
            option read_only                no # enable write
            option guest_ok                 yes # enable no passwd visit
            option create_mask              0777
            option dir_mask                 0777
        2. change security = user to security = share in /etc/samba/smb.conf.template
    
    4./etc/init.d/samba enable &amp;amp;&amp;amp; /etc/init.d/samba start&lt;/p&gt;
&lt;h1&gt;免密码登录&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;scp ~/.ssh/id_rsa.pub root@ow:/etc/dropbear/authorized_keys
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;更改 banner&lt;/h1&gt;
&lt;p&gt;编辑 /etc/banner 即可&lt;/p&gt;
&lt;h2&gt;8.SSH Proxy&lt;/h2&gt;
&lt;p&gt;1.install openssh and autossh
        mv /usr/bin/ssh /usr/bin/ssh.dropbear
        mv /usr/bin/scp /usr/bin/scp/dropbear
        opkg install openssh-client autossh&lt;/p&gt;
&lt;h1&gt;禁用 luci&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/init.d/uhttpd disable
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;10.Install Camera&lt;/h2&gt;
&lt;p&gt;1.install video support
        opkg install kmod-video-core kmod-video-uvc mjpg-streamer fswebcam
    2.Using fswebcam
        fswebcam capture.jpg -r 640x480
    3.Using mjpg-streamer&lt;/p&gt;
&lt;h2&gt;11.Static DHCP leases&lt;/h2&gt;
&lt;p&gt;1.vi /etc/config/dhcp
      http://wiki.openwrt.org/doc/uci/dhcp#static.leases&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 29 May 2017 01:09:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-29:/posts/configuring-openwrt-in-tp-link-702n.html</guid><category>IoT</category><category>计算机</category></item><item><title>C语言中的 setjmp/longjmp</title><link>/posts/cyu-yan-zhong-de-setjmplongjmp.html</link><description>&lt;p&gt;首先吐槽一下这个缩写, 好好地 jump 单词才四个字母不用, 非要缩写成 jmp 三个字母, 每次都打错, 蛋疼&lt;/p&gt;
&lt;p&gt;在 C 中，goto 语句是不能跨越函数的，而执行这类跳转功能的是 &lt;code&gt;setjmp&lt;/code&gt; 和 &lt;code&gt;longjmp&lt;/code&gt; 宏。这两个宏对于处理发生在深层嵌套函数调用中的出错情况是非常有用的。&lt;/p&gt;
&lt;p&gt;此即为：非局部跳转。非局部指的是，这不是由普通 C 语言 goto 语句在一个函数内实施的跳转，而是在栈上跳过若干调用帧，返回到当前函数调用路径的某个函数中。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#include &amp;amp;lt;setjmp.h&amp;amp;gt;
int  setjmp (jmp_buf env) ;  /*设置调转点*/
void longjmp (jmp_buf env,  int val) ;  /*跳转*/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;setjmp&lt;/code&gt; 参数 env 的类型是一个特殊类型 &lt;code&gt;jmp_buf&lt;/code&gt;。这一数据类型是某种形式的数组，其中存放 在调用 &lt;code&gt;longjmp&lt;/code&gt; 时能用来恢复栈状态的所有信息。因为需在另一个函数中引用 env 变量，所以应该将 env 变量定义为全局变量。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;longjmp&lt;/code&gt; 参数 val，它将成为从 setjmp 处返回的值。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#include &amp;amp;lt;stdio.h&amp;amp;gt;  
#include &amp;amp;lt;setjmp.h&amp;amp;gt;  
static jmp_buf buf;  
void second(void){  
    printf(&amp;quot;second\n&amp;quot;);  
    longjmp(buf,1);              
    // 跳回setjmp的调用处使得setjmp返回值为1  
}  
void first(void) {  
    second();  
    printf(&amp;quot;first\n&amp;quot;);            
    // 不可能执行到此行  
}  
int main(){     
    if (!setjmp(buf)) {  
        // 进入此行前，setjmp返回0  
        first();  
    } else {     
        // 当longjmp跳转回，setjmp返回1，因此进入此行  
        printf(&amp;quot;main\n&amp;quot;);  
    }  
    return 0;  
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;直接调用 setjmp 时，返回值为 0，这一般用于初始化（设置跳转点时）。以后再调用 longjmp 宏时用 env 变量进行跳转。程序会自动跳转到 setjmp 宏的返回语句处，此时 setjmp 的返回值为非 0，由 longjmp 的第二个参数指定。
一般地，宏 &lt;code&gt;setjmp&lt;/code&gt; 和 &lt;code&gt;longjmp&lt;/code&gt; 是成对使用的，这样程序流程可以从一个深层嵌套的函数中返回。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 29 May 2017 01:09:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-29:/posts/cyu-yan-zhong-de-setjmplongjmp.html</guid><category>C 语言</category><category>编程语言</category><category>计算机</category></item><item><title>C语言中已经废弃的函数</title><link>/posts/cyu-yan-zhong-yi-jing-fei-qi-de-han-shu.html</link><description>&lt;p&gt;由于安全性原因，C 标准库中的不少函数已经被废弃了，同时增加了对应的替换函数。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sprintf --&amp;gt; snprintf
gets --&amp;gt; fgets
strcat --&amp;gt; strncat
strcpy --&amp;gt; strncpy
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;strtok&lt;/code&gt;函数用于分解字符串，需要一个变量保存内部分解进度
&lt;code&gt;strtok_r&lt;/code&gt;是它的可重入版本&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 29 May 2017 01:09:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-29:/posts/cyu-yan-zhong-yi-jing-fei-qi-de-han-shu.html</guid><category>C 语言</category><category>编程语言</category><category>计算机</category></item><item><title>如何利用碎片时间</title><link>/posts/ru-he-li-yong-sui-pian-shi-jian.html</link><description>&lt;ol&gt;
&lt;li&gt;歇一会&lt;/li&gt;
&lt;li&gt;把下一件事提前开始做，不适用于地铁上，一个人吃饭等时间&lt;/li&gt;
&lt;li&gt;和同学聊聊天&lt;/li&gt;
&lt;li&gt;回顾一下今天干了什么，或者准备一下接下来的重要事情&lt;/li&gt;
&lt;li&gt;CoC，BoomBeach&lt;/li&gt;
&lt;li&gt;复习一些短小的东西，函数参考之类3&lt;/li&gt;
&lt;li&gt;背单词&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一定不要去做大块时间才能做的事，一定不能去给接下来的大块时间挖坑&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 29 May 2017 01:09:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-29:/posts/ru-he-li-yong-sui-pian-shi-jian.html</guid><category>反思与总结</category></item><item><title>vim goto 与历史导航</title><link>/posts/vim-goto-yu-li-shi-dao-hang.html</link><description>&lt;p&gt;Vim command of g&lt;key&gt;
 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gd  本地定义
gD  全局声明
g*  搜索
g#  反向搜索
gf  打开文件
g]  跳到tag定义的地方
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;Ctrl-O&lt;/code&gt; to go back to files&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Ctrl-I&lt;/code&gt; to go to new files&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Mon, 29 May 2017 01:09:00 +0800</pubDate><guid isPermaLink="false">tag:None,2017-05-29:/posts/vim-goto-yu-li-shi-dao-hang.html</guid><category>vim</category><category>计算机</category><category>通用工具</category></item><item><title>RSS 和 Atom 协议详解和不足</title><link>/posts/rss-he-atom-xie-yi-xiang-jie-he-bu-zu.html</link><description>&lt;h1&gt;关于CDATA&lt;/h1&gt;
&lt;p&gt;CDATA stands for Character Data and it means that the data in between these strings includes data that could be interpreted as XML markup, but should not be.&lt;/p&gt;
&lt;p&gt;So we could use CDATA to smuggle some HTML into the XML document, so that the HTML doesn't confuse the XML document structure, and then use XSLT later to pull it out and spit it into a HTML document that is being output.
 
&lt;em&gt;In short, you don't have to escape all the &amp;lt; and &amp;amp; in CDATA section&lt;/em&gt;
 &lt;/p&gt;
&lt;h1&gt;RSS 2.0&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;rss&lt;/span&gt; &lt;span class="na"&gt;version=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2.0&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;channel&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Example Feed&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;description&amp;gt;&lt;/span&gt;Insert witty or insightful remark here&lt;span class="nt"&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;link&amp;gt;&lt;/span&gt;http://example.org/&lt;span class="nt"&gt;&amp;lt;/link&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;lastBuildDate&amp;gt;&lt;/span&gt;Sat, 13 Dec 2003 18:30:02 GMT&lt;span class="nt"&gt;&amp;lt;/lastBuildDate&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;managingEditor&amp;gt;&lt;/span&gt;johndoe@example.com (John Doe)&lt;span class="nt"&gt;&amp;lt;/managingEditor&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;item&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Atom-Powered Robots Run Amok&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;link&amp;gt;&lt;/span&gt;http://example.org/2003/12/13/atom03&lt;span class="nt"&gt;&amp;lt;/link&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;pubDate&amp;gt;&lt;/span&gt;Sat, 13 Dec 2003 18:30:02 GMT&lt;span class="nt"&gt;&amp;lt;/pubDate&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;description&amp;gt;&lt;/span&gt;Some text.&lt;span class="nt"&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;source&amp;gt;&lt;/span&gt;Shit News&lt;span class="nt"&gt;&amp;lt;/source&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;item&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/channel&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/rss&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;RSS 协议的一些不足和改进方向&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;没有标识文章重要度的字段&lt;/li&gt;
&lt;li&gt;没有途径把订阅数量等信息反馈给 RSS 提供方&lt;/li&gt;
&lt;li&gt;没有品牌特性&lt;/li&gt;
&lt;li&gt;没有机器推荐&lt;/li&gt;
&lt;li&gt;如果能够把 RSS 包装成像是 Amazon Prime 那样的服务，用户可能会很愿意付钱&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;实际上文章的增删改查是一套组合操作，而只使用一个 RSS 作为列表显然是不够的，必然要拓展。&lt;/p&gt;
&lt;p&gt;现代的 RSS 阅读器需要做三个方面&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一个社区&lt;/li&gt;
&lt;li&gt;能够把所有服务都提供RSS，包括不提供RSS的站点&lt;/li&gt;
&lt;li&gt;评论服务&lt;/li&gt;
&lt;li&gt;转码。有的 RSS 只提供了文章的摘要，有的 RSS 有实效性，有的 RSS 有自己的字体&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Atom 1.0&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;feed&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2005/Atom&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Example Feed&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;subtitle&amp;gt;&lt;/span&gt;Insert witty or insightful remark here&lt;span class="nt"&gt;&amp;lt;/subtitle&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://example.org/&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;updated&amp;gt;&lt;/span&gt;2003-12-13T18:30:02Z&lt;span class="nt"&gt;&amp;lt;/updated&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;author&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;John Doe&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;email&amp;gt;&lt;/span&gt;johndoe@example.com&lt;span class="nt"&gt;&amp;lt;/email&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/author&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;urn:uuid:60a76c80-d399-11d9-b93C-0003939e0af6&lt;span class="nt"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
 
    &lt;span class="nt"&gt;&amp;lt;entry&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Atom-Powered Robots Run Amok&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://example.org/2003/12/13/atom03&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a&lt;span class="nt"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;updated&amp;gt;&lt;/span&gt;2003-12-13T18:30:02Z&lt;span class="nt"&gt;&amp;lt;/updated&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;Some text.&lt;span class="nt"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/entry&amp;gt;&lt;/span&gt;
 
&lt;span class="nt"&gt;&amp;lt;/feed&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;reference&lt;/h1&gt;
&lt;p&gt;[1] http://www.intertwingly.net/wiki/pie/Rss20AndAtom10Compared&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yifei Kong</dc:creator><pubDate>Tue, 27 Dec 2016 11:35:00 +0800</pubDate><guid isPermaLink="false">tag:None,2016-12-27:/posts/rss-he-atom-xie-yi-xiang-jie-he-bu-zu.html</guid><category>计算机</category><category>网络</category></item></channel></rss>